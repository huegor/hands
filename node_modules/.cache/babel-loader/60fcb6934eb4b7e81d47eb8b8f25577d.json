{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, axisBottom, linkHorizontal, format, drag, zoom } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport generateLinks from \"./generateLinks\";\nimport Image from \"./Image\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Graphic({\n  src,\n  setSrc,\n  minMax,\n  radius,\n  fontSize\n}) {\n  _s();\n\n  // const [data, setData] = useState(src.nodes);\n  //initialize reference object to pass to svg in React Dom\n  const svgRef = useRef(); //svg wrapped in div bc otherwise resize observer callback won't work\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState(); //initialize links between nodes\n\n  const links = generateLinks(src.nodes); //initialize bottom axis label\n\n  const [axisLabel, setAxisLabel] = useState(\"Years (AD)\"); //all d3 shennanigans goes in this hook. called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n\n    if (!dimensions) return; //prevents crashing before min and max are calculated\n\n    if (!minMax) return; //prevents crashing before links are calculated\n\n    if (!links) return; //---scales---//\n    //scaleLinear takes domain (data values) & maps onto range (pixel values)\n\n    const xScale = scaleLinear().domain([minMax[0], minMax[1]]) //0 is minX, 1 is maxX (reference findMinMax)\n    .range([0, dimensions.width]);\n    const yScale = scaleLinear().domain([0, minMax[3]]) //todo\n    .range([0, dimensions.height]); //inverse scales for drag behavior\n\n    const xScaleInverse = scaleLinear().domain([-dimensions.width, dimensions.width]).range([-(minMax[1] - minMax[0]), minMax[1] - minMax[0]]); //minMax[1]-minMax[0] gives section of x values displayed onscreen\n\n    const yScaleInverse = scaleLinear().domain([-dimensions.height, dimensions.height]).range([-minMax[3], minMax[3]]); //todo\n\n    if (currentZoomState) {\n      const newXScale = currentZoomState.rescaleX(xScale); //zoom state comes w methods for transformations\n\n      xScale.domain(newXScale.domain());\n      xScaleInverse.range([-(newXScale.domain()[1] - newXScale.domain()[0]), newXScale.domain()[1] - newXScale.domain()[0]]);\n    }\n\n    ; //---draw bottom axis---//\n\n    const xAxis = axisBottom(xScale).tickSize(-dimensions.height) //tick extends to entire height of svg\n    .tickFormat(format('')); //gets rid of , for 1000s groupings\n\n    svg.select(\".x-axis\") //selects and replaces .x-axis\n    .style(\"transform\", `translateY(${dimensions.height}px)`).call(xAxis).call(g => g.select(\".domain\") //removes solid black axis bar\n    .remove()).call(g => g.selectAll(\".tick line\") //styles individual ticks\n    .attr(\"stroke-opacity\", 0.5).attr(\"stroke-dasharray\", \"2,2\")).call(g => g.selectAll(\".tick text\").attr(\"y\", 10) //todo?\n    .attr(\"opacity\", 0.5).attr(\"font-size\", fontSize * .8)); //replace class \"x-axis\" w xAxis\n\n    svg.selectAll(\".axisLabel\").data(axisLabel).join(\"text\").attr(\"class\", \"axisLabel\").text(axisLabel).attr(\"x\", dimensions.width / 2).attr(\"y\", dimensions.height * 1.08).attr(\"text-anchor\", \"middle\").attr(\"opacity\", 0.5) //todo\n    .attr(\"font-size\", fontSize * .8); //--drag behavior--//\n\n    const dragged = drag().on(\"drag\", e => {\n      const newData = [...src]; //always make a copy when updating array\n      //find array element in newData (id = index) and set new x y coordinates\n      //define id as array.length-1\n\n      newData[e.subject.id].x += xScaleInverse(e.dx);\n      newData[e.subject.id].y += yScaleInverse(e.dy); // console.log(newData[e.subject.id].x + \", \" + newData[e.subject.id].y);\n\n      setSrc(newData);\n    }); //---draw lines---//\n\n    const linker = linkHorizontal().source(link => link.source).target(link => link.target).x(node => xScale(node.x)).y(node => yScale(node.y));\n    svg.selectAll(\".link\").data(links).join(\"path\").attr(\"class\", \"link\").attr(\"d\", linker).attr(\"fill\", \"none\").attr(\"stroke\", n => n.color ? n.color : \"black\"); //---draw points---//\n\n    svg.selectAll(\".node\").data(src).join(\"circle\").attr(\"class\", \"node\").attr(\"r\", radius).attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n    .attr(\"cx\", d => xScale(d.x)).attr(\"cy\", d => yScale(d.y)).call(dragged); //---draw labels---//\n\n    svg.selectAll(\".label\").data(src).join(\"text\").attr(\"class\", \"label\").text(node => node.name).attr(\"x\", node => xScale(node.x)).attr(\"y\", node => yScale(node.y + 2)).attr(\"text-anchor\", \"middle\").attr(\"font-size\", fontSize); //---zoom---//\n\n    const zoomBehavior = zoom().scaleExtent([0.25, 5]) //can zoom 2x smaller and 5x bigger\n    .translateExtent([[-100, 0], [dimensions.width + 100, dimensions.height]]) //limits how far graph can pan\n    .on(\"zoom\", e => {\n      const zoomState = e.transform; //returns zoom transformations as an object\n\n      setCurrentZoomState(zoomState);\n    });\n    svg.call(zoomBehavior);\n  }, [src, links, dimensions, currentZoomState, minMax, radius, fontSize]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: wrapperRef,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        children: /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"x-axis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"images\",\n      children: src.imgs ? /*#__PURE__*/_jsxDEV(Image, {\n        urls: src.imgs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 19\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Graphic, \"uoSQK9BPMmsdVoeMdL/E+s194Mk=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = Graphic;\n;\nexport default Graphic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graphic\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js"],"names":["React","useState","useEffect","useRef","select","scaleLinear","axisBottom","linkHorizontal","format","drag","zoom","useResizeObserver","generateLinks","Image","Graphic","src","setSrc","minMax","radius","fontSize","svgRef","wrapperRef","dimensions","currentZoomState","setCurrentZoomState","links","nodes","axisLabel","setAxisLabel","svg","current","xScale","domain","range","width","yScale","height","xScaleInverse","yScaleInverse","newXScale","rescaleX","xAxis","tickSize","tickFormat","style","call","g","remove","selectAll","attr","data","join","text","dragged","on","e","newData","subject","id","x","dx","y","dy","linker","source","link","target","node","n","color","d","name","zoomBehavior","scaleExtent","translateExtent","zoomState","transform","imgs"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, axisBottom, linkHorizontal, format, drag, zoom } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport generateLinks from \"./generateLinks\";\nimport Image from \"./Image\";\n\nfunction Graphic({src, setSrc, minMax, radius, fontSize}) {\n  // const [data, setData] = useState(src.nodes);\n\n  //initialize reference object to pass to svg in React Dom\n  const svgRef = useRef();\n  //svg wrapped in div bc otherwise resize observer callback won't work\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState();\n\n  //initialize links between nodes\n  const links = generateLinks(src.nodes);\n\n  //initialize bottom axis label\n  const [axisLabel, setAxisLabel] = useState(\"Years (AD)\");\n\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n    if (!dimensions) return;\n    //prevents crashing before min and max are calculated\n    if (!minMax) return;\n    //prevents crashing before links are calculated\n    if (!links) return;\n\n    //---scales---//\n    //scaleLinear takes domain (data values) & maps onto range (pixel values)\n    const xScale = scaleLinear()\n      .domain([minMax[0], minMax[1]]) //0 is minX, 1 is maxX (reference findMinMax)\n      .range([0, dimensions.width]);\n    const yScale = scaleLinear()\n      .domain([0, minMax[3]]) //todo\n      .range([0, dimensions.height]);\n    //inverse scales for drag behavior\n    const xScaleInverse = scaleLinear()\n      .domain([-dimensions.width, dimensions.width])\n      .range([-(minMax[1]-minMax[0]), minMax[1]-minMax[0]]); //minMax[1]-minMax[0] gives section of x values displayed onscreen\n    const yScaleInverse = scaleLinear()\n      .domain([-dimensions.height, dimensions.height])\n      .range([-minMax[3], minMax[3]]); //todo\n\n    if (currentZoomState) {\n      const newXScale = currentZoomState.rescaleX(xScale); //zoom state comes w methods for transformations\n      xScale.domain(newXScale.domain());\n      xScaleInverse.range([\n        -(newXScale.domain()[1]-newXScale.domain()[0]),\n        (newXScale.domain()[1]-newXScale.domain()[0])\n      ]);\n    };\n\n    //---draw bottom axis---//\n    const xAxis = axisBottom(xScale)\n      .tickSize(-dimensions.height) //tick extends to entire height of svg\n      .tickFormat(format('')); //gets rid of , for 1000s groupings\n\n    svg\n      .select(\".x-axis\") //selects and replaces .x-axis\n      .style(\"transform\", `translateY(${dimensions.height}px)`)\n      .call(xAxis)\n      .call(g => g.select(\".domain\") //removes solid black axis bar\n        .remove())\n      .call(g => g.selectAll(\".tick line\") //styles individual ticks\n        .attr(\"stroke-opacity\", 0.5)\n        .attr(\"stroke-dasharray\", \"2,2\"))\n      .call(g => g.selectAll(\".tick text\")\n        .attr(\"y\", 10) //todo?\n        .attr(\"opacity\", 0.5)\n        .attr(\"font-size\", fontSize*.8)); //replace class \"x-axis\" w xAxis\n\n    svg\n      .selectAll(\".axisLabel\")\n      .data(axisLabel)\n      .join(\"text\")\n      .attr(\"class\", \"axisLabel\")\n      .text(axisLabel)\n      .attr(\"x\", dimensions.width/2)\n      .attr(\"y\", dimensions.height*1.08)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"opacity\", 0.5) //todo\n      .attr(\"font-size\", fontSize*.8);\n\n    //--drag behavior--//\n    const dragged = drag()\n      .on(\"drag\", e => {\n        const newData = [...src]; //always make a copy when updating array\n        //find array element in newData (id = index) and set new x y coordinates\n        //define id as array.length-1\n        newData[e.subject.id].x += xScaleInverse(e.dx);\n        newData[e.subject.id].y += yScaleInverse(e.dy);\n        // console.log(newData[e.subject.id].x + \", \" + newData[e.subject.id].y);\n        setSrc(newData);\n      });\n\n    //---draw lines---//\n    const linker = linkHorizontal()\n      .source(link => link.source)\n      .target(link => link.target)\n      .x(node => xScale(node.x))\n      .y(node => yScale(node.y));\n\n    svg\n      .selectAll(\".link\")\n      .data(links)\n      .join(\"path\")\n      .attr(\"class\", \"link\")\n      .attr(\"d\", linker)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", n => n.color? n.color : \"black\");\n\n\n    //---draw points---//\n    svg\n      .selectAll(\".node\")\n      .data(src)\n      .join(\"circle\")\n      .attr(\"class\", \"node\")\n      .attr(\"r\", radius)\n      .attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n      .attr(\"cx\", d => xScale(d.x))\n      .attr(\"cy\", d => yScale(d.y))\n      .call(dragged);\n\n\n    //---draw labels---//\n    svg\n      .selectAll(\".label\")\n      .data(src)\n      .join(\"text\")\n      .attr(\"class\", \"label\")\n      .text(node => node.name)\n      .attr(\"x\", node => xScale(node.x))\n      .attr(\"y\", node => yScale(node.y + 2))\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", fontSize);\n\n\n    //---zoom---//\n    const zoomBehavior = zoom()\n      .scaleExtent([0.25, 5]) //can zoom 2x smaller and 5x bigger\n      .translateExtent([[-100, 0], [dimensions.width+100, dimensions.height]]) //limits how far graph can pan\n      .on(\"zoom\", e => {\n        const zoomState = e.transform; //returns zoom transformations as an object\n        setCurrentZoomState(zoomState);\n      });\n\n    svg.call(zoomBehavior);\n  }, [src, links, dimensions, currentZoomState, minMax, radius, fontSize]);\n\n  return (\n    <>\n    <div ref={wrapperRef}>\n      <svg ref={svgRef}>\n        <g className=\"x-axis\" />\n      </svg>\n    </div>\n    <div className=\"images\">\n      {src.imgs ? <Image urls={src.imgs}/> : null}\n    </div>\n    </>\n  );\n};\n\nexport default Graphic;\n"]},"metadata":{},"sourceType":"module"}