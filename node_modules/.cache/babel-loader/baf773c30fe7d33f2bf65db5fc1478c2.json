{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, axisBottom, line, curveCardinal, drag } from \"d3\";\nimport ResizeObserver from \"resize-observer-polyfill\"; //otherwise breaks in safari and edge\n\nimport \"./App.css\";\nimport Data from \"./data.json\"; //defines dom element for resize observer to watch\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useResizeObserver = ref => {\n  _s();\n\n  const [dimensions, setDimensions] = useState(null); //only access reference (aka the svg) when it's rendered\n\n  useEffect(() => {\n    const observeTarget = ref.current; //create new resize observer w callback that takes resize target as args\n\n    const resizeObserver = new ResizeObserver(entries => {\n      //contentRect is the part ResizeObserver returns that has xy dimensions\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget); //cleanup function when unmount\n\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, []);\n  return dimensions;\n};\n\n_s(useResizeObserver, \"swpmFLcor9a4TnJ7R73Pli9/9G8=\");\n\nfunction App() {\n  _s2();\n\n  //data is initially set to imported json array Data\n  const [data, setData] = useState(Data);\n  const radius = 6;\n  const fontSize = 24; //reference object to pass to svg in React Dom\n\n  const svgRef = useRef(); //svg wrapped in div bc otherwise resize observer callback won't work\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); //all d3 shennanigans goes in this hook. called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n\n    if (!dimensions) return; //---scales---//\n    //scaleLinear takes domain (data values) & maps onto range (pixel values)\n\n    const xScale = scaleLinear().domain([0, 60]) //todo max(data.x)\n    .range([0, dimensions.width]);\n    const yScale = scaleLinear().domain([0, 60]) //todo\n    .range([0, dimensions.height]); //inverse scales for drag behavior\n\n    const xScaleInverse = scaleLinear().domain([-dimensions.width, dimensions.width]).range([-60, 60]); //todo\n\n    const yScaleInverse = scaleLinear().domain([-dimensions.height, dimensions.height]).range([-60, 60]); //todo\n    //---draw x axis---//\n\n    const xAxis = axisBottom(xScale);\n    svg.select(\".x-axis\").style(\"transform\", `translateY(${dimensions.height}px)`).call(xAxis); //replace class \"x-axis\" w xAxis\n    //--drag behavior--//\n\n    const dragged = drag().on(\"drag\", e => {\n      const newData = [...data]; //always make a copy when updating array\n      //find array element in newData (id = index) and set new x y coordinates\n      //define id as array.length-1\n\n      newData[e.subject.id].x += xScaleInverse(e.dx);\n      newData[e.subject.id].y += yScaleInverse(e.dy); // console.log(newData[e.subject.id].x + \", \" + newData[e.subject.id].y);\n\n      setData(newData);\n    }); //---draw points---//\n\n    svg.selectAll(\"circle\").data(data).join(\"circle\").attr(\"r\", radius).attr(\"cx\", d => xScale(d.x)).attr(\"cy\", d => yScale(d.y)).call(dragged); //---draw lines---//\n\n    const myLine = line().x(d => xScale(d.x)).y(d => yScale(d.y)).curve(curveCardinal);\n    svg.selectAll(\".line\") //if no line class, it selects x axis too\n    .data([data]) //just draw 1 line for the whole array\n    .join(\"path\").attr(\"class\", \"line\").attr(\"d\", value => myLine(value)).attr(\"fill\", \"none\").attr(\"stroke\", \"black\"); //---draw labels---//\n\n    svg.selectAll(\".label\").data(data).join(\"text\").attr(\"class\", \"label\").text(node => node.name).attr(\"x\", node => xScale(node.x)).attr(\"y\", node => yScale(node.y + 3)).attr(\"text-anchor\", \"middle\").attr(\"font-size\", fontSize);\n  }, [data, dimensions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"x-axis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"aFisn1FWCbcoVE11vs+uw/rrFFg=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js"],"names":["React","useState","useEffect","useRef","select","scaleLinear","axisBottom","line","curveCardinal","drag","ResizeObserver","Data","useResizeObserver","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","entries","forEach","entry","contentRect","observe","unobserve","App","data","setData","radius","fontSize","svgRef","wrapperRef","svg","xScale","domain","range","width","yScale","height","xScaleInverse","yScaleInverse","xAxis","style","call","dragged","on","e","newData","subject","id","x","dx","y","dy","selectAll","join","attr","d","myLine","curve","value","text","node","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, axisBottom, line, curveCardinal, drag } from \"d3\";\nimport ResizeObserver from \"resize-observer-polyfill\"; //otherwise breaks in safari and edge\nimport \"./App.css\";\nimport Data from \"./data.json\";\n\n//defines dom element for resize observer to watch\nconst useResizeObserver = ref => {\n  const [dimensions, setDimensions] = useState(null);\n  //only access reference (aka the svg) when it's rendered\n  useEffect(() => {\n    const observeTarget = ref.current;\n    //create new resize observer w callback that takes resize target as args\n    const resizeObserver =  new ResizeObserver((entries) => {\n      //contentRect is the part ResizeObserver returns that has xy dimensions\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    //cleanup function when unmount\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, []);\n  return dimensions;\n}\n\nfunction App() {\n\n  //data is initially set to imported json array Data\n  const [data, setData] = useState(Data);\n\n  const radius = 6;\n  const fontSize = 24;\n  //reference object to pass to svg in React Dom\n  const svgRef = useRef();\n  //svg wrapped in div bc otherwise resize observer callback won't work\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n    if (!dimensions) return;\n\n    //---scales---//\n    //scaleLinear takes domain (data values) & maps onto range (pixel values)\n    const xScale = scaleLinear()\n      .domain([0, 60]) //todo max(data.x)\n      .range([0, dimensions.width]);\n    const yScale = scaleLinear()\n      .domain([0, 60]) //todo\n      .range([0, dimensions.height]);\n    //inverse scales for drag behavior\n    const xScaleInverse = scaleLinear()\n      .domain([-dimensions.width, dimensions.width])\n      .range([-60, 60]);//todo\n    const yScaleInverse = scaleLinear()\n      .domain([-dimensions.height, dimensions.height])\n      .range([-60, 60]);//todo\n\n    //---draw x axis---//\n    const xAxis = axisBottom(xScale);\n\n    svg\n      .select(\".x-axis\")\n      .style(\"transform\", `translateY(${dimensions.height}px)`)\n      .call(xAxis); //replace class \"x-axis\" w xAxis\n\n    //--drag behavior--//\n    const dragged = drag()\n      .on(\"drag\", e => {\n        const newData = [...data]; //always make a copy when updating array\n        //find array element in newData (id = index) and set new x y coordinates\n        //define id as array.length-1\n        newData[e.subject.id].x += xScaleInverse(e.dx);\n        newData[e.subject.id].y += yScaleInverse(e.dy);\n        // console.log(newData[e.subject.id].x + \", \" + newData[e.subject.id].y);\n        setData(newData);\n      });\n\n    //---draw points---//\n    svg\n      .selectAll(\"circle\")\n      .data(data)\n      .join(\"circle\")\n      .attr(\"r\", radius)\n      .attr(\"cx\", d => xScale(d.x))\n      .attr(\"cy\", d => yScale(d.y))\n      .call(dragged);\n\n    //---draw lines---//\n    const myLine = line()\n      .x(d => xScale(d.x))\n      .y(d => yScale(d.y))\n      .curve(curveCardinal);\n\n    svg\n      .selectAll(\".line\") //if no line class, it selects x axis too\n      .data([data]) //just draw 1 line for the whole array\n      .join(\"path\")\n      .attr(\"class\", \"line\")\n      .attr(\"d\", value => myLine(value))\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"black\");\n\n    //---draw labels---//\n    svg\n    .selectAll(\".label\")\n    .data(data)\n    .join(\"text\")\n    .attr(\"class\", \"label\")\n    .text(node => node.name)\n    .attr(\"x\", node => xScale(node.x))\n    .attr(\"y\", node => yScale(node.y + 3))\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"font-size\", fontSize);\n\n  }, [data, dimensions]);\n\n  return (\n    <div ref={wrapperRef}>\n      <svg ref={svgRef}>\n        <g className=\"x-axis\" />\n      </svg>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}