{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, axisBottom, hierarchy, tree, linkHorizontal, drag, zoom } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport Image from \"./Image\";\nimport Data from \"../data.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Graphic({\n  src,\n  minMax,\n  radius,\n  fontSize\n}) {\n  _s();\n\n  const [data, setData] = useState(src); //reference object to pass to svg in React Dom\n\n  const svgRef = useRef(); //svg wrapped in div bc otherwise resize observer callback won't work\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState(); //all d3 shennanigans goes in this hook. called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n\n    if (!dimensions) return; //prevents crashing before min and max are calculated\n\n    if (!minMax) return;\n    const root = hierarchy(data);\n    console.log(root.descendants()); //pass this to find min max. for each: .data\n\n    console.log(root.links()); //---scales---//\n    //scaleLinear takes domain (data values) & maps onto range (pixel values)\n\n    const xScale = scaleLinear().domain([0, 60]) //0 is minX, 1 is maxX (reference findMinMax)\n    .range([0, dimensions.width]);\n    const yScale = scaleLinear().domain([0, 60]) //todo\n    .range([0, dimensions.height]); // //inverse scales for drag behavior\n    // const xScaleInverse = scaleLinear()\n    //   .domain([-dimensions.width, dimensions.width])\n    //   .range([-60, 60]);\n    // const yScaleInverse = scaleLinear()\n    //   .domain([-dimensions.height, dimensions.height])\n    //   .range([-60, 60]);\n    //\n    // if (currentZoomState) {\n    //   const newXScale = currentZoomState.rescaleX(xScale); //zoom state comes w methods for transformations\n    //   xScale.domain(newXScale.domain());\n    //   xScaleInverse.range([\n    //     -(newXScale.domain()[1]-newXScale.domain()[0]),\n    //     (newXScale.domain()[1]-newXScale.domain()[0])\n    //   ]);\n    // };\n    //---draw x axis---//\n    // const xAxis = axisBottom(xScale);\n    //\n    // svg\n    //   .select(\".x-axis\")\n    //   .style(\"transform\", `translateY(${dimensions.height}px)`)\n    //   .call(xAxis); //replace class \"x-axis\" w xAxis\n    //--drag behavior--//\n    // const dragged = drag()\n    //   .on(\"drag\", e => {\n    //     const newData = [...data]; //always make a copy when updating array\n    //     //find array element in newData (id = index) and set new x y coordinates\n    //     //define id as array.length-1\n    //     newData[e.subject.id].x += xScaleInverse(e.dx);\n    //     newData[e.subject.id].y += yScaleInverse(e.dy);\n    //     // console.log(newData[e.subject.id].x + \", \" + newData[e.subject.id].y);\n    //     setData(newData);\n    //   });\n    //---draw points---//\n\n    svg.selectAll(\".node\").data(root.descendants()).join(\"circle\") //for every node, draw a circle\n    .attr(\"class\", \".node\").attr(\"r\", radius).attr(\"cx\", node => xScale(node.data.x)).attr(\"cy\", node => yScale(node.data.y)); // svg\n    //   .selectAll(\"circle\")\n    //   .data(data)\n    //   .join(\"circle\")\n    //   .attr(\"r\", radius)\n    //   .attr(\"cx\", d => xScale(d.x))\n    //   .attr(\"cy\", d => yScale(d.y))\n    //   .call(dragged);\n    //---draw lines---//\n\n    const linker = linkHorizontal().x(node => node.data.x).y(node => node.data.y);\n    svg.selectAll(\".link\").data(root.links()).join(\"path\").attr(\"class\", \"link\").attr(\"d\", linker).attr(\"fill\", \"none\").attr(\"stroke\", \"black\"); // const myLine = line()\n    //   .x(d => xScale(d.x))\n    //   .y(d => yScale(d.y))\n    //   .curve(curveMonotoneX);\n    //\n    // svg\n    //   .selectAll(\".line\") //if no line class, it selects x axis too\n    //   .data([data]) //just draw 1 line for the whole array\n    //   .join(\"path\")\n    //   .attr(\"class\", \"line\")\n    //   .attr(\"d\", value => myLine(value))\n    //   .attr(\"fill\", \"none\")\n    //   .attr(\"stroke\", \"black\");\n    //---draw labels---//\n    // svg\n    // .selectAll(\".label\")\n    // .data(data)\n    // .join(\"text\")\n    // .attr(\"class\", \"label\")\n    // .text(node => node.name)\n    // .attr(\"x\", node => xScale(node.x))\n    // .attr(\"y\", node => yScale(node.y + 2))\n    // .attr(\"text-anchor\", \"middle\")\n    // .attr(\"font-size\", fontSize);\n    //---zoom---//\n    // const zoomBehavior = zoom()\n    //   .scaleExtent([0.25, 5]) //can zoom 2x smaller and 5x bigger\n    //   .translateExtent([[-100, 0], [dimensions.width+100, dimensions.height]]) //limits how far graph can pan\n    //   .on(\"zoom\", e => {\n    //     const zoomState = e.transform; //returns zoom transformations as an object\n    //     setCurrentZoomState(zoomState);\n    //   });\n    //\n    // svg.call(zoomBehavior);\n  }, [data, dimensions, currentZoomState, minMax, radius, fontSize]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: wrapperRef,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        children: /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"x-axis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"images\",\n      children: Data ? /*#__PURE__*/_jsxDEV(Image, {\n        urls: Data.imgs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 15\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Graphic, \"MvYRkIay20XfX1snbILlnQ9+Ae4=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = Graphic;\n;\nexport default Graphic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graphic\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js"],"names":["React","useState","useEffect","useRef","select","scaleLinear","axisBottom","hierarchy","tree","linkHorizontal","drag","zoom","useResizeObserver","Image","Data","Graphic","src","minMax","radius","fontSize","data","setData","svgRef","wrapperRef","dimensions","currentZoomState","setCurrentZoomState","svg","current","root","console","log","descendants","links","xScale","domain","range","width","yScale","height","selectAll","join","attr","node","x","y","linker","imgs"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, axisBottom, hierarchy, tree, linkHorizontal, drag, zoom } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport Image from \"./Image\";\nimport Data from \"../data.json\";\n\nfunction Graphic({src, minMax, radius, fontSize}) {\n  const [data, setData] = useState(src);\n  //reference object to pass to svg in React Dom\n  const svgRef = useRef();\n  //svg wrapped in div bc otherwise resize observer callback won't work\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState();\n\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n    if (!dimensions) return;\n    //prevents crashing before min and max are calculated\n    if (!minMax) return;\n\n    const root = hierarchy(data);\n    console.log(root.descendants()); //pass this to find min max. for each: .data\n    console.log(root.links());\n\n    //---scales---//\n    //scaleLinear takes domain (data values) & maps onto range (pixel values)\n    const xScale = scaleLinear()\n      .domain([0, 60]) //0 is minX, 1 is maxX (reference findMinMax)\n      .range([0, dimensions.width]);\n    const yScale = scaleLinear()\n      .domain([0, 60]) //todo\n      .range([0, dimensions.height]);\n    // //inverse scales for drag behavior\n    // const xScaleInverse = scaleLinear()\n    //   .domain([-dimensions.width, dimensions.width])\n    //   .range([-60, 60]);\n    // const yScaleInverse = scaleLinear()\n    //   .domain([-dimensions.height, dimensions.height])\n    //   .range([-60, 60]);\n    //\n    // if (currentZoomState) {\n    //   const newXScale = currentZoomState.rescaleX(xScale); //zoom state comes w methods for transformations\n    //   xScale.domain(newXScale.domain());\n    //   xScaleInverse.range([\n    //     -(newXScale.domain()[1]-newXScale.domain()[0]),\n    //     (newXScale.domain()[1]-newXScale.domain()[0])\n    //   ]);\n    // };\n\n    //---draw x axis---//\n    // const xAxis = axisBottom(xScale);\n    //\n    // svg\n    //   .select(\".x-axis\")\n    //   .style(\"transform\", `translateY(${dimensions.height}px)`)\n    //   .call(xAxis); //replace class \"x-axis\" w xAxis\n\n    //--drag behavior--//\n    // const dragged = drag()\n    //   .on(\"drag\", e => {\n    //     const newData = [...data]; //always make a copy when updating array\n    //     //find array element in newData (id = index) and set new x y coordinates\n    //     //define id as array.length-1\n    //     newData[e.subject.id].x += xScaleInverse(e.dx);\n    //     newData[e.subject.id].y += yScaleInverse(e.dy);\n    //     // console.log(newData[e.subject.id].x + \", \" + newData[e.subject.id].y);\n    //     setData(newData);\n    //   });\n\n\n\n    //---draw points---//\n    svg\n      .selectAll(\".node\")\n      .data(root.descendants())\n      .join(\"circle\") //for every node, draw a circle\n      .attr(\"class\", \".node\")\n      .attr(\"r\", radius)\n      .attr(\"cx\", node => xScale(node.data.x))\n      .attr(\"cy\", node => yScale(node.data.y));\n\n    // svg\n    //   .selectAll(\"circle\")\n    //   .data(data)\n    //   .join(\"circle\")\n    //   .attr(\"r\", radius)\n    //   .attr(\"cx\", d => xScale(d.x))\n    //   .attr(\"cy\", d => yScale(d.y))\n    //   .call(dragged);\n\n    //---draw lines---//\n    const linker = linkHorizontal()\n      .x(node => node.data.x)\n      .y(node => node.data.y);\n\n    svg\n      .selectAll(\".link\")\n      .data(root.links())\n      .join(\"path\")\n      .attr(\"class\", \"link\")\n      .attr(\"d\", linker)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"black\");\n\n    // const myLine = line()\n    //   .x(d => xScale(d.x))\n    //   .y(d => yScale(d.y))\n    //   .curve(curveMonotoneX);\n    //\n    // svg\n    //   .selectAll(\".line\") //if no line class, it selects x axis too\n    //   .data([data]) //just draw 1 line for the whole array\n    //   .join(\"path\")\n    //   .attr(\"class\", \"line\")\n    //   .attr(\"d\", value => myLine(value))\n    //   .attr(\"fill\", \"none\")\n    //   .attr(\"stroke\", \"black\");\n\n    //---draw labels---//\n    // svg\n    // .selectAll(\".label\")\n    // .data(data)\n    // .join(\"text\")\n    // .attr(\"class\", \"label\")\n    // .text(node => node.name)\n    // .attr(\"x\", node => xScale(node.x))\n    // .attr(\"y\", node => yScale(node.y + 2))\n    // .attr(\"text-anchor\", \"middle\")\n    // .attr(\"font-size\", fontSize);\n\n    //---zoom---//\n    // const zoomBehavior = zoom()\n    //   .scaleExtent([0.25, 5]) //can zoom 2x smaller and 5x bigger\n    //   .translateExtent([[-100, 0], [dimensions.width+100, dimensions.height]]) //limits how far graph can pan\n    //   .on(\"zoom\", e => {\n    //     const zoomState = e.transform; //returns zoom transformations as an object\n    //     setCurrentZoomState(zoomState);\n    //   });\n    //\n    // svg.call(zoomBehavior);\n  }, [data, dimensions, currentZoomState, minMax, radius, fontSize]);\n\n  return (\n    <>\n    <div ref={wrapperRef}>\n      <svg ref={svgRef}>\n        <g className=\"x-axis\" />\n      </svg>\n    </div>\n    <div className=\"images\">\n      {Data ? <Image urls={Data.imgs}/> : null}\n    </div>\n    </>\n  );\n};\n\nexport default Graphic;\n"]},"metadata":{},"sourceType":"module"}