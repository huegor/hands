{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./App.css\";\nimport Data from \"./data.json\";\nimport Graphic from \"./components/Graphic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass NewPointForm extends React.Component {\n  //controlled component, meaning React is the \"single source of truth\"\n  constructor(props) {\n    super(props);\n    this.state = {\n      label: '',\n      xValue: '',\n      yValue: '',\n      color: '',\n      endPoint: false,\n      targets: '',\n      lineColor: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    //if it's a checkbox, evaluate if checked. otherwise, evaluate the value\n    const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\n    ;\n    const name = e.target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(e) {\n    const node = {\n      \"id\": Data.nodes.length,\n      //todo\n      \"name\": e.target.label.value,\n      \"x\": parseFloat(e.target.xValue.value),\n      \"y\": parseFloat(e.target.yValue.value),\n      \"target\": !this.state.endPoint ? e.target.targets.value : null\n    };\n    console.log(null == \"\"); // alert(`label: ${}, x: ${}, y: ${}, target: ${!this.state.endPoint ? e.target.targets.value ? e.target.targets.value : 'blank' : null}`);\n\n    e.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"ui\",\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Label\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"red\",\n          children: \"* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"label\",\n          placeholder: \"any unicode characters\",\n          value: this.state.label,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"x Value\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"red\",\n          children: \"* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"xValue\",\n          placeholder: \"numbers only\",\n          value: this.state.xValue,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"y Value\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"red\",\n          children: \"* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"yValue\",\n          placeholder: \"numbers only\",\n          value: this.state.yValue,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Color\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"color\",\n          placeholder: \"css color or hexcode\",\n          value: this.state.color,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"End point?\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"endPoint\",\n          checked: this.state.endPoint,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), !this.state.endPoint && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Target(s)\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"targets\",\n            placeholder: \"ID or leave blank for next point\",\n            value: this.state.targets,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Line Color\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"lineColor\",\n            placeholder: \"css color or hexcode\",\n            value: this.state.lineColor,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n} //iterates thru xy values in json data to find min and max values\n\n\nfunction findMinMax(data) {\n  var [minX, minY] = [Infinity, Infinity]; //assign values for multiple vars\n\n  var [maxX, maxY] = [-Infinity, -Infinity];\n  var tmpX, tmpY;\n\n  for (var i = data.length - 1; i >= 0; i--) {\n    tmpX = data[i].x;\n    tmpY = data[i].y;\n    if (tmpX < minX) minX = tmpX;\n    if (tmpX > maxX) maxX = tmpX;\n    if (tmpY < minY) minY = tmpY;\n    if (tmpY > maxY) maxY = tmpY;\n  }\n\n  return [minX, maxX, minY, maxY];\n}\n/*\n   process raw data in function that extract following arrays:\n   0: of all nodes excluding loose points\n   1: from 1, all links between nodes, {source, target, color}\n\n   Graphic component will be passed these for use in this way:\n   - [1] for drawing linkHorizontal\n   - Data.nodes for drawing cirlces and labels\n*/\n\n\nfunction generateLinks(data) {\n  // const nodes = []; //array of all nodes that are NOT detached\n  const links = []; //array of all node links\n  /// IMPORTANT: all ending nodes must be marked w target:null ///\n\n  data.forEach((item, i) => {\n    if (item.target !== null) {\n      //detached points are defined w target: null as opposed to being undefined\n      // nodes.push(item);\n      if (item.target) {\n        //for nodes w multiple targets, create link for each target\n        item.target.forEach(n => {\n          links.push({\n            source: item,\n            target: data[n],\n            color: item.lineColor\n          });\n        });\n      } else {\n        links.push({\n          source: item,\n          target: data[i + 1],\n          color: item.lineColor\n        });\n      }\n\n      ;\n    }\n  });\n  return links;\n}\n\n;\n\nfunction App() {\n  _s();\n\n  //user defined\n  const radius = 5;\n  const fontSize = 20; //data is initially set to imported json array Data\n\n  var [src, setSrc] = useState(Data); // console.log(generateLinks(src.nodes));\n\n  const data = {\n    nodes: src.nodes,\n    links: generateLinks(src.nodes),\n    imgs: src.imgs\n  }; // console.log(findMinMax(Data.line1));\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Graphic, {\n      src: data,\n      minMax: findMinMax(src.nodes),\n      radius: radius,\n      fontSize: fontSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewPointForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"H30rYC+5qCYZWNTKEH0Drzdz/po=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js"],"names":["React","useState","Data","Graphic","NewPointForm","Component","constructor","props","state","label","xValue","yValue","color","endPoint","targets","lineColor","handleChange","bind","handleSubmit","e","value","target","type","checked","name","setState","node","nodes","length","parseFloat","console","log","preventDefault","render","findMinMax","data","minX","minY","Infinity","maxX","maxY","tmpX","tmpY","i","x","y","generateLinks","links","forEach","item","n","push","source","App","radius","fontSize","src","setSrc","imgs"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;;AAEA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA2C;AACzC;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,MAAM,EAAE,EAFG;AAGXC,MAAAA,MAAM,EAAE,EAHG;AAIXC,MAAAA,KAAK,EAAE,EAJI;AAKXC,MAAAA,QAAQ,EAAE,KALC;AAMXC,MAAAA,OAAO,EAAE,EANE;AAOXC,MAAAA,SAAS,EAAE;AAPA,KAAb;AAUA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDD,EAAAA,YAAY,CAACG,CAAD,EAAI;AACd;AACA,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASC,IAAT,KAAkB,UAAlB,GAA+BH,CAAC,CAACE,MAAF,CAASE,OAAxC,GAAkDJ,CAAC,CAACE,MAAF,CAASD,KAAzE;AAA+E;AAC/E,UAAMI,IAAI,GAAGL,CAAC,CAACE,MAAF,CAASG,IAAtB;AAEA,SAAKC,QAAL,CAAc;AACZ,OAACD,IAAD,GAAQJ;AADI,KAAd;AAGD;;AAEDF,EAAAA,YAAY,CAACC,CAAD,EAAI;AACd,UAAMO,IAAI,GAAG;AACX,YAAMxB,IAAI,CAACyB,KAAL,CAAWC,MADN;AACc;AACzB,cAAQT,CAAC,CAACE,MAAF,CAASZ,KAAT,CAAeW,KAFZ;AAGX,WAAIS,UAAU,CAACV,CAAC,CAACE,MAAF,CAASX,MAAT,CAAgBU,KAAjB,CAHH;AAIX,WAAIS,UAAU,CAACV,CAAC,CAACE,MAAF,CAASV,MAAT,CAAgBS,KAAjB,CAJH;AAKX,gBAAU,CAAC,KAAKZ,KAAL,CAAWK,QAAZ,GAAuBM,CAAC,CAACE,MAAF,CAASP,OAAT,CAAiBM,KAAxC,GAAgD;AAL/C,KAAb;AAOAU,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAQ,EAApB,EARc,CAUd;;AACAZ,IAAAA,CAAC,CAACa,cAAF;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAM,MAAA,SAAS,EAAC,IAAhB;AAAqB,MAAA,QAAQ,EAAE,KAAKf,YAApC;AAAA,8BACE;AAAA,yCACO;AAAM,UAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADP,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,WAAW,EAAC,wBAFd;AAGE,UAAA,KAAK,EAAE,KAAKV,KAAL,CAAWC,KAHpB;AAIE,UAAA,QAAQ,EAAE,KAAKO;AAJjB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAUU;AAAA;AAAA;AAAA;AAAA,cAVV,eAWE;AAAA,2CACS;AAAM,UAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADT,eAEE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,WAAW,EAAC,cAHd;AAIE,UAAA,KAAK,EAAE,KAAKR,KAAL,CAAWE,MAJpB;AAKE,UAAA,QAAQ,EAAE,KAAKM;AALjB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,eAqBU;AAAA;AAAA;AAAA;AAAA,cArBV,eAsBE;AAAA,2CACS;AAAM,UAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADT,eAEE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,WAAW,EAAC,cAHd;AAIE,UAAA,KAAK,EAAE,KAAKR,KAAL,CAAWG,MAJpB;AAKE,UAAA,QAAQ,EAAE,KAAKK;AALjB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBF,eAgCU;AAAA;AAAA;AAAA;AAAA,cAhCV,eAiCE;AAAA,yCAEE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,WAAW,EAAC,sBAHd;AAIE,UAAA,KAAK,EAAE,KAAKR,KAAL,CAAWI,KAJpB;AAKE,UAAA,QAAQ,EAAE,KAAKI;AALjB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAjCF,eA0CU;AAAA;AAAA;AAAA;AAAA,cA1CV,eA2CE;AAAA,8CAEE;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,IAAI,EAAC,UAFP;AAGE,UAAA,OAAO,EAAE,KAAKR,KAAL,CAAWK,QAHtB;AAIE,UAAA,QAAQ,EAAE,KAAKG;AAJjB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cA3CF,eAmDU;AAAA;AAAA;AAAA;AAAA,cAnDV,EAoDG,CAAC,KAAKR,KAAL,CAAWK,QAAZ,iBACC;AAAA,gCACE;AAAA,+CAEE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,IAAI,EAAC,SAFP;AAGE,YAAA,WAAW,EAAC,kCAHd;AAIE,YAAA,KAAK,EAAE,KAAKL,KAAL,CAAWM,OAJpB;AAKE,YAAA,QAAQ,EAAE,KAAKE;AALjB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAUU;AAAA;AAAA;AAAA;AAAA,gBAVV,eAWE;AAAA,gDAEE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,IAAI,EAAC,WAFP;AAGE,YAAA,WAAW,EAAC,sBAHd;AAIE,YAAA,KAAK,EAAE,KAAKR,KAAL,CAAWO,SAJpB;AAKE,YAAA,QAAQ,EAAE,KAAKC;AALjB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF,eAoBU;AAAA;AAAA;AAAA;AAAA,gBApBV;AAAA,sBArDJ,eA4EE;AAAA;AAAA;AAAA;AAAA,cA5EF,eA6EE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cA7EF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAiFD;;AA5HwC,C,CA+H3C;;;AACA,SAASkB,UAAT,CAAoBC,IAApB,EAA0B;AACxB,MAAI,CAACC,IAAD,EAAOC,IAAP,IAAe,CAACC,QAAD,EAAWA,QAAX,CAAnB,CADwB,CACiB;;AACzC,MAAI,CAACC,IAAD,EAAOC,IAAP,IAAe,CAAC,CAACF,QAAF,EAAY,CAACA,QAAb,CAAnB;AACA,MAAIG,IAAJ,EAAUC,IAAV;;AAEA,OAAK,IAAIC,CAAC,GAAGR,IAAI,CAACP,MAAL,GAAY,CAAzB,EAA4Be,CAAC,IAAE,CAA/B,EAAkCA,CAAC,EAAnC,EAAuC;AACrCF,IAAAA,IAAI,GAAGN,IAAI,CAACQ,CAAD,CAAJ,CAAQC,CAAf;AACAF,IAAAA,IAAI,GAAGP,IAAI,CAACQ,CAAD,CAAJ,CAAQE,CAAf;AACA,QAAIJ,IAAI,GAAGL,IAAX,EAAiBA,IAAI,GAAGK,IAAP;AACjB,QAAIA,IAAI,GAAGF,IAAX,EAAiBA,IAAI,GAAGE,IAAP;AACjB,QAAIC,IAAI,GAAGL,IAAX,EAAiBA,IAAI,GAAGK,IAAP;AACjB,QAAIA,IAAI,GAAGF,IAAX,EAAiBA,IAAI,GAAGE,IAAP;AAClB;;AACD,SACE,CAACN,IAAD,EAAOG,IAAP,EAAaF,IAAb,EAAmBG,IAAnB,CADF;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,aAAT,CAAuBX,IAAvB,EAA6B;AAC3B;AACA,QAAMY,KAAK,GAAG,EAAd,CAF2B,CAET;AAElB;;AAEAZ,EAAAA,IAAI,CAACa,OAAL,CAAa,CAACC,IAAD,EAAON,CAAP,KAAa;AACxB,QAAIM,IAAI,CAAC5B,MAAL,KAAgB,IAApB,EAA0B;AAAE;AAC1B;AACA,UAAI4B,IAAI,CAAC5B,MAAT,EAAiB;AAAE;AACjB4B,QAAAA,IAAI,CAAC5B,MAAL,CAAY2B,OAAZ,CAAqBE,CAAD,IAAO;AACzBH,UAAAA,KAAK,CAACI,IAAN,CAAW;AAACC,YAAAA,MAAM,EAACH,IAAR;AAAc5B,YAAAA,MAAM,EAACc,IAAI,CAACe,CAAD,CAAzB;AAA8BtC,YAAAA,KAAK,EAACqC,IAAI,CAAClC;AAAzC,WAAX;AACD,SAFD;AAGD,OAJD,MAIO;AACLgC,QAAAA,KAAK,CAACI,IAAN,CAAW;AAACC,UAAAA,MAAM,EAACH,IAAR;AAAc5B,UAAAA,MAAM,EAACc,IAAI,CAACQ,CAAC,GAAC,CAAH,CAAzB;AAAgC/B,UAAAA,KAAK,EAACqC,IAAI,CAAClC;AAA3C,SAAX;AACD;;AAAA;AACF;AACF,GAXD;AAaA,SAAOgC,KAAP;AACD;;AAAA;;AAED,SAASM,GAAT,GAAe;AAAA;;AAEb;AACA,QAAMC,MAAM,GAAG,CAAf;AACA,QAAMC,QAAQ,GAAG,EAAjB,CAJa,CAMb;;AACA,MAAI,CAACC,GAAD,EAAMC,MAAN,IAAgBxD,QAAQ,CAACC,IAAD,CAA5B,CAPa,CAQb;;AACA,QAAMiC,IAAI,GAAG;AAACR,IAAAA,KAAK,EAAE6B,GAAG,CAAC7B,KAAZ;AAAmBoB,IAAAA,KAAK,EAACD,aAAa,CAACU,GAAG,CAAC7B,KAAL,CAAtC;AAAmD+B,IAAAA,IAAI,EAACF,GAAG,CAACE;AAA5D,GAAb,CATa,CAWb;;AACA,sBACE;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,GAAG,EAAEvB,IAAd;AAAoB,MAAA,MAAM,EAAID,UAAU,CAACsB,GAAG,CAAC7B,KAAL,CAAxC;AAAqD,MAAA,MAAM,EAAE2B,MAA7D;AAAqE,MAAA,QAAQ,EAAEC;AAA/E;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;;GAlBQF,G;;KAAAA,G;AAoBT,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport \"./App.css\";\nimport Data from \"./data.json\";\nimport Graphic from \"./components/Graphic\"\n\nclass NewPointForm extends React.Component {\n  //controlled component, meaning React is the \"single source of truth\"\n  constructor(props) {\n    super(props);\n    this.state = {\n      label: '',\n      xValue: '',\n      yValue: '',\n      color: '',\n      endPoint: false,\n      targets: '',\n      lineColor: ''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    //if it's a checkbox, evaluate if checked. otherwise, evaluate the value\n    const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;;\n    const name = e.target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(e) {\n    const node = {\n      \"id\": Data.nodes.length, //todo\n      \"name\": e.target.label.value,\n      \"x\":parseFloat(e.target.xValue.value),\n      \"y\":parseFloat(e.target.yValue.value),\n      \"target\": !this.state.endPoint ? e.target.targets.value : null\n    }\n    console.log(null == \"\");\n\n    // alert(`label: ${}, x: ${}, y: ${}, target: ${!this.state.endPoint ? e.target.targets.value ? e.target.targets.value : 'blank' : null}`);\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <form className=\"ui\" onSubmit={this.handleSubmit}>\n        <label>\n          Label<span className=\"red\">* </span>\n          <input type=\"text\"\n            name=\"label\"\n            placeholder=\"any unicode characters\"\n            value={this.state.label}\n            onChange={this.handleChange}\n\n          />\n        </label><br/>\n        <label>\n          x Value<span className=\"red\">* </span>\n          <input\n            type=\"text\"\n            name=\"xValue\"\n            placeholder=\"numbers only\"\n            value={this.state.xValue}\n            onChange={this.handleChange}\n\n          />\n        </label><br/>\n        <label>\n          y Value<span className=\"red\">* </span>\n          <input\n            type=\"text\"\n            name=\"yValue\"\n            placeholder=\"numbers only\"\n            value={this.state.yValue}\n            onChange={this.handleChange}\n\n          />\n        </label><br/>\n        <label>\n          Color\n          <input\n            type=\"text\"\n            name=\"color\"\n            placeholder=\"css color or hexcode\"\n            value={this.state.color}\n            onChange={this.handleChange}\n          />\n        </label><br/>\n        <label>\n          End point?\n          <input\n            type=\"checkbox\"\n            name=\"endPoint\"\n            checked={this.state.endPoint}\n            onChange={this.handleChange}\n          />\n        </label><br/>\n        {!this.state.endPoint &&\n          <>\n            <label>\n              Target(s)\n              <input\n                type=\"text\"\n                name=\"targets\"\n                placeholder=\"ID or leave blank for next point\"\n                value={this.state.targets}\n                onChange={this.handleChange}\n              />\n            </label><br/>\n            <label>\n              Line Color\n              <input\n                type=\"text\"\n                name=\"lineColor\"\n                placeholder=\"css color or hexcode\"\n                value={this.state.lineColor}\n                onChange={this.handleChange}\n              />\n            </label><br/>\n          </>\n        }\n        <br/>\n        <input type=\"submit\" value=\"Submit\"/>\n      </form>\n    );\n  }\n}\n\n//iterates thru xy values in json data to find min and max values\nfunction findMinMax(data) {\n  var [minX, minY] = [Infinity, Infinity]; //assign values for multiple vars\n  var [maxX, maxY] = [-Infinity, -Infinity];\n  var tmpX, tmpY;\n\n  for (var i = data.length-1; i>=0; i--) {\n    tmpX = data[i].x;\n    tmpY = data[i].y;\n    if (tmpX < minX) minX = tmpX;\n    if (tmpX > maxX) maxX = tmpX;\n    if (tmpY < minY) minY = tmpY;\n    if (tmpY > maxY) maxY = tmpY;\n  }\n  return(\n    [minX, maxX, minY, maxY]\n  );\n}\n\n/*\n   process raw data in function that extract following arrays:\n   0: of all nodes excluding loose points\n   1: from 1, all links between nodes, {source, target, color}\n\n   Graphic component will be passed these for use in this way:\n   - [1] for drawing linkHorizontal\n   - Data.nodes for drawing cirlces and labels\n*/\nfunction generateLinks(data) {\n  // const nodes = []; //array of all nodes that are NOT detached\n  const links = []; //array of all node links\n\n  /// IMPORTANT: all ending nodes must be marked w target:null ///\n\n  data.forEach((item, i) => {\n    if (item.target !== null) { //detached points are defined w target: null as opposed to being undefined\n      // nodes.push(item);\n      if (item.target) { //for nodes w multiple targets, create link for each target\n        item.target.forEach((n) => {\n          links.push({source:item, target:data[n], color:item.lineColor});\n        });\n      } else {\n        links.push({source:item, target:data[i+1], color:item.lineColor})\n      };\n    }\n  });\n\n  return links;\n};\n\nfunction App() {\n\n  //user defined\n  const radius = 5;\n  const fontSize = 20;\n\n  //data is initially set to imported json array Data\n  var [src, setSrc] = useState(Data);\n  // console.log(generateLinks(src.nodes));\n  const data = {nodes: src.nodes, links:generateLinks(src.nodes), imgs:src.imgs};\n\n  // console.log(findMinMax(Data.line1));\n  return (\n    <>\n      <Graphic src={data} minMax = {findMinMax(src.nodes)} radius={radius} fontSize={fontSize}/>\n      <NewPointForm />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}