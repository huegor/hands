{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/NewPointForm.js\";\nimport React from 'react';\n/*\n   UI for adding new points.\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass NewPointForm extends React.Component {\n  //controlled component, meaning React is the \"single source of truth\"\n  constructor(props) {\n    super(props);\n    this.state = {\n      label: '',\n      xValue: '',\n      yValue: '',\n      color: '',\n      linked: true,\n      endPoint: true,\n      targets: '',\n      lineColor: '',\n      lineColorA: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    //if it's a checkbox, evaluate if checked. otherwise, evaluate the value\n    const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\n    ;\n    const name = e.target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleClose(e) {\n    this.props.setToggle(null);\n    e.preventDefault();\n  }\n\n  handleSubmit(e) {\n    //consider turning into useCallback\n    const nodes = this.props.data;\n    const tempx = parseFloat(e.target.xValue.value); //if y pos specified, convert to float. otherwise, return null\n\n    const tempy = e.target.yValue.value ? parseFloat(e.target.yValue.value) : null; //error handling. btw, isNan(null) === false\n\n    if (isNaN(tempx) && isNaN(tempy)) {\n      alert(\"Make sure Time and y Position are numbers!\");\n    } else if (isNaN(tempx)) {\n      alert(\"Make sure Time is a number!\");\n    } else if (isNaN(tempy)) {\n      alert(\"Make sure y Position is a number!\");\n    } else {\n      //generate node\n      const node = {\n        \"id\": nodes.length,\n        //todo\n        \"name\": e.target.label.value,\n        \"x\": tempx,\n        \"y\": e.target.yValue.value ? tempy : nodes[nodes.length - 1].y,\n        ...(e.target.color.value && {\n          \"color\": e.target.color.value\n        }),\n        ...(!this.state.endPoint ? //if not an endpoint, turn IDs into array\n        {\n          \"target\": e.target.targets.value.split(',').map(Number)\n        } : {\n          \"target\": null\n        }) // ...((!this.state.endPoint && e.target.lineColor.value) && {\"lineColor\": e.target.lineColor.value})\n\n      };\n\n      const newNodes = () => {\n        if (this.state.linked) {\n          //if linked to previous node, set target of previous node to ID of new node\n          const newNodesLinked = nodes.map(n => n.id === nodes.length - 1 ? e.target.lineColor.value ? { ...n,\n            \"target\": nodes.length,\n            \"lineColor\": e.target.lineColor.value\n          } : { ...n,\n            \"target\": nodes.length\n          } : n); //return all of that plus new node\n\n          return [...newNodesLinked, node];\n        } else {\n          //return array with just new node added\n          return [...nodes, node];\n        }\n      }; // const newSrc = Object.assign({}, this.props.src, {nodes: newNodes()});\n\n\n      this.props.setData(newNodes);\n    }\n\n    this.props.setToggle(null);\n    e.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"ui absolute center\",\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"right\",\n        onClick: this.handleClose,\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 72\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Label\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"red\",\n          children: \"* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"label\",\n          placeholder: \"any unicode characters\",\n          value: this.state.label,\n          onChange: this.handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Time\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"red\",\n          children: \"* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"xValue\",\n          placeholder: \"numbers only\",\n          value: this.state.xValue,\n          onChange: this.handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"y Position\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"yValue\",\n          placeholder: \"numbers only\",\n          value: this.state.yValue,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Color\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"color\",\n          placeholder: \"blue, #4DA6FF, etc.\",\n          value: this.state.color,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Linked to previous?\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"linked\",\n          checked: this.state.linked,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), this.state.linked && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Line Color\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"lineColor\",\n            placeholder: \"blue, #4DA6FF, etc.\",\n            value: this.state.lineColor,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"End point?\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"endPoint\",\n          checked: this.state.endPoint,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), !this.state.endPoint && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Target(s)\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"red\",\n            children: \"* \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"targets\",\n            placeholder: \"point IDs ie: 4, 5\",\n            value: this.state.targets,\n            onChange: this.handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Line Color A\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"lineColorA\",\n            placeholder: \"blue, #4DA6FF, etc.\",\n            value: this.state.lineColorA,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n;\nexport default NewPointForm;","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/NewPointForm.js"],"names":["React","NewPointForm","Component","constructor","props","state","label","xValue","yValue","color","linked","endPoint","targets","lineColor","lineColorA","handleChange","bind","handleClose","handleSubmit","e","value","target","type","checked","name","setState","setToggle","preventDefault","nodes","data","tempx","parseFloat","tempy","isNaN","alert","node","length","y","split","map","Number","newNodes","newNodesLinked","n","id","setData","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\n/*\n   UI for adding new points.\n*/\n\nclass NewPointForm extends React.Component {\n  //controlled component, meaning React is the \"single source of truth\"\n  constructor(props) {\n    super(props);\n    this.state = {\n      label: '',\n      xValue: '',\n      yValue: '',\n      color: '',\n      linked: true,\n      endPoint: true,\n      targets: '',\n      lineColor: '',\n      lineColorA: ''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    //if it's a checkbox, evaluate if checked. otherwise, evaluate the value\n    const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;;\n    const name = e.target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleClose(e) {\n    this.props.setToggle(null);\n    e.preventDefault();\n  }\n\n  handleSubmit(e) { //consider turning into useCallback\n    const nodes = this.props.data;\n\n    const tempx = parseFloat(e.target.xValue.value);\n    //if y pos specified, convert to float. otherwise, return null\n    const tempy = e.target.yValue.value ? parseFloat(e.target.yValue.value) : null;\n\n    //error handling. btw, isNan(null) === false\n    if (isNaN(tempx) && isNaN(tempy)) {\n      alert(\"Make sure Time and y Position are numbers!\");\n    } else if (isNaN(tempx)) {\n      alert(\"Make sure Time is a number!\");\n    } else if (isNaN(tempy)) {\n      alert(\"Make sure y Position is a number!\");\n    } else {\n      //generate node\n      const node = {\n        \"id\": nodes.length, //todo\n        \"name\": e.target.label.value,\n        \"x\":tempx,\n        \"y\": e.target.yValue.value ? tempy : nodes[nodes.length-1].y,\n        ...(e.target.color.value && {\"color\": e.target.color.value}),\n        ...(\n            !this.state.endPoint ?\n            //if not an endpoint, turn IDs into array\n            {\"target\": e.target.targets.value.split(',').map(Number)}\n            : {\"target\": null}\n          ),\n        // ...((!this.state.endPoint && e.target.lineColor.value) && {\"lineColor\": e.target.lineColor.value})\n      };\n      const newNodes = () => {\n        if (this.state.linked) {\n          //if linked to previous node, set target of previous node to ID of new node\n          const newNodesLinked = nodes.map(n =>\n            n.id === nodes.length-1 ?\n              e.target.lineColor.value ?\n                {...n, \"target\":nodes.length, \"lineColor\": e.target.lineColor.value}\n              : {...n, \"target\":nodes.length}\n            : n\n          );\n          //return all of that plus new node\n          return([...newNodesLinked, node]);\n        } else {\n          //return array with just new node added\n          return ([...nodes, node]);\n        }\n      };\n      // const newSrc = Object.assign({}, this.props.src, {nodes: newNodes()});\n      this.props.setData(newNodes);\n    }\n    this.props.setToggle(null);\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <form className=\"ui absolute center\" onSubmit={this.handleSubmit}>\n        <button className=\"right\" onClick={this.handleClose}>x</button><br/>\n        <label>\n          Label<span className=\"red\">* </span>\n          <input type=\"text\"\n            name=\"label\"\n            placeholder=\"any unicode characters\"\n            value={this.state.label}\n            onChange={this.handleChange}\n            required\n          />\n        </label><br/>\n        <label>\n          Time<span className=\"red\">* </span>\n          <input\n            type=\"text\"\n            name=\"xValue\"\n            placeholder=\"numbers only\"\n            value={this.state.xValue}\n            onChange={this.handleChange}\n            required\n          />\n        </label><br/>\n        <label>\n          y Position\n          <input\n            type=\"text\"\n            name=\"yValue\"\n            placeholder=\"numbers only\"\n            value={this.state.yValue}\n            onChange={this.handleChange}\n          />\n        </label><br/>\n        <label>\n          Color\n          <input\n            type=\"text\"\n            name=\"color\"\n            placeholder=\"blue, #4DA6FF, etc.\"\n            value={this.state.color}\n            onChange={this.handleChange}\n          />\n        </label><br/>\n        <label>\n          Linked to previous?\n          <input\n            type=\"checkbox\"\n            name=\"linked\"\n            checked={this.state.linked}\n            onChange={this.handleChange}\n          />\n        </label><br/>\n        {this.state.linked &&\n          <>\n            <label>\n              Line Color\n              <input\n                type=\"text\"\n                name=\"lineColor\"\n                placeholder=\"blue, #4DA6FF, etc.\"\n                value={this.state.lineColor}\n                onChange={this.handleChange}\n              />\n            </label><br/>\n          </>\n        }\n        <label>\n          End point?\n          <input\n            type=\"checkbox\"\n            name=\"endPoint\"\n            checked={this.state.endPoint}\n            onChange={this.handleChange}\n          />\n        </label><br/>\n        {!this.state.endPoint &&\n          <>\n            <label>\n              Target(s)<span className=\"red\">* </span>\n              <input\n                type=\"text\"\n                name=\"targets\"\n                placeholder=\"point IDs ie: 4, 5\"\n                value={this.state.targets}\n                onChange={this.handleChange}\n                required\n              />\n            </label><br/>\n            <label>\n              Line Color A\n              <input\n                type=\"text\"\n                name=\"lineColorA\"\n                placeholder=\"blue, #4DA6FF, etc.\"\n                value={this.state.lineColorA}\n                onChange={this.handleChange}\n              />\n            </label><br/>\n          </>\n        }\n        <br/>\n        <input type=\"submit\" value=\"Submit\"/>\n      </form>\n    );\n  }\n};\n\nexport default NewPointForm;\n"]},"metadata":{},"sourceType":"module"}