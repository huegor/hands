{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './stylesheets/index.scss';\nimport Data from \"./data.json\";\nimport Graphic from \"./components/Graphic\";\nimport Image from \"./components/Image\";\nimport NewPointForm from \"./components/NewPointForm\";\nimport NewIntervalForm from \"./components/NewIntervalForm\";\nimport InfoBox from \"./components/InfoBox\";\nimport ExportDataForm from \"./components/ExportDataForm\"; // import ImportDataForm from \"./components/ImportDataForm\";\n\nimport ToolsBar from \"./components/ToolsBar\";\nimport Layers from \"./components/Layers\";\nimport Scrubber from \"./components/Scrubber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Legend() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ui absolute dropdown rightPos\",\n    children: [\"Legend\", /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            backgroundColor: 'black'\n          },\n          children: \"\\u2003\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }, this), \" Hank\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            backgroundColor: 'red'\n          },\n          children: \"\\u2003\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this), \" Peggy\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            backgroundColor: '#4DA6FF'\n          },\n          children: \"\\u2003\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }, this), \" Bobby\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Legend;\n\nfunction Certainty(props) {\n  _s();\n\n  // console.log(props.target);\n  const [input, setInput] = useState(); //todo: make for line also\n\n  const handleSubmit = e => {\n    e.preventDefault(); //set opacity of target\n\n    const newNodes = [...props.data];\n    const node = newNodes.find(n => n.id === props.target.id);\n    node.opacity = parseFloat(input);\n    props.setData(newNodes);\n  };\n\n  const handleClose = e => {\n    props.setToggle(null);\n    e.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"ui absolute center\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"right\",\n      onClick: handleClose,\n      children: \"x\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 65\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Selected: \", props.target ? `${props.target.name} (${props.target.id})` : \"None\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Certainty\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"0 (never) - 1 (certain)\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Certainty, \"+E2veEehVihf73G+Rv7Nq0ryIOw=\");\n\n_c2 = Certainty;\n\nfunction Importance(props) {\n  _s2();\n\n  console.log(props.target);\n  const [input, setInput] = useState(); //todo: make for line also\n\n  const handleSubmit = e => {\n    e.preventDefault(); //set opacity of target\n\n    const newNodes = [...props.data];\n    const node = newNodes.find(n => n.id === props.target.id);\n    node.radius = input + node.radius;\n    props.setData(newNodes);\n  };\n\n  const handleClose = e => {\n    props.setToggle(null);\n    e.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"ui absolute center\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"right\",\n      onClick: handleClose,\n      children: \"x\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 65\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Selected: \", props.target ? `${props.target.name} (${props.target.id})` : \"None\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Importance\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"integer relative to 0 (default)\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Importance, \"+E2veEehVihf73G+Rv7Nq0ryIOw=\");\n\n_c3 = Importance;\n\nfunction App() {\n  _s3();\n\n  //blank ChronoJSON template\n  const nullData = {\n    \"imgs\": [],\n    \"nodes\": [[]],\n    \"intervals\": []\n  }; //user defined\n\n  const radius = 5; //for the entire ChronoJSON\n\n  const [src, setSrc] = useState(Data); //for ChronoJSON history\n\n  const [history, setHistory] = useState([]); //for toggling the active data as used by scrubber\n\n  const [activeData, setActiveData] = useState(0); //for toggling the active layer\n\n  const [activeLayer, setActiveLayer] = useState(); //pertaining to datapoints and lines\n\n  const [data, setData] = useState(src.nodes[activeData]); //pertaining to intervals\n\n  const [intervals, setIntervals] = useState(src.intervals); //pertaining to scales\n\n  const [scales, setScales] = useState(src.scales); //toggles datapoint IDs vs labels\n\n  const [showLabel, setShowLabel] = useState(true); //UI window toggles\n\n  const [toggle, setToggle] = useState(); //UI info boxes for points, lines, etc.\n\n  const [info, setInfo] = useState(); //Inflection info\n\n  const [inflectTarget, setInflectTarget] = useState();\n  /*\n    TODO:\n    - for piecewise timeline, make function that generates different graphics\n  */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ToolsBar, {\n      toggle: toggle,\n      setToggle: setToggle,\n      data: data,\n      showLabel: showLabel,\n      setShowLabel: setShowLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), toggle === \"scrubber\" && /*#__PURE__*/_jsxDEV(Scrubber, {\n      activeData: activeData,\n      setActiveData: setActiveData,\n      src: src,\n      setData: setData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 31\n    }, this), toggle === \"addPoint\" && /*#__PURE__*/_jsxDEV(NewPointForm, {\n      data: data,\n      setData: setData,\n      setToggle: setToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 31\n    }, this), toggle === \"addInterval\" && /*#__PURE__*/_jsxDEV(NewIntervalForm, {\n      intervals: intervals,\n      setIntervals: setIntervals,\n      setToggle: setToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 34\n    }, this), toggle === \"save\" && /*#__PURE__*/_jsxDEV(ExportDataForm, {\n      src: src,\n      data: data,\n      activeData: activeData,\n      setToggle: setToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 27\n    }, this), toggle === \"legend\" && /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 29\n    }, this), toggle === \"layers\" && /*#__PURE__*/_jsxDEV(Layers, {\n      activeLayer: activeLayer,\n      setActiveLayer: setActiveLayer,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 29\n    }, this), toggle === \"certainty\" && /*#__PURE__*/_jsxDEV(Certainty, {\n      target: inflectTarget,\n      setToggle: setToggle,\n      data: data,\n      setData: setData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 32\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      className: \"container fullHeight\",\n      children: [data.length ? /*#__PURE__*/_jsxDEV(Graphic, {\n        data: data,\n        setData: setData,\n        intervals: intervals,\n        setIntervals: setIntervals,\n        radius: radius,\n        info: info,\n        setInfo: setInfo,\n        setInflectTarget: setInflectTarget,\n        showLabel: showLabel,\n        activeLayer: activeLayer,\n        toggle: toggle,\n        scales: scales,\n        setScales: setScales\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexCenter\",\n        children: [\"Upload data or \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setToggle(\"addPoint\"),\n          children: \"Add new point\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 56\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }, this), src.imgs.length > 0 && /*#__PURE__*/_jsxDEV(Image, {\n        urls: src.imgs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), info && /*#__PURE__*/_jsxDEV(InfoBox, {\n      info: info,\n      setInfo: setInfo,\n      data: data,\n      setData: setData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true);\n}\n\n_s3(App, \"UX7yc62I+5yWjZNAkUNxSTqrtrM=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Legend\");\n$RefreshReg$(_c2, \"Certainty\");\n$RefreshReg$(_c3, \"Importance\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js"],"names":["React","useState","Data","Graphic","Image","NewPointForm","NewIntervalForm","InfoBox","ExportDataForm","ToolsBar","Layers","Scrubber","Legend","backgroundColor","Certainty","props","input","setInput","handleSubmit","e","preventDefault","newNodes","data","node","find","n","id","target","opacity","parseFloat","setData","handleClose","setToggle","name","value","Importance","console","log","radius","App","nullData","src","setSrc","history","setHistory","activeData","setActiveData","activeLayer","setActiveLayer","nodes","intervals","setIntervals","scales","setScales","showLabel","setShowLabel","toggle","info","setInfo","inflectTarget","setInflectTarget","length","imgs"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './stylesheets/index.scss';\nimport Data from \"./data.json\";\nimport Graphic from \"./components/Graphic\";\nimport Image from \"./components/Image\";\nimport NewPointForm from \"./components/NewPointForm\";\nimport NewIntervalForm from \"./components/NewIntervalForm\";\nimport InfoBox from \"./components/InfoBox\";\nimport ExportDataForm from \"./components/ExportDataForm\";\n// import ImportDataForm from \"./components/ImportDataForm\";\nimport ToolsBar from \"./components/ToolsBar\";\nimport Layers from \"./components/Layers\";\nimport Scrubber from \"./components/Scrubber\"\n\n\nfunction Legend() {\n  return (\n    <div className=\"ui absolute dropdown rightPos\">\n      Legend\n      <ul>\n        <li><span style={{backgroundColor: 'black'}}>&#8195;</span> Hank</li>\n        <li><span style={{backgroundColor: 'red'}}>&#8195;</span> Peggy</li>\n        <li><span style={{backgroundColor: '#4DA6FF'}}>&#8195;</span> Bobby</li>\n      </ul>\n    </div>\n  )\n}\n\nfunction Certainty(props) {\n  // console.log(props.target);\n\n  const [input, setInput] = useState();\n\n  //todo: make for line also\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    //set opacity of target\n    const newNodes = [...props.data];\n    const node = newNodes.find(n => n.id === props.target.id);\n    node.opacity = parseFloat(input);\n    props.setData(newNodes);\n\n  };\n\n  const handleClose = (e) => {\n    props.setToggle(null);\n    e.preventDefault();\n  }\n\n  return (\n    <form className=\"ui absolute center\" onSubmit={handleSubmit}>\n      <button className=\"right\" onClick={handleClose}>x</button><br/>\n      <p>Selected: {props.target ? `${props.target.name} (${props.target.id})` : \"None\"} </p>\n      <label>\n        Certainty\n        <input type=\"text\"\n          placeholder=\"0 (never) - 1 (certain)\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          required\n        />\n      </label><br/>\n      <input type=\"submit\" value=\"Submit\"/>\n    </form>\n  )\n}\n\nfunction Importance(props) {\n  console.log(props.target);\n\n  const [input, setInput] = useState();\n\n  //todo: make for line also\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    //set opacity of target\n    const newNodes = [...props.data];\n    const node = newNodes.find(n => n.id === props.target.id);\n    node.radius = input+node.radius;\n    props.setData(newNodes);\n\n  };\n\n  const handleClose = (e) => {\n    props.setToggle(null);\n    e.preventDefault();\n  }\n\n  return (\n    <form className=\"ui absolute center\" onSubmit={handleSubmit}>\n      <button className=\"right\" onClick={handleClose}>x</button><br/>\n      <p>Selected: {props.target ? `${props.target.name} (${props.target.id})` : \"None\"} </p>\n      <label>\n        Importance\n        <input type=\"number\"\n          placeholder=\"integer relative to 0 (default)\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          required\n        />\n      </label><br/>\n      <input type=\"submit\" value=\"Submit\"/>\n    </form>\n  )\n}\n\n\nfunction App() {\n  //blank ChronoJSON template\n  const nullData = {\n    \"imgs\": [],\n    \"nodes\":\n    [\n      []\n    ],\n    \"intervals\":\n    []\n  };\n\n  //user defined\n  const radius = 5;\n\n  //for the entire ChronoJSON\n  const [src, setSrc] = useState(Data);\n\n  //for ChronoJSON history\n  const [history, setHistory] = useState([])\n\n  //for toggling the active data as used by scrubber\n  const [activeData, setActiveData] = useState(0);\n  //for toggling the active layer\n  const [activeLayer, setActiveLayer] = useState();\n\n  //pertaining to datapoints and lines\n  const [data, setData] = useState(src.nodes[activeData]);\n  //pertaining to intervals\n  const [intervals, setIntervals] = useState(src.intervals);\n  //pertaining to scales\n  const [scales, setScales] = useState(src.scales);\n  //toggles datapoint IDs vs labels\n  const [showLabel, setShowLabel] = useState(true);\n\n  //UI window toggles\n  const [toggle, setToggle] = useState();\n  //UI info boxes for points, lines, etc.\n  const [info, setInfo] = useState();\n  //Inflection info\n  const [inflectTarget, setInflectTarget] = useState();\n\n  /*\n    TODO:\n    - for piecewise timeline, make function that generates different graphics\n  */\n\n  return (\n    <>\n      <ToolsBar toggle={toggle} setToggle={setToggle} data={data} showLabel={showLabel} setShowLabel={setShowLabel}/>\n      {toggle===\"scrubber\" && <Scrubber activeData={activeData} setActiveData={setActiveData} src={src} setData={setData}/>}\n      {toggle===\"addPoint\" && <NewPointForm data={data} setData={setData} setToggle={setToggle}/>}\n      {toggle===\"addInterval\" && <NewIntervalForm intervals={intervals} setIntervals={setIntervals} setToggle={setToggle}/>}\n      {toggle===\"save\" && <ExportDataForm src={src} data={data} activeData={activeData} setToggle={setToggle}/>}\n      {toggle===\"legend\" && <Legend/>}\n      {toggle===\"layers\" && <Layers activeLayer={activeLayer} setActiveLayer={setActiveLayer} data={data}/>}\n      {toggle===\"certainty\" && <Certainty target={inflectTarget} setToggle={setToggle} data={data} setData={setData}/>}\n      <div id=\"main\" className=\"container fullHeight\">\n        {data.length ?\n          <Graphic\n            data={data}\n            setData={setData}\n            intervals={intervals}\n            setIntervals={setIntervals}\n            radius={radius}\n            info={info}\n            setInfo={setInfo}\n            setInflectTarget={setInflectTarget}\n            showLabel={showLabel}\n            activeLayer={activeLayer}\n            toggle={toggle}\n            scales={scales}\n            setScales={setScales}\n          />\n          : <div className=\"flexCenter\">Upload data or <button onClick={() => setToggle(\"addPoint\")}>Add new point</button></div>\n        }\n        {src.imgs.length>0 && <Image urls={src.imgs}/>}\n      </div>\n      {info && <InfoBox info={info} setInfo={setInfo} data={data} setData={setData}/>}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}