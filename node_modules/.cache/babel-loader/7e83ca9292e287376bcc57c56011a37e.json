{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, axisBottom, line, curveMonotoneX, drag, zoom } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport Image from \"./Image\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Graphic({\n  src,\n  radius,\n  fontSize\n}) {\n  _s();\n\n  const [data, setData] = useState(src.line1); //reference object to pass to svg in React Dom\n\n  const svgRef = useRef(); //svg wrapped in div bc otherwise resize observer callback won't work\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState(); //all d3 shennanigans goes in this hook. called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n\n    if (!dimensions) return; //---scales---//\n    //scaleLinear takes domain (data values) & maps onto range (pixel values)\n\n    const xScale = scaleLinear().domain([0, 60]) //todo max(data.x)\n    .range([0, dimensions.width]);\n\n    if (currentZoomState) {\n      const newXScale = currentZoomState.rescaleX(xScale); //zoom state comes w methods for transformations\n\n      xScale.domain(newXScale.domain());\n    }\n\n    ;\n    const yScale = scaleLinear().domain([0, 60]) //todo\n    .range([0, dimensions.height]); //inverse scales for drag behavior\n\n    const xScaleInverse = scaleLinear().domain([-dimensions.width, dimensions.width]).range([-60, 60]); //todo\n\n    const yScaleInverse = scaleLinear().domain([-dimensions.height, dimensions.height]).range([-60, 60]); //todo\n    //---draw x axis---//\n\n    const xAxis = axisBottom(xScale);\n    svg.select(\".x-axis\").style(\"transform\", `translateY(${dimensions.height}px)`).call(xAxis); //replace class \"x-axis\" w xAxis\n    //--drag behavior--//\n\n    const dragged = drag().on(\"drag\", e => {\n      const newData = [...data]; //always make a copy when updating array\n      //find array element in newData (id = index) and set new x y coordinates\n      //define id as array.length-1\n\n      newData[e.subject.id].x += xScaleInverse(e.dx);\n      newData[e.subject.id].y += yScaleInverse(e.dy); // console.log(newData[e.subject.id].x + \", \" + newData[e.subject.id].y);\n\n      setData(newData);\n    }); //---draw points---//\n\n    svg.selectAll(\"circle\").data(data).join(\"circle\").attr(\"r\", radius).attr(\"cx\", d => xScale(d.x)).attr(\"cy\", d => yScale(d.y)).call(dragged); //---draw lines---//\n\n    const myLine = line().x(d => xScale(d.x)).y(d => yScale(d.y)).curve(curveMonotoneX);\n    svg.selectAll(\".line\") //if no line class, it selects x axis too\n    .data([data]) //just draw 1 line for the whole array\n    .join(\"path\").attr(\"class\", \"line\").attr(\"d\", value => myLine(value)).attr(\"fill\", \"none\").attr(\"stroke\", \"black\"); //---draw labels---//\n\n    svg.selectAll(\".label\").data(data).join(\"text\").attr(\"class\", \"label\").text(node => node.name).attr(\"x\", node => xScale(node.x)).attr(\"y\", node => yScale(node.y + 3)).attr(\"text-anchor\", \"middle\").attr(\"font-size\", fontSize); //---zoom---//\n\n    const zoomBehavior = zoom().scaleExtent([0.5, 5]) //can zoom 2x smaller and 5x bigger\n    .translateExtent([[0, 0], [dimensions.width, dimensions.height]]) //limits display of zoom when clicking and dragging\n    .on(\"zoom\", () => {\n      const zoomState = zoomTransform(svg.node()); //returns zoom transformations as an object\n\n      setCurrentZoomState(zoomState);\n    });\n    svg.call(zoomBehavior);\n  }, [data, dimensions, currentZoomState, radius, fontSize]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: wrapperRef,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        children: /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"x-axis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"images\",\n      children: data ? /*#__PURE__*/_jsxDEV(Image, {\n        urls: src.imgs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Graphic, \"8eiAfiDJdWVF3J7HdAkoD9Bhf38=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = Graphic;\n;\nexport default Graphic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graphic\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js"],"names":["React","useState","useEffect","useRef","select","scaleLinear","axisBottom","line","curveMonotoneX","drag","zoom","useResizeObserver","Image","Graphic","src","radius","fontSize","data","setData","line1","svgRef","wrapperRef","dimensions","currentZoomState","setCurrentZoomState","svg","current","xScale","domain","range","width","newXScale","rescaleX","yScale","height","xScaleInverse","yScaleInverse","xAxis","style","call","dragged","on","e","newData","subject","id","x","dx","y","dy","selectAll","join","attr","d","myLine","curve","value","text","node","name","zoomBehavior","scaleExtent","translateExtent","zoomState","zoomTransform","imgs"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, axisBottom, line, curveMonotoneX, drag, zoom } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport Image from \"./Image\";\n\nfunction Graphic({src, radius, fontSize}) {\n  const [data, setData] = useState(src.line1);\n  //reference object to pass to svg in React Dom\n  const svgRef = useRef();\n  //svg wrapped in div bc otherwise resize observer callback won't work\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState();\n\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n    if (!dimensions) return;\n\n    //---scales---//\n    //scaleLinear takes domain (data values) & maps onto range (pixel values)\n    const xScale = scaleLinear()\n      .domain([0, 60]) //todo max(data.x)\n      .range([0, dimensions.width]);\n\n    if (currentZoomState) {\n      const newXScale = currentZoomState.rescaleX(xScale); //zoom state comes w methods for transformations\n      xScale.domain(newXScale.domain());\n    };\n\n    const yScale = scaleLinear()\n      .domain([0, 60]) //todo\n      .range([0, dimensions.height]);\n    //inverse scales for drag behavior\n    const xScaleInverse = scaleLinear()\n      .domain([-dimensions.width, dimensions.width])\n      .range([-60, 60]);//todo\n    const yScaleInverse = scaleLinear()\n      .domain([-dimensions.height, dimensions.height])\n      .range([-60, 60]);//todo\n\n    //---draw x axis---//\n    const xAxis = axisBottom(xScale);\n\n    svg\n      .select(\".x-axis\")\n      .style(\"transform\", `translateY(${dimensions.height}px)`)\n      .call(xAxis); //replace class \"x-axis\" w xAxis\n\n    //--drag behavior--//\n    const dragged = drag()\n      .on(\"drag\", e => {\n        const newData = [...data]; //always make a copy when updating array\n        //find array element in newData (id = index) and set new x y coordinates\n        //define id as array.length-1\n        newData[e.subject.id].x += xScaleInverse(e.dx);\n        newData[e.subject.id].y += yScaleInverse(e.dy);\n        // console.log(newData[e.subject.id].x + \", \" + newData[e.subject.id].y);\n        setData(newData);\n      });\n\n    //---draw points---//\n    svg\n      .selectAll(\"circle\")\n      .data(data)\n      .join(\"circle\")\n      .attr(\"r\", radius)\n      .attr(\"cx\", d => xScale(d.x))\n      .attr(\"cy\", d => yScale(d.y))\n      .call(dragged);\n\n    //---draw lines---//\n    const myLine = line()\n      .x(d => xScale(d.x))\n      .y(d => yScale(d.y))\n      .curve(curveMonotoneX);\n\n    svg\n      .selectAll(\".line\") //if no line class, it selects x axis too\n      .data([data]) //just draw 1 line for the whole array\n      .join(\"path\")\n      .attr(\"class\", \"line\")\n      .attr(\"d\", value => myLine(value))\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"black\");\n\n    //---draw labels---//\n    svg\n    .selectAll(\".label\")\n    .data(data)\n    .join(\"text\")\n    .attr(\"class\", \"label\")\n    .text(node => node.name)\n    .attr(\"x\", node => xScale(node.x))\n    .attr(\"y\", node => yScale(node.y + 3))\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"font-size\", fontSize);\n\n    //---zoom---//\n    const zoomBehavior = zoom()\n      .scaleExtent([0.5, 5]) //can zoom 2x smaller and 5x bigger\n      .translateExtent([[0, 0], [dimensions.width, dimensions.height]]) //limits display of zoom when clicking and dragging\n      .on(\"zoom\", () => {\n        const zoomState = zoomTransform(svg.node()); //returns zoom transformations as an object\n        setCurrentZoomState(zoomState);\n      });\n\n    svg.call(zoomBehavior);\n  }, [data, dimensions, currentZoomState, radius, fontSize]);\n\n  return (\n    <>\n    <div ref={wrapperRef}>\n      <svg ref={svgRef}>\n        <g className=\"x-axis\" />\n      </svg>\n    </div>\n    <div className=\"images\">\n      {data ? <Image urls={src.imgs}/> : null}\n    </div>\n    </>\n  );\n};\n\nexport default Graphic;\n"]},"metadata":{},"sourceType":"module"}