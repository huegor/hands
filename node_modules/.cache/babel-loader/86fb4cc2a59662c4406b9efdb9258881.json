{"ast":null,"code":"/*\n   generates links between all linked nodes and\n   returns a link object with link properties.\n*/\nfunction generateLinks(data) {\n  /*\n    expand to standalone paths? bezier curve: https://svg-path-visualizer.netlify.app/bezier-curve/\n    - start: can specify point or enter coordinate values directly (run thru xScale)\n    - control: ???\n    - end: same as start\n    output: M startX,startY C controlX1,controlY1 controlX2,controlY2 endX, endY\n  */\n  const links = []; //array of all node links\n\n  data.forEach((item, i) => {\n    if (!item.target) {\n      //if the node does not have a target, skip generating link\n      return;\n    } else {\n      item.target.forEach(n => {\n        data.indexOf(item.target) >= 0 ? links.push({\n          source: item,\n          target: data.find(x => x.id === n),\n          color: item.lineColor ? item.lineColor : item.color ? item.color : null,\n          //if not specified, use point color. otherwise, null\n          width: item.lineWidth,\n          opacity: item.lineOpacity ? item.lineOpacity : item.opacity ? item.opacity : null,\n          dashed: item.lineDashed\n        }) : null;\n      });\n    }\n  });\n  return links;\n}\n\n;\nexport default generateLinks;","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/generateLinks.js"],"names":["generateLinks","data","links","forEach","item","i","target","n","indexOf","push","source","find","x","id","color","lineColor","width","lineWidth","opacity","lineOpacity","dashed","lineDashed"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AAEE,QAAMC,KAAK,GAAG,EAAd,CAV2B,CAUT;;AAElBD,EAAAA,IAAI,CAACE,OAAL,CAAa,CAACC,IAAD,EAAOC,CAAP,KAAa;AACxB,QAAI,CAACD,IAAI,CAACE,MAAV,EAAkB;AAChB;AACA;AACD,KAHD,MAGO;AACLF,MAAAA,IAAI,CAACE,MAAL,CAAYH,OAAZ,CAAqBI,CAAD,IAAO;AACzBN,QAAAA,IAAI,CAACO,OAAL,CAAaJ,IAAI,CAACE,MAAlB,KAA6B,CAA7B,GACAJ,KAAK,CAACO,IAAN,CAAW;AACTC,UAAAA,MAAM,EAACN,IADE;AAETE,UAAAA,MAAM,EAACL,IAAI,CAACU,IAAL,CAAUC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASN,CAAxB,CAFE;AAGTO,UAAAA,KAAK,EAACV,IAAI,CAACW,SAAL,GAAiBX,IAAI,CAACW,SAAtB,GAAkCX,IAAI,CAACU,KAAL,GAAaV,IAAI,CAACU,KAAlB,GAA0B,IAHzD;AAG+D;AACxEE,UAAAA,KAAK,EAACZ,IAAI,CAACa,SAJF;AAKTC,UAAAA,OAAO,EAACd,IAAI,CAACe,WAAL,GAAmBf,IAAI,CAACe,WAAxB,GAAsCf,IAAI,CAACc,OAAL,GAAed,IAAI,CAACc,OAApB,GAA8B,IALnE;AAMTE,UAAAA,MAAM,EAAChB,IAAI,CAACiB;AANH,SAAX,CADA,GASE,IATF;AAUD,OAXD;AAYD;AACF,GAlBD;AAmBA,SAAOnB,KAAP;AACD;;AAAA;AAED,eAAeF,aAAf","sourcesContent":["/*\n   generates links between all linked nodes and\n   returns a link object with link properties.\n*/\n\nfunction generateLinks(data) {\n\n  /*\n    expand to standalone paths? bezier curve: https://svg-path-visualizer.netlify.app/bezier-curve/\n    - start: can specify point or enter coordinate values directly (run thru xScale)\n    - control: ???\n    - end: same as start\n    output: M startX,startY C controlX1,controlY1 controlX2,controlY2 endX, endY\n  */\n\n  const links = []; //array of all node links\n\n  data.forEach((item, i) => {\n    if (!item.target) {\n      //if the node does not have a target, skip generating link\n      return\n    } else {\n      item.target.forEach((n) => {\n        data.indexOf(item.target) >= 0 ?\n        links.push({\n          source:item,\n          target:data.find(x => x.id === n),\n          color:item.lineColor ? item.lineColor : item.color ? item.color : null, //if not specified, use point color. otherwise, null\n          width:item.lineWidth,\n          opacity:item.lineOpacity ? item.lineOpacity : item.opacity ? item.opacity : null,\n          dashed:item.lineDashed\n        })\n        : null;\n      });\n    }\n  });\n  return links;\n};\n\nexport default generateLinks;\n"]},"metadata":{},"sourceType":"module"}