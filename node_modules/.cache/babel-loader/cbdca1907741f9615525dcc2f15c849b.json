{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/NewIntervalForm.js\";\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NewIntervalForm(props) {\n  var _s = $RefreshSig$();\n\n  const handleSubmit = e => {\n    _s();\n\n    e.preventDefault();\n    const [xValue1, setXValue1] = useState(\"\");\n    const [yValue1, setYValue1] = useState(\"\");\n    const [xValue2, setXValue2] = useState(\"\");\n    const [yValue2, setYValue2] = useState(\"\");\n    /*\n      - error handling: check if target[0] and target[1] exists\n      - find instant w/ id of target[0] and:\n        - If target[1] is:\n          - instant, target[1].id\n          - interval, {\"x\": target.x-source.x, \"y\": mouse pointer, \"scale\":\"smalls\"}\n          - zone, {\"x\": 1622, \"y\": 12, \"scale\":\"smalls\"}\n    */\n\n    if (!props.target[0] || !props.target[0]) {\n      console.log(\"error\");\n      return;\n    }\n\n    const newInstants = [...props.data];\n    const instant = newInstants.find(n => n.id === props.target[0].id);\n\n    if (props.target[1].x) {\n      //for interval and zone\n      const target = props.target[1];\n      instant.connections = [{\n        \"x\": target.x,\n        \"y\": target.y,\n        \"scale\": target.scale\n      }, 0];\n    } else {\n      //for instants\n      const instant2 = newInstants.find(n => n.id === props.target[1].id);\n      instant.connections = [instant2.id, 0];\n      instant2.connections = [instant.id, 1];\n    } //\n    // if (props.target.start) { //zone\n    //   const newzones = [...props.zones];\n    //   const zone = newzones.find(n => n.id === props.target.id);\n    //   zone.importance = parseFloat(input);\n    //   props.setZones(newZones);\n    //   return;\n    // }\n    //\n    //\n    // if (props.target.source) { //link\n    //   const instant = newInstants.find(n => n.id === props.target.source.id);\n    //   instant.intervalWidth = instant.intervalWidth ? instant.intervalWidth*(1+input/2) : props.radius/3*(1+input/2); //if intervalWidth defined, multiply. otherwise, use default\n    // } else { //instant\n    //   const instant = newInstants.find(n => n.id === props.target.id);\n    //   instant.radius = instant.radius ? instant.radius*(1+input/2) : props.radius*(1+input/2); //if radius defined, multiply. otherwise, use default radius\n    // }\n\n\n    props.setData(newInstants);\n  };\n\n  _s(handleSubmit, \"VPP8xsov6oLDQZMM/aJafCNiEG4=\");\n\n  const handleClose = e => {\n    props.setToggle(null);\n    e.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"ui absolute center\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"right\",\n      onClick: handleClose,\n      children: \"x\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 65\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Start:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Time\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"redText\",\n          children: \"* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"numbers only\",\n          value: xValue1,\n          onChange: e => setXValue1(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"y Position\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"#s only (default 0)\",\n          value: yValue1,\n          onChange: e => setYValue1(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), \"End:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Time\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"redText\",\n          children: \"* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"numbers only\",\n          value: xValue2,\n          onChange: e => setXValue2(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"y Position\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"#s only (default 0)\",\n          value: yValue2,\n          onChange: e => setYValue2(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_c = NewIntervalForm;\nexport default NewIntervalForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewIntervalForm\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/NewIntervalForm.js"],"names":["React","useState","NewIntervalForm","props","handleSubmit","e","preventDefault","xValue1","setXValue1","yValue1","setYValue1","xValue2","setXValue2","yValue2","setYValue2","target","console","log","newInstants","data","instant","find","n","id","x","connections","y","scale","instant2","setData","handleClose","setToggle","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nfunction NewIntervalForm(props) {\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const [xValue1, setXValue1] = useState(\"\");\n    const [yValue1, setYValue1] = useState(\"\");\n    const [xValue2, setXValue2] = useState(\"\");\n    const [yValue2, setYValue2] = useState(\"\");\n\n    /*\n      - error handling: check if target[0] and target[1] exists\n      - find instant w/ id of target[0] and:\n        - If target[1] is:\n          - instant, target[1].id\n          - interval, {\"x\": target.x-source.x, \"y\": mouse pointer, \"scale\":\"smalls\"}\n          - zone, {\"x\": 1622, \"y\": 12, \"scale\":\"smalls\"}\n    */\n\n    if (!props.target[0] || !props.target[0]) {\n      console.log(\"error\")\n      return;\n    }\n\n    const newInstants = [...props.data];\n    const instant = newInstants.find(n => n.id === props.target[0].id);\n    if (props.target[1].x) { //for interval and zone\n      const target = props.target[1]\n      instant.connections = [{\"x\": target.x, \"y\": target.y, \"scale\": target.scale}, 0]\n    } else { //for instants\n      const instant2 = newInstants.find(n => n.id === props.target[1].id);\n      instant.connections = [instant2.id, 0];\n      instant2.connections = [instant.id, 1];\n    }\n    //\n    // if (props.target.start) { //zone\n    //   const newzones = [...props.zones];\n    //   const zone = newzones.find(n => n.id === props.target.id);\n    //   zone.importance = parseFloat(input);\n    //   props.setZones(newZones);\n    //   return;\n    // }\n    //\n\n    //\n    // if (props.target.source) { //link\n    //   const instant = newInstants.find(n => n.id === props.target.source.id);\n    //   instant.intervalWidth = instant.intervalWidth ? instant.intervalWidth*(1+input/2) : props.radius/3*(1+input/2); //if intervalWidth defined, multiply. otherwise, use default\n    // } else { //instant\n    //   const instant = newInstants.find(n => n.id === props.target.id);\n    //   instant.radius = instant.radius ? instant.radius*(1+input/2) : props.radius*(1+input/2); //if radius defined, multiply. otherwise, use default radius\n    // }\n    props.setData(newInstants);\n\n\n  };\n\n  const handleClose = (e) => {\n    props.setToggle(null);\n    e.preventDefault();\n  }\n\n  return (\n    <form className=\"ui absolute center\" onSubmit={handleSubmit}>\n      <button className=\"right\" onClick={handleClose}>x</button><br/>\n      <p>\n        <b>Start:</b><br/>\n        <label>\n          Time<span className=\"redText\">* </span>\n          <input\n            type=\"number\"\n            placeholder=\"numbers only\"\n            value={xValue1}\n            onChange={(e) => setXValue1(e.target.value)}\n            required\n          />\n        </label><br/>\n        <label>\n          y Position\n          <input\n            type=\"number\"\n            placeholder=\"#s only (default 0)\"\n            value={yValue1}\n            onChange={(e) => setYValue1(e.target.value)}\n          />\n        </label><br/>\n        End:<br/>\n        <label>\n          Time<span className=\"redText\">* </span>\n          <input\n            type=\"number\"\n            placeholder=\"numbers only\"\n            value={xValue2}\n            onChange={(e) => setXValue2(e.target.value)}\n            required\n          />\n        </label><br/>\n        <label>\n          y Position\n          <input\n            type=\"number\"\n            placeholder=\"#s only (default 0)\"\n            value={yValue2}\n            onChange={(e) => setYValue2(e.target.value)}\n          />\n        </label><br/>\n      </p>\n      <input type=\"submit\" value=\"Submit\"/>\n    </form>\n  )\n}\n\nexport default NewIntervalForm;\n"]},"metadata":{},"sourceType":"module"}