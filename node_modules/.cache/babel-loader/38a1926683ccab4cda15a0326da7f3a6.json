{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './stylesheets/index.scss';\nimport Data from \"./data.json\";\nimport Graphic from \"./components/Graphic\";\nimport Image from \"./components/Image\";\nimport NewPointForm from \"./components/NewPointForm\";\nimport generateLinks from \"./components/generateLinks\"; //iterates thru xy values in json data to find min and max values\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction findMinMax(data) {\n  var [minX, minY] = [Infinity, Infinity]; //assign values for multiple vars\n\n  var [maxX, maxY] = [-Infinity, -Infinity];\n  var tmpX, tmpY;\n\n  for (var i = data.length - 1; i >= 0; i--) {\n    tmpX = data[i].x;\n    tmpY = data[i].y;\n    if (tmpX < minX) minX = tmpX;\n    if (tmpX > maxX) maxX = tmpX;\n    if (tmpY < minY) minY = tmpY;\n    if (tmpY > maxY) maxY = tmpY;\n  }\n\n  return [minX, maxX, minY, maxY];\n}\n\nclass ToolsBar extends React.Component {\n  constructor(props) {\n    super(props); // Don't call this.setState() here!\n\n    this.state = {\n      toggleLabel: true\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    switch (e.target.id) {\n      case 'toggleLabel':\n        this.state.toggleLabel ? this.setState({\n          toggleLabel: false\n        }) : this.setState({\n          toggleLabel: true\n        });\n        break;\n\n      default:\n        this.props.setToggle(e.target.id);\n    }\n\n    e.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"ui relative\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"addPoint\",\n            onClick: this.handleClick,\n            children: \"Add Point\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"toggleLabel\",\n            onClick: this.handleClick,\n            children: this.state.toggleLabel ? \"Toggle IDs\" : \"Toggle Labels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"settings\",\n            onClick: this.handleClick,\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"import\",\n            onClick: this.handleClick,\n            children: \"Import\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"save\",\n            onClick: this.handleClick,\n            children: \"Save & Export\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/*\n  - pass object data and mouseclick position to component\n  - component is a div set at mouseclick position and displays object data as text\n*/\n\n\nfunction InfoBox(data) {\n  console.log(data.props); // style={{left: data.position[0] + 'px', top: data.position[1] + 'px'}}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"absolute\",\n    children: \"hi\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_c = InfoBox;\n\nfunction App() {\n  _s();\n\n  //user defined\n  const radius = 5;\n  const fontSize = 20; //for the entire ChronoJSON\n\n  const [src, setSrc] = useState(Data); //pertaining to datapoints only\n\n  const [data, setData] = useState(src.nodes); //UI window toggles\n\n  const [toggle, setToggle] = useState(); //UI info boxes for points, lines, etc.\n\n  const [info, setInfo] = useState();\n  /*\n    TODO:\n    - findMinMax() adjust less frequently. ie: if new data can be panned to, no need to adjust viewport\n    - for piecewise timeline, make function that generates different graphics\n    - create a master array of all snapshots of data (for scrubber)\n  */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ToolsBar, {\n      setToggle: setToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), toggle === \"addPoint\" ? /*#__PURE__*/_jsxDEV(NewPointForm, {\n      data: data,\n      setData: setData,\n      setToggle: setToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 30\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(Graphic, {\n        data: data,\n        setData: setData,\n        minMax: findMinMax(data),\n        radius: radius,\n        fontSize: fontSize,\n        setInfo: setInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"images\",\n        children: src.imgs ? /*#__PURE__*/_jsxDEV(Image, {\n          urls: src.imgs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 23\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), info ? /*#__PURE__*/_jsxDEV(InfoBox, {\n      data: info\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }, this) : null]\n  }, void 0, true);\n}\n\n_s(App, \"NUXSq4UFkyWJWmMkPBe5qtozgtE=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InfoBox\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js"],"names":["React","useState","Data","Graphic","Image","NewPointForm","generateLinks","findMinMax","data","minX","minY","Infinity","maxX","maxY","tmpX","tmpY","i","length","x","y","ToolsBar","Component","constructor","props","state","toggleLabel","handleClick","bind","e","target","id","setState","setToggle","preventDefault","render","InfoBox","console","log","App","radius","fontSize","src","setSrc","setData","nodes","toggle","info","setInfo","imgs"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './stylesheets/index.scss';\nimport Data from \"./data.json\";\nimport Graphic from \"./components/Graphic\";\nimport Image from \"./components/Image\";\nimport NewPointForm from \"./components/NewPointForm\";\nimport generateLinks from \"./components/generateLinks\";\n\n//iterates thru xy values in json data to find min and max values\nfunction findMinMax(data) {\n  var [minX, minY] = [Infinity, Infinity]; //assign values for multiple vars\n  var [maxX, maxY] = [-Infinity, -Infinity];\n  var tmpX, tmpY;\n\n  for (var i = data.length-1; i>=0; i--) {\n    tmpX = data[i].x;\n    tmpY = data[i].y;\n    if (tmpX < minX) minX = tmpX;\n    if (tmpX > maxX) maxX = tmpX;\n    if (tmpY < minY) minY = tmpY;\n    if (tmpY > maxY) maxY = tmpY;\n  }\n  return(\n    [minX, maxX, minY, maxY]\n  );\n}\n\n\nclass ToolsBar extends React.Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = {\n      toggleLabel: true\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    switch (e.target.id) {\n      case 'toggleLabel':\n        this.state.toggleLabel ?\n          this.setState({toggleLabel: false})\n        : this.setState({toggleLabel: true});\n      break\n      default:\n        this.props.setToggle(e.target.id);\n    }\n\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <nav className=\"ui relative\">\n        <ul>\n          <li><button id=\"addPoint\" onClick={this.handleClick}>Add Point</button></li>\n          <li><button id=\"toggleLabel\" onClick={this.handleClick}>{this.state.toggleLabel ? \"Toggle IDs\" : \"Toggle Labels\"}</button></li>\n          <li><button id=\"settings\" onClick={this.handleClick}>Settings</button></li>\n          <li><button id=\"import\" onClick={this.handleClick}>Import</button></li>\n          <li><button id=\"save\" onClick={this.handleClick}>Save & Export</button></li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\n\n/*\n  - pass object data and mouseclick position to component\n  - component is a div set at mouseclick position and displays object data as text\n*/\nfunction InfoBox(data) {\n  console.log(data.props);\n  // style={{left: data.position[0] + 'px', top: data.position[1] + 'px'}}\n  return (\n    <div className=\"absolute\" >\n      hi\n    </div>\n  );\n}\n\n\nfunction App() {\n\n  //user defined\n  const radius = 5;\n  const fontSize = 20;\n\n  //for the entire ChronoJSON\n  const [src, setSrc] = useState(Data);\n  //pertaining to datapoints only\n  const [data, setData] = useState(src.nodes);\n  //UI window toggles\n  const [toggle, setToggle] = useState();\n  //UI info boxes for points, lines, etc.\n  const [info, setInfo] = useState();\n\n  /*\n    TODO:\n    - findMinMax() adjust less frequently. ie: if new data can be panned to, no need to adjust viewport\n    - for piecewise timeline, make function that generates different graphics\n    - create a master array of all snapshots of data (for scrubber)\n  */\n\n  return (\n    <>\n      <ToolsBar setToggle={setToggle}/>\n      {toggle===\"addPoint\" ? <NewPointForm data={data} setData={setData} setToggle={setToggle}/> : null}\n      <div id=\"main\">\n        <Graphic\n          data={data}\n          setData={setData}\n          minMax={findMinMax(data)}\n          radius={radius}\n          fontSize={fontSize}\n          setInfo={setInfo}/>\n        <div className=\"images\">\n          {src.imgs ? <Image urls={src.imgs}/> : null}\n        </div>\n      </div>\n      {info ? <InfoBox data={info}/> : null}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}