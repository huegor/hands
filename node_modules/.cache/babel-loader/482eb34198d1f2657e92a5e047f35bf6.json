{"ast":null,"code":"/*\n   generates links between all linked nodes and\n   returns a link object with link properties.\n*/\nfunction generateLinks(data) {\n  console.log(data); // const links = []; //array of all node links\n  //\n  // /// IMPORTANT: all ending nodes must be marked w target:null ///\n  //\n  // data.forEach((src, i) => {\n  //   if (src.length) {\n  //     src.forEach((item, i) => {\n  //       if (item.target) { //check if detached\n  //         if (typeof(item.target) !== \"number\") { //for nodes w multiple targets, create link for each target\n  //           item.target.forEach((n) => {\n  //             links.push({source:item, target:data.find(x => x.id === n), color:item.lineColor ? item.lineColor : item.color ? item.color : null, width:item.lineWidth});\n  //           });\n  //         } else {\n  //           //if lineColor not defined, line takes the color of the previous point\n  //           links.push({source:item, target:data.find(n => n.id === item.target), color:item.lineColor ? item.lineColor : item.color ? item.color : null, width:item.lineWidth})\n  //         };\n  //       }\n  //     })\n  //   }\n  // });\n  // return links;\n}\n\n;\nexport default generateLinks;","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/generateLinks.js"],"names":["generateLinks","data","console","log"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAD2B,CAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAAA;AAED,eAAeD,aAAf","sourcesContent":["/*\n   generates links between all linked nodes and\n   returns a link object with link properties.\n*/\n\nfunction generateLinks(data) {\n  console.log(data);\n  // const links = []; //array of all node links\n  //\n  // /// IMPORTANT: all ending nodes must be marked w target:null ///\n  //\n  // data.forEach((src, i) => {\n  //   if (src.length) {\n  //     src.forEach((item, i) => {\n  //       if (item.target) { //check if detached\n  //         if (typeof(item.target) !== \"number\") { //for nodes w multiple targets, create link for each target\n  //           item.target.forEach((n) => {\n  //             links.push({source:item, target:data.find(x => x.id === n), color:item.lineColor ? item.lineColor : item.color ? item.color : null, width:item.lineWidth});\n  //           });\n  //         } else {\n  //           //if lineColor not defined, line takes the color of the previous point\n  //           links.push({source:item, target:data.find(n => n.id === item.target), color:item.lineColor ? item.lineColor : item.color ? item.color : null, width:item.lineWidth})\n  //         };\n  //       }\n  //     })\n  //   }\n  // });\n  // return links;\n};\n\nexport default generateLinks;\n"]},"metadata":{},"sourceType":"module"}