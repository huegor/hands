{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, scaleOrdinal, axisBottom, linkHorizontal, format, drag, zoom, min, max, symbol, symbols } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport generateLinks from \"./generateLinks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Graphic({\n  data,\n  setData,\n  activeLayer,\n  intervals,\n  setIntervals,\n  radius,\n  info,\n  setInfo,\n  showLabel,\n  toggle,\n  scales,\n  setScales\n}) {\n  _s();\n\n  //all data is passed down from and synced to App.js\n  const activeData = activeLayer ? data.filter(d => d.layer === activeLayer) : data; //is logical operators active?\n\n  const logic = isNaN(data[0].x); //Todo\n  //initialize reference object to pass to svg in React Dom\n\n  const svgRef = useRef(); //svg wrapped in div bc otherwise resize observer callback won't work\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState(); //initialize links between nodes\n\n  const links = generateLinks(activeData); //initialize bottom axis label\n\n  const [axisLabel, setAxisLabel] = useState(\"Years (AD)\"); //all d3 shennanigans goes in this hook. called initially and on every data change\n\n  useEffect(() => {\n    function generateScales(currentScale) {\n      const x = scaleLinear().domain([currentScale.min, currentScale.max]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n      .range([0, dimensions.width]);\n      const y = scaleLinear() //if difference in y vaules greater than 5, resize to min and max\n      .domain(rangeY > breakpoint ? [yMin, yMax] : [yMin - breakpoint, yMax + breakpoint]).range([0, dimensions.height]);\n      const xInverse = scaleLinear().domain([-dimensions.width, dimensions.width]).range([-(currentScale.max - currentScale.min), currentScale.max - currentScale.min]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n\n      const yInverse = scaleLinear().domain([-dimensions.height, dimensions.height]).range(rangeY > breakpoint ? [-rangeY, rangeY] : [-breakpoint * 5, breakpoint * 5]);\n      return {\n        x,\n        y,\n        xInverse,\n        yInverse\n      };\n    }\n\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n\n    if (!dimensions) return;\n    if (!generateScales()) return; //---scales---//\n    //if time matches logical operator keyword, translate into index values, then map\n\n    const logicScale = scaleOrdinal([\"before\", \"now\", \"after\"], [-1, 0, 1]).unknown(0);\n    const breakpoint = 5;\n    const xMin = min(data.map(({\n      x\n    }) => logic ? logicScale(x) : x));\n    const xMax = max(data.map(({\n      x\n    }) => logic ? logicScale(x) : x));\n    const yMin = min(data.map(({\n      y\n    }) => y));\n    const yMax = max(data.map(({\n      y\n    }) => y));\n    const rangeX = xMax - xMin; //0 is minX, 1 is maxX (reference findMinMax)\n\n    const rangeY = yMax - yMin; //TODO: scaleTime()\n    //for multiple scales, generate a new xScale for each x/y min - x/y max\n\n    /*\n    - Allow users to specify scale. x&y min max and units\n    - for each scale, generateScale()\n    */\n    //scales values to screen pixels\n\n    const xScale = scaleLinear().domain([xMin, xMax]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n    .range([0, dimensions.width]);\n    const yScale = scaleLinear() //if difference in y vaules greater than 5, resize to min and max\n    .domain(rangeY > breakpoint ? [yMin, yMax] : [yMin - breakpoint, yMax + breakpoint]).range([0, dimensions.height]); //inverse scales for drag behavior\n\n    const xScaleInverse = scaleLinear().domain([-dimensions.width, dimensions.width]).range([-rangeX, rangeX]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n\n    const yScaleInverse = scaleLinear().domain([-dimensions.height, dimensions.height]).range(rangeY > breakpoint ? [-rangeY, rangeY] : [-breakpoint * 5, breakpoint * 5]); //todo\n\n    if (currentZoomState) {\n      const newXScale = currentZoomState.rescaleX(generateScales(scales.smalls).x); //zoom state comes w methods for transformations\n\n      generateScales(scales.smalls).x.domain(newXScale.domain());\n      generateScales(scales.smalls).xInverse.range([-(newXScale.domain()[1] - newXScale.domain()[0]), newXScale.domain()[1] - newXScale.domain()[0]]);\n    }\n\n    ; //---draw intervals---//\n\n    if (intervals.length) {\n      svg.selectAll(\".intervals\").data(intervals).join(\"rect\").attr(\"class\", \"intervals\").attr(\"x\", n => generateScales(scales[n.scale]).x(n.start)) // .attr(\"y\", n => n.yStart ? yScale(n.yStart) : yScale(minMax[2]))\n      .attr(\"y\", n => n.yStart ? yScale(n.yStart) : 0) //todo\n      .attr(\"width\", n => generateScales(scales[n.scale]).x(n.end) - generateScales(scales[n.scale]).x(n.start)).attr(\"height\", n => {\n        if (n.yStart & n.yEnd) {\n          return yScale(n.yEnd) - yScale(n.yStart);\n        } else if (n.yStart) {\n          return yScale(yMax + 10) - yScale(n.yStart);\n        } else {\n          return yScale(yMax + 10); //todo\n          // return (yScale(minMax[3])-yScale(minMax[2]))\n        }\n      }).attr(\"opacity\", d => d.opacity ? d.opacity : 0.5).attr(\"fill\", d => d.color ? d.color : \"#999\").on(\"click\", (e, target) => {\n        //displays line properties when clicked\n        setInfo({\n          position: [e.x, e.y],\n          target: target,\n          type: \"interval\"\n        }); //todo: set info to null when clicking again\n\n        e.stopPropagation();\n      });\n    } //---draw bottom axis---//\n\n\n    const xAxis = Object.keys(scales).map(scale => {\n      axisBottom(generateScales(scale).x).tickValues(logic ? [-1, 0, 1] : null).tickFormat(logic ? x => scaleOrdinal([-1, 0, 1], [\"before\", \"now\", \"after\"])(x) : format(''));\n    }); // const xAxis = axisBottom(generateScales(scales.smalls).x)\n    //   // .tickSize(-dimensions.height) //tick extends to entire height of svg\n    //   .tickValues(logic ? [-1, 0, 1] : null)\n    //   .tickFormat(logic ? x => scaleOrdinal([-1, 0, 1], [\"before\", \"now\", \"after\"])(x) : format('')); //gets rid of , for 1000s groupings\n\n    svg.select(\".x-axis\") //selects and replaces .x-axis\n    .style(\"transform\", `translateY(${dimensions.height}px)`).call(xAxis).raise().call(g => g.select(\".domain\") //removes solid black axis bar\n    .remove()).call(g => g.selectAll(\".tick line\") //styles individual ticks\n    .attr(\"stroke-opacity\", 0.5)) // .attr(\"stroke-dasharray\", \"2,2\"))\n    .call(g => g.selectAll(\".tick text\").attr(\"y\", 10) //todo?\n    .attr(\"opacity\", 0.5)); // .attr(\"font-size\", fontSize*.8)); //replace class \"x-axis\" w xAxis\n    //\n    // //TODO: enter & exit\n    // svg\n    //   // .selectAll(\".axislabel\")\n    //   // .data([1])\n    //   // .join(\"text\")\n    //   .enter().append(\"text\")\n    //   .text(axisLabel)\n    //   .attr(\"class\", \"axisLabel smallTxt\")\n    //   .attr(\"x\", dimensions.width/2)\n    //   .attr(\"y\", dimensions.height*1.08)\n    //   .attr(\"text-anchor\", \"middle\")\n    //   .attr(\"opacity\", 0.5)\n    //   .exit().remove();\n    //--drag behavior--//\n\n    const dragged = drag() // .on(\"start\", e => {\n    //   select(this).attr(\"stroke\", \"black\");\n    // })\n    .on(\"drag\", e => {\n      //todo\n      const dx = Math.round(generateScales(scales.smalls).xInverse(e.dx) * 100) / 100;\n      const dy = Math.round(yScaleInverse(e.dy) * 100) / 100;\n      const newNodes = [...data]; //always make a copy when updating array\n      //find array element in data with matching ID and set new x y coordinates\n\n      newNodes.find(n => n.id === e.subject.id).x += dx;\n      newNodes.find(n => n.id === e.subject.id).y += dy;\n      setData(newNodes);\n    }); //---draw links---//\n\n    const linker = linkHorizontal().source(link => link.source).target(link => link.target).x(n => generateScales(scales[n.scale]).x(logic ? logicScale(n.x) : n.x)).y(n => yScale(n.y));\n    svg.selectAll(\".link\").data(links).join(\"path\").raise().attr(\"class\", \"link pointer\").attr(\"d\", linker).attr(\"fill\", \"none\").attr(\"stroke\", n => n.color ? n.color : \"black\").attr(\"stroke-width\", n => n.width ? n.width : radius / 3).attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1).attr(\"stroke-dasharray\", n => n.dashed ? n.dashed : null).on(\"click\", (e, target) => {\n      setInfo({\n        position: [e.x, e.y],\n        target: target,\n        type: \"link\"\n      }); //displays line properties when clicked\n\n      e.stopPropagation();\n    }); //---draw points---//\n\n    svg.selectAll(\".node\").data(activeData.filter(d => d.inflectionSemantic !== \"cancelled\")).join(\"circle\").raise().attr(\"class\", \"node pointer\").attr(\"r\", n => n.radius ? n.radius : radius) //todo for accessibility\n    .attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n    .attr(\"opacity\", d => d.opacity ? d.opacity : 1).attr(\"cx\", d => generateScales(scales[d.scale]).x(logic ? logicScale(d.x) : d.x)).attr(\"cy\", d => yScale(d.y)).call(dragged).on(\"click\", (e, target) => {\n      if (toggle === \"cancelled\") {\n        const newNodes = [...data];\n        const node = newNodes.find(n => n.id === target.id);\n        node.inflectionSemantic = \"cancelled\";\n        setData(newNodes);\n      } else {\n        setInfo({\n          position: [e.x, e.y],\n          target: target\n        }); //displays node properties when clicked\n      }\n\n      e.stopPropagation(); //stops deselect when bg is clicked\n    }); //---initialize custom symbols---//\n\n    const cancelledSymbol = {\n      draw: (context, size) => {\n        let s = Math.sqrt(size) / 2;\n        context.moveTo(s, 0);\n        context.lineTo(s * 2, s);\n        context.lineTo(s, s * 2);\n        context.lineTo(0, s);\n        context.lineTo(-s, s * 2);\n        context.lineTo(-s * 2, s);\n        context.lineTo(-s, 0);\n        context.lineTo(-s * 2, -s);\n        context.lineTo(-s, -s * 2);\n        context.lineTo(0, -s);\n        context.lineTo(s, -s * 2);\n        context.lineTo(s * 2, -s);\n        context.closePath();\n      }\n    }; //---draw symbols---//\n\n    svg.selectAll(\".cancelled\").data(activeData.filter(d => d.inflectionSemantic === \"cancelled\")).join(\"path\").raise().attr(\"class\", \"cancelled pointer\").attr(\"d\", symbol(cancelledSymbol, radius * radius * 5)).attr(\"transform\", n => `translate(${generateScales(scales[n.scale]).x(n.x)}, ${yScale(n.y)})`).on(\"click\", (e, target) => {\n      if (toggle === \"cancelled\") {\n        const newNodes = [...data];\n        const node = newNodes.find(n => n.id === target.id);\n        delete node.inflectionSemantic;\n        setData(newNodes);\n      } else {\n        setInfo({\n          position: [e.x, e.y],\n          target: target\n        }); //displays node properties when clicked\n      }\n\n      e.stopPropagation();\n    }); // .attr(\"transform\", \"rotate(90)\");\n    //---draw labels---//\n\n    svg.selectAll(\".label\").data(activeData).join(\"text\").raise().attr(\"class\", \"label\").text(node => showLabel ? node.name : node.id).attr(\"x\", node => generateScales(scales[node.scale]).x(logic ? logicScale(node.x) : node.x)).attr(\"y\", node => yScale(node.y + (rangeY > breakpoint ? rangeY * .06 : breakpoint / 5))) //vertical offset. see scales\n    .attr(\"text-anchor\", \"middle\"); // .attr(\"font-size\", fontSize);\n    //---zoom---//\n\n    const zoomBehavior = zoom().scaleExtent([0.25, 5]) //can zoom 2x smaller and 5x bigger\n    .translateExtent([[-100, 0], [dimensions.width + 100, dimensions.height]]) //limits how far graph can pan\n    .on(\"zoom\", e => {\n      const zoomState = e.transform; //returns zoom transformations as an object\n\n      setCurrentZoomState(zoomState);\n    });\n    svg.on(\"click\", () => setInfo(null));\n    svg.call(zoomBehavior);\n  }, [data, setData, intervals, scales, activeLayer, activeData, dimensions, links, logic, currentZoomState, setInfo, radius, showLabel]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    className: \"svgWrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: \"graphic\",\n      ref: svgRef,\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"cancelled\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"x-axis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 319,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Graphic, \"uoSQK9BPMmsdVoeMdL/E+s194Mk=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = Graphic;\n;\nexport default Graphic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graphic\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js"],"names":["React","useState","useEffect","useRef","select","scaleLinear","scaleOrdinal","axisBottom","linkHorizontal","format","drag","zoom","min","max","symbol","symbols","useResizeObserver","generateLinks","Graphic","data","setData","activeLayer","intervals","setIntervals","radius","info","setInfo","showLabel","toggle","scales","setScales","activeData","filter","d","layer","logic","isNaN","x","svgRef","wrapperRef","dimensions","currentZoomState","setCurrentZoomState","links","axisLabel","setAxisLabel","generateScales","currentScale","domain","range","width","y","rangeY","breakpoint","yMin","yMax","height","xInverse","yInverse","svg","current","logicScale","unknown","xMin","map","xMax","rangeX","xScale","yScale","xScaleInverse","yScaleInverse","newXScale","rescaleX","smalls","length","selectAll","join","attr","n","scale","start","yStart","end","yEnd","opacity","color","on","e","target","position","type","stopPropagation","xAxis","Object","keys","tickValues","tickFormat","style","call","raise","g","remove","dragged","dx","Math","round","dy","newNodes","find","id","subject","linker","source","link","dashed","inflectionSemantic","node","cancelledSymbol","draw","context","size","s","sqrt","moveTo","lineTo","closePath","text","name","zoomBehavior","scaleExtent","translateExtent","zoomState","transform"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, scaleOrdinal, axisBottom, linkHorizontal, format, drag, zoom, min, max, symbol, symbols } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport generateLinks from \"./generateLinks\";\n\nfunction Graphic({data, setData, activeLayer, intervals, setIntervals, radius, info, setInfo, showLabel, toggle, scales, setScales}) {\n\n  //all data is passed down from and synced to App.js\n  const activeData = activeLayer ? data.filter(d => d.layer === activeLayer) : data;\n\n  //is logical operators active?\n  const logic = isNaN(data[0].x); //Todo\n\n  //initialize reference object to pass to svg in React Dom\n  const svgRef = useRef();\n  //svg wrapped in div bc otherwise resize observer callback won't work\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState();\n\n  //initialize links between nodes\n  const links = generateLinks(activeData);\n\n  //initialize bottom axis label\n  const [axisLabel, setAxisLabel] = useState(\"Years (AD)\");\n\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n  useEffect(() => {\n\n    function generateScales(currentScale) {\n\n      const x = scaleLinear()\n        .domain([currentScale.min, currentScale.max]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n        .range([0, dimensions.width])\n      const y = scaleLinear()\n        //if difference in y vaules greater than 5, resize to min and max\n        .domain((rangeY>breakpoint) ? [yMin, yMax] : [yMin-breakpoint, yMax+breakpoint])\n        .range([0, dimensions.height])\n      const xInverse = scaleLinear()\n        .domain([-dimensions.width, dimensions.width])\n        .range([-(currentScale.max-currentScale.min), (currentScale.max-currentScale.min)]) //maxRangeX-minRangeX gives section of x values displayed onscreen\n      const yInverse = scaleLinear()\n        .domain([-dimensions.height, dimensions.height])\n        .range((rangeY>breakpoint) ? [-rangeY, rangeY] : [-breakpoint*5, breakpoint*5])\n\n\n      return {\n        x, y, xInverse, yInverse\n      };\n    }\n\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n    if (!dimensions) return;\n    if (!generateScales()) return;\n    //---scales---//\n\n    //if time matches logical operator keyword, translate into index values, then map\n    const logicScale = scaleOrdinal([\"before\", \"now\", \"after\"], [-1, 0, 1]).unknown(0);\n\n    const breakpoint = 5;\n\n\n    const xMin = min(data.map(({x}) => logic ? logicScale(x) : x));\n    const xMax = max(data.map(({x}) => logic ? logicScale(x) : x));\n    const yMin = min(data.map(({y}) => y));\n    const yMax = max(data.map(({y}) => y));\n    const rangeX = xMax-xMin; //0 is minX, 1 is maxX (reference findMinMax)\n    const rangeY = yMax-yMin;\n\n\n    //TODO: scaleTime()\n\n    //for multiple scales, generate a new xScale for each x/y min - x/y max\n    /*\n    - Allow users to specify scale. x&y min max and units\n    - for each scale, generateScale()\n    */\n\n\n\n    //scales values to screen pixels\n\n    const xScale = scaleLinear()\n      .domain([xMin, xMax]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n      .range([0, dimensions.width]);\n    const yScale = scaleLinear()\n      //if difference in y vaules greater than 5, resize to min and max\n      .domain((rangeY>breakpoint) ? [yMin, yMax] : [yMin-breakpoint, yMax+breakpoint])\n      .range([0, dimensions.height]);\n    //inverse scales for drag behavior\n    const xScaleInverse = scaleLinear()\n      .domain([-dimensions.width, dimensions.width])\n      .range([-rangeX, rangeX]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n    const yScaleInverse = scaleLinear()\n      .domain([-dimensions.height, dimensions.height])\n      .range((rangeY>breakpoint) ? [-rangeY, rangeY] : [-breakpoint*5, breakpoint*5]);\n\n    //todo\n    if (currentZoomState) {\n      const newXScale = currentZoomState.rescaleX(generateScales(scales.smalls).x); //zoom state comes w methods for transformations\n      generateScales(scales.smalls).x.domain(newXScale.domain());\n      generateScales(scales.smalls).xInverse.range([\n        -(newXScale.domain()[1]-newXScale.domain()[0]),\n        (newXScale.domain()[1]-newXScale.domain()[0])\n      ]);\n    };\n\n\n    //---draw intervals---//\n    if (intervals.length) {\n      svg\n      .selectAll(\".intervals\")\n      .data(intervals)\n      .join(\"rect\")\n      .attr(\"class\", \"intervals\")\n      .attr(\"x\", n => generateScales(scales[n.scale]).x(n.start))\n      // .attr(\"y\", n => n.yStart ? yScale(n.yStart) : yScale(minMax[2]))\n      .attr(\"y\", n => n.yStart ? yScale(n.yStart) : 0) //todo\n      .attr(\"width\", n => generateScales(scales[n.scale]).x(n.end)-generateScales(scales[n.scale]).x(n.start))\n      .attr(\"height\", n => {\n        if (n.yStart & n.yEnd) {\n          return (yScale(n.yEnd)-yScale(n.yStart))\n        } else if (n.yStart) {\n          return (yScale(yMax+10)-yScale(n.yStart))\n        } else {\n          return (yScale(yMax+10)) //todo\n          // return (yScale(minMax[3])-yScale(minMax[2]))\n        }})\n      .attr(\"opacity\", d => d.opacity ? d.opacity : 0.5)\n      .attr(\"fill\", d => d.color ? d.color : \"#999\")\n      .on(\"click\", (e, target) => {\n        //displays line properties when clicked\n        setInfo({position: [e.x, e.y], target: target, type: \"interval\"});  //todo: set info to null when clicking again\n        e.stopPropagation();\n      });\n    }\n\n    //---draw bottom axis---//\n\n    const xAxis = Object.keys(scales).map(scale => {\n        axisBottom(generateScales(scale).x)\n        .tickValues(logic ? [-1, 0, 1] : null)\n        .tickFormat(logic ? x => scaleOrdinal([-1, 0, 1], [\"before\", \"now\", \"after\"])(x) : format(''))\n      });\n\n    // const xAxis = axisBottom(generateScales(scales.smalls).x)\n    //   // .tickSize(-dimensions.height) //tick extends to entire height of svg\n    //   .tickValues(logic ? [-1, 0, 1] : null)\n    //   .tickFormat(logic ? x => scaleOrdinal([-1, 0, 1], [\"before\", \"now\", \"after\"])(x) : format('')); //gets rid of , for 1000s groupings\n\n    svg\n      .select(\".x-axis\") //selects and replaces .x-axis\n      .style(\"transform\", `translateY(${dimensions.height}px)`)\n      .call(xAxis)\n      .raise()\n      .call(g => g.select(\".domain\") //removes solid black axis bar\n        .remove())\n      .call(g => g.selectAll(\".tick line\") //styles individual ticks\n        .attr(\"stroke-opacity\", 0.5))\n        // .attr(\"stroke-dasharray\", \"2,2\"))\n      .call(g => g.selectAll(\".tick text\")\n        .attr(\"y\", 10) //todo?\n        .attr(\"opacity\", 0.5));\n        // .attr(\"font-size\", fontSize*.8)); //replace class \"x-axis\" w xAxis\n    //\n    // //TODO: enter & exit\n    // svg\n    //   // .selectAll(\".axislabel\")\n    //   // .data([1])\n    //   // .join(\"text\")\n    //   .enter().append(\"text\")\n    //   .text(axisLabel)\n    //   .attr(\"class\", \"axisLabel smallTxt\")\n    //   .attr(\"x\", dimensions.width/2)\n    //   .attr(\"y\", dimensions.height*1.08)\n    //   .attr(\"text-anchor\", \"middle\")\n    //   .attr(\"opacity\", 0.5)\n    //   .exit().remove();\n\n    //--drag behavior--//\n    const dragged = drag()\n      // .on(\"start\", e => {\n      //   select(this).attr(\"stroke\", \"black\");\n      // })\n      .on(\"drag\", e => {\n        //todo\n        const dx = Math.round(generateScales(scales.smalls).xInverse(e.dx)*100)/100;\n        const dy = Math.round(yScaleInverse(e.dy)*100)/100;\n        const newNodes = [...data]; //always make a copy when updating array\n        //find array element in data with matching ID and set new x y coordinates\n        newNodes.find(n => n.id === e.subject.id).x += dx;\n        newNodes.find(n => n.id === e.subject.id).y += dy;\n        setData(newNodes);\n      });\n\n    //---draw links---//\n    const linker = linkHorizontal()\n      .source(link => link.source)\n      .target(link => link.target)\n      .x(n => generateScales(scales[n.scale]).x(logic ? logicScale(n.x) : n.x))\n      .y(n => yScale(n.y));\n\n    svg\n      .selectAll(\".link\")\n      .data(links)\n      .join(\"path\")\n      .raise()\n      .attr(\"class\", \"link pointer\")\n      .attr(\"d\", linker)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", n => n.color? n.color : \"black\")\n      .attr(\"stroke-width\", n => n.width ? n.width : radius/3)\n      .attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1)\n      .attr(\"stroke-dasharray\", n => n.dashed ? n.dashed : null)\n      .on(\"click\", (e, target) => {\n        setInfo({position: [e.x, e.y], target: target, type: \"link\"}); //displays line properties when clicked\n        e.stopPropagation();\n      });\n\n\n    //---draw points---//\n    svg\n      .selectAll(\".node\")\n      .data(activeData.filter(d => d.inflectionSemantic!==\"cancelled\"))\n      .join(\"circle\")\n      .raise()\n      .attr(\"class\", \"node pointer\")\n      .attr(\"r\", n => n.radius? n.radius : radius) //todo for accessibility\n      .attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n      .attr(\"opacity\", d => d.opacity ? d.opacity : 1)\n      .attr(\"cx\", d => generateScales(scales[d.scale]).x(logic ? logicScale(d.x) : d.x))\n      .attr(\"cy\", d => yScale(d.y))\n      .call(dragged)\n      .on(\"click\", (e, target) => {\n        if (toggle===\"cancelled\") {\n          const newNodes = [...data];\n          const node = newNodes.find(n => n.id === target.id);\n          node.inflectionSemantic = \"cancelled\";\n          setData(newNodes);\n        } else {\n          setInfo({position: [e.x, e.y], target: target}); //displays node properties when clicked\n        }\n        e.stopPropagation(); //stops deselect when bg is clicked\n      });\n\n    //---initialize custom symbols---//\n    const cancelledSymbol = {\n      draw: (context, size) => {\n        let s = Math.sqrt(size)/2;\n            context.moveTo(s,0);\n            context.lineTo(s*2,s);\n            context.lineTo(s,s*2);\n            context.lineTo(0,s);\n            context.lineTo(-s,s*2);\n            context.lineTo(-s*2,s);\n            context.lineTo(-s,0);\n            context.lineTo(-s*2,-s);\n            context.lineTo(-s,-s*2);\n            context.lineTo(0,-s);\n            context.lineTo(s,-s*2);\n            context.lineTo(s*2,-s);\n            context.closePath();\n      }\n    }\n\n    //---draw symbols---//\n    svg\n      .selectAll(\".cancelled\")\n      .data(activeData.filter(d => d.inflectionSemantic===\"cancelled\"))\n      .join(\"path\")\n      .raise()\n      .attr(\"class\", \"cancelled pointer\")\n      .attr(\"d\", symbol(cancelledSymbol, radius*radius*5))\n      .attr(\"transform\", n => `translate(${generateScales(scales[n.scale]).x(n.x)}, ${yScale(n.y)})`)\n      .on(\"click\", (e, target) => {\n        if (toggle===\"cancelled\") {\n          const newNodes = [...data];\n          const node = newNodes.find(n => n.id === target.id);\n          delete node.inflectionSemantic;\n          setData(newNodes);\n        } else {\n          setInfo({position: [e.x, e.y], target: target}); //displays node properties when clicked\n        }\n        e.stopPropagation();\n      });\n      // .attr(\"transform\", \"rotate(90)\");\n\n\n    //---draw labels---//\n    svg\n      .selectAll(\".label\")\n      .data(activeData)\n      .join(\"text\")\n      .raise()\n      .attr(\"class\", \"label\")\n      .text(node => showLabel ? node.name : node.id)\n      .attr(\"x\", node => generateScales(scales[node.scale]).x(logic ? logicScale(node.x) : node.x))\n      .attr(\"y\", node => yScale(node.y + (rangeY>breakpoint ? rangeY*.06 : breakpoint/5))) //vertical offset. see scales\n      .attr(\"text-anchor\", \"middle\");\n      // .attr(\"font-size\", fontSize);\n\n\n    //---zoom---//\n    const zoomBehavior = zoom()\n      .scaleExtent([0.25, 5]) //can zoom 2x smaller and 5x bigger\n      .translateExtent([[-100, 0], [dimensions.width+100, dimensions.height]]) //limits how far graph can pan\n      .on(\"zoom\", e => {\n        const zoomState = e.transform; //returns zoom transformations as an object\n        setCurrentZoomState(zoomState);\n      });\n\n    svg.on(\"click\", () => setInfo(null));\n    svg.call(zoomBehavior);\n\n  }, [data, setData, intervals, scales, activeLayer, activeData, dimensions, links, logic, currentZoomState, setInfo, radius, showLabel]);\n\n  return (\n    <div ref={wrapperRef} className=\"svgWrapper\">\n      <svg id=\"graphic\" ref={svgRef}>\n        <g className=\"cancelled\" />\n        <g className=\"x-axis\" />\n      </svg>\n    </div>\n  );\n};\n\n\nexport default Graphic;\n"]},"metadata":{},"sourceType":"module"}