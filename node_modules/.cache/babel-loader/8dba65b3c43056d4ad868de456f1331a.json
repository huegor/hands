{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./App.css\";\nimport Data from \"./data.json\";\nimport Graphic from \"./components/Graphic\";\nimport NewPointForm from \"./components/NewPointForm\";\nimport generateLinks from \"./components/generateLinks\"; //iterates thru xy values in json data to find min and max values\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction findMinMax(data) {\n  var [minX, minY] = [Infinity, Infinity]; //assign values for multiple vars\n\n  var [maxX, maxY] = [-Infinity, -Infinity];\n  var tmpX, tmpY;\n\n  for (var i = data.length - 1; i >= 0; i--) {\n    tmpX = data[i].x;\n    tmpY = data[i].y;\n    if (tmpX < minX) minX = tmpX;\n    if (tmpX > maxX) maxX = tmpX;\n    if (tmpY < minY) minY = tmpY;\n    if (tmpY > maxY) maxY = tmpY;\n  }\n\n  return [minX, maxX, minY, maxY];\n} // /*\n//    process raw data in function that extract following arrays:\n//    0: of all nodes excluding loose points\n//    1: from 1, all links between nodes, {source, target, color}\n//\n//    Graphic component will be passed these for use in this way:\n//    - [1] for drawing linkHorizontal\n//    - Data.nodes for drawing cirlces and labels\n// */\n// function generateLinks(data) {\n//   // const nodes = []; //array of all nodes that are NOT detached\n//   const links = []; //array of all node links\n//\n//   /// IMPORTANT: all ending nodes must be marked w target:null ///\n//\n//   data.forEach((item, i) => {\n//     if (item.target !== null) { //detached points are defined w target: null as opposed to being undefined\n//       // nodes.push(item);\n//       if (item.target) { //for nodes w multiple targets, create link for each target\n//         item.target.forEach((n) => {\n//           links.push({source:item, target:data[n], color:item.lineColor});\n//         });\n//       } else {\n//         links.push({source:item, target:data[i+1], color:item.lineColor})\n//       };\n//     }\n//   });\n//\n//   return links;\n// };\n\n\nfunction App() {\n  _s();\n\n  //user defined\n  const radius = 5;\n  const fontSize = 20; //initially set to imported ChronoJSON\n\n  const [src, setSrc] = useState(Data);\n  /*\n    TODO:\n    - allow NewPointForm access to setSrc\n    - put generateLinks() into a useEffect hook that changes everytime src changes\n    - findMinMax() adjust less frequently. ie: if new data can be panned to, no need to adjust viewport\n    - create a master array of all snapshots of data (for scrubber)\n  */\n  // const data = {nodes: src.nodes, links:generateLinks(src.nodes), imgs:src.imgs};\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Graphic, {\n      src: src,\n      setSrc: setSrc,\n      minMax: findMinMax(src.nodes),\n      radius: radius,\n      fontSize: fontSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewPointForm, {\n      src: src,\n      setNodes: setSrc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"H30rYC+5qCYZWNTKEH0Drzdz/po=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js"],"names":["React","useState","Data","Graphic","NewPointForm","generateLinks","findMinMax","data","minX","minY","Infinity","maxX","maxY","tmpX","tmpY","i","length","x","y","App","radius","fontSize","src","setSrc","nodes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,aAAP,MAA0B,4BAA1B,C,CAEA;;;;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,MAAI,CAACC,IAAD,EAAOC,IAAP,IAAe,CAACC,QAAD,EAAWA,QAAX,CAAnB,CADwB,CACiB;;AACzC,MAAI,CAACC,IAAD,EAAOC,IAAP,IAAe,CAAC,CAACF,QAAF,EAAY,CAACA,QAAb,CAAnB;AACA,MAAIG,IAAJ,EAAUC,IAAV;;AAEA,OAAK,IAAIC,CAAC,GAAGR,IAAI,CAACS,MAAL,GAAY,CAAzB,EAA4BD,CAAC,IAAE,CAA/B,EAAkCA,CAAC,EAAnC,EAAuC;AACrCF,IAAAA,IAAI,GAAGN,IAAI,CAACQ,CAAD,CAAJ,CAAQE,CAAf;AACAH,IAAAA,IAAI,GAAGP,IAAI,CAACQ,CAAD,CAAJ,CAAQG,CAAf;AACA,QAAIL,IAAI,GAAGL,IAAX,EAAiBA,IAAI,GAAGK,IAAP;AACjB,QAAIA,IAAI,GAAGF,IAAX,EAAiBA,IAAI,GAAGE,IAAP;AACjB,QAAIC,IAAI,GAAGL,IAAX,EAAiBA,IAAI,GAAGK,IAAP;AACjB,QAAIA,IAAI,GAAGF,IAAX,EAAiBA,IAAI,GAAGE,IAAP;AAClB;;AACD,SACE,CAACN,IAAD,EAAOG,IAAP,EAAaF,IAAb,EAAmBG,IAAnB,CADF;AAGD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA,SAASO,GAAT,GAAe;AAAA;;AAEb;AACA,QAAMC,MAAM,GAAG,CAAf;AACA,QAAMC,QAAQ,GAAG,EAAjB,CAJa,CAMb;;AACA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBtB,QAAQ,CAACC,IAAD,CAA9B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACE;;AAEA,sBACE;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,GAAG,EAAEoB,GAAd;AAAmB,MAAA,MAAM,EAAEC,MAA3B;AAAmC,MAAA,MAAM,EAAEjB,UAAU,CAACgB,GAAG,CAACE,KAAL,CAArD;AAAkE,MAAA,MAAM,EAAEJ,MAA1E;AAAkF,MAAA,QAAQ,EAAEC;AAA5F;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AAAc,MAAA,GAAG,EAAEC,GAAnB;AAAwB,MAAA,QAAQ,EAAEC;AAAlC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;;GAxBQJ,G;;KAAAA,G;AA0BT,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport \"./App.css\";\nimport Data from \"./data.json\";\nimport Graphic from \"./components/Graphic\";\nimport NewPointForm from \"./components/NewPointForm\";\nimport generateLinks from \"./components/generateLinks\";\n\n//iterates thru xy values in json data to find min and max values\nfunction findMinMax(data) {\n  var [minX, minY] = [Infinity, Infinity]; //assign values for multiple vars\n  var [maxX, maxY] = [-Infinity, -Infinity];\n  var tmpX, tmpY;\n\n  for (var i = data.length-1; i>=0; i--) {\n    tmpX = data[i].x;\n    tmpY = data[i].y;\n    if (tmpX < minX) minX = tmpX;\n    if (tmpX > maxX) maxX = tmpX;\n    if (tmpY < minY) minY = tmpY;\n    if (tmpY > maxY) maxY = tmpY;\n  }\n  return(\n    [minX, maxX, minY, maxY]\n  );\n}\n\n// /*\n//    process raw data in function that extract following arrays:\n//    0: of all nodes excluding loose points\n//    1: from 1, all links between nodes, {source, target, color}\n//\n//    Graphic component will be passed these for use in this way:\n//    - [1] for drawing linkHorizontal\n//    - Data.nodes for drawing cirlces and labels\n// */\n// function generateLinks(data) {\n//   // const nodes = []; //array of all nodes that are NOT detached\n//   const links = []; //array of all node links\n//\n//   /// IMPORTANT: all ending nodes must be marked w target:null ///\n//\n//   data.forEach((item, i) => {\n//     if (item.target !== null) { //detached points are defined w target: null as opposed to being undefined\n//       // nodes.push(item);\n//       if (item.target) { //for nodes w multiple targets, create link for each target\n//         item.target.forEach((n) => {\n//           links.push({source:item, target:data[n], color:item.lineColor});\n//         });\n//       } else {\n//         links.push({source:item, target:data[i+1], color:item.lineColor})\n//       };\n//     }\n//   });\n//\n//   return links;\n// };\n\n\n\nfunction App() {\n\n  //user defined\n  const radius = 5;\n  const fontSize = 20;\n\n  //initially set to imported ChronoJSON\n  const [src, setSrc] = useState(Data);\n\n  /*\n    TODO:\n    - allow NewPointForm access to setSrc\n    - put generateLinks() into a useEffect hook that changes everytime src changes\n    - findMinMax() adjust less frequently. ie: if new data can be panned to, no need to adjust viewport\n    - create a master array of all snapshots of data (for scrubber)\n  */\n  // const data = {nodes: src.nodes, links:generateLinks(src.nodes), imgs:src.imgs};\n\n  return (\n    <>\n      <Graphic src={src} setSrc={setSrc} minMax={findMinMax(src.nodes)} radius={radius} fontSize={fontSize}/>\n      <NewPointForm src={src} setNodes={setSrc}/>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}