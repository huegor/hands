{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, drag, axisBottom } from \"d3\";\nimport Canvas from './components/Canvas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // const [data, setData] = React.useState(null);\n  //\n  // //make a GET request to backend using Fetch API\n  // //store returned JSON in state variable \"data\"\n  // React.useEffect(() => {\n  //   fetch(\"/api\")\n  //     .then((res) => res.json())\n  //     .then((data) => setData(data.message));\n  // }, []);\n  //\n  // //draw circle\n  // const draw = (ctx, frameCount) => {\n  //     ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n  //     ctx.fillStyle = '#000000'\n  //     ctx.beginPath()\n  //     ctx.arc(50, 100, 20*Math.sin(frameCount*0.05)**2, 0, 2*Math.PI)\n  //     ctx.fill()\n  //   }\n  //\n  // //if data not there yet, show \"Loading...\"\n  // return (\n  //   <>\n  //     <p>{!data ? \"Loading...\" : data}</p>\n  //     <Canvas draw={draw}/>\n  //   </>\n  // );\n  const [data, setData] = useState([25, 30, 45, 60, 20]);\n  const radius = 4; //reference object to pass to svg in React Dom\n\n  const svgRef = useRef();\n  const wrapperRef = useRef(); //react has trouble getting dimensions within react\n  // const { width, height } =\n  //   dimensions || wrapperRef.current.getBoundingClientRect();\n  //\n  // //lines and axes\n  // //mapping xValues to width of wrapper\n  // const xScale = scaleLinear()\n  //     .domain([0, max(data)])\n  //     .range([0, width]);\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n\n  useEffect(() => {\n    const svgContent = select(svgRef.current);\n    const xScale = scaleLinear().domain([0, max(data)]).range([0, 300]);\n    const xAxis = axisBottom();\n    svgContent.selectAll(\"circle\").data(data).join(\"circle\").attr(\"r\", radius).attr(\"cx\", d => xScale(d)).attr(\"cy\", d => xScale(d) * 2);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"khKDYhOe15hJcdEETl+zL+8yFdk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js"],"names":["React","useState","useEffect","useRef","select","scaleLinear","drag","axisBottom","Canvas","App","data","setData","radius","svgRef","wrapperRef","svgContent","current","xScale","domain","max","range","xAxis","selectAll","join","attr","d"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,IAA9B,EAAoCC,UAApC,QAAsD,IAAtD;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAD,CAAhC;AAEA,QAAMW,MAAM,GAAG,CAAf,CA7Ba,CA8Bb;;AACA,QAAMC,MAAM,GAAGV,MAAM,EAArB;AACA,QAAMW,UAAU,GAAGX,MAAM,EAAzB,CAhCa,CAgCgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAD,EAAAA,SAAS,CAAC,MAAK;AACb,UAAMa,UAAU,GAAGX,MAAM,CAACS,MAAM,CAACG,OAAR,CAAzB;AACA,UAAMC,MAAM,GAAGZ,WAAW,GACrBa,MADU,CACH,CAAC,CAAD,EAAIC,GAAG,CAACT,IAAD,CAAP,CADG,EAEVU,KAFU,CAEJ,CAAC,CAAD,EAAI,GAAJ,CAFI,CAAf;AAGA,UAAMC,KAAK,GAAGd,UAAU,EAAxB;AAEAQ,IAAAA,UAAU,CACPO,SADH,CACa,QADb,EAEGZ,IAFH,CAEQA,IAFR,EAGGa,IAHH,CAGQ,QAHR,EAIGC,IAJH,CAIQ,GAJR,EAIaZ,MAJb,EAKGY,IALH,CAKQ,IALR,EAKcC,CAAC,IAAIR,MAAM,CAACQ,CAAD,CALzB,EAMGD,IANH,CAMQ,IANR,EAMcC,CAAC,IAAIR,MAAM,CAACQ,CAAD,CAAN,GAAU,CAN7B;AAQD,GAfQ,EAeN,CAACf,IAAD,CAfM,CAAT;AAiBA,sBACE;AAAK,IAAA,GAAG,EAAEI,UAAV;AAAA,2BACE;AAAK,MAAA,GAAG,EAAED;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAjEQJ,G;;KAAAA,G;AAmET,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, drag, axisBottom } from \"d3\";\nimport Canvas from './components/Canvas'\n\n\nfunction App() {\n  // const [data, setData] = React.useState(null);\n  //\n  // //make a GET request to backend using Fetch API\n  // //store returned JSON in state variable \"data\"\n  // React.useEffect(() => {\n  //   fetch(\"/api\")\n  //     .then((res) => res.json())\n  //     .then((data) => setData(data.message));\n  // }, []);\n  //\n  // //draw circle\n  // const draw = (ctx, frameCount) => {\n  //     ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n  //     ctx.fillStyle = '#000000'\n  //     ctx.beginPath()\n  //     ctx.arc(50, 100, 20*Math.sin(frameCount*0.05)**2, 0, 2*Math.PI)\n  //     ctx.fill()\n  //   }\n  //\n  // //if data not there yet, show \"Loading...\"\n  // return (\n  //   <>\n  //     <p>{!data ? \"Loading...\" : data}</p>\n  //     <Canvas draw={draw}/>\n  //   </>\n  // );\n  const [data, setData] = useState([25, 30, 45, 60, 20]);\n\n  const radius = 4;\n  //reference object to pass to svg in React Dom\n  const svgRef = useRef();\n  const wrapperRef = useRef(); //react has trouble getting dimensions within react\n  // const { width, height } =\n  //   dimensions || wrapperRef.current.getBoundingClientRect();\n  //\n  // //lines and axes\n  // //mapping xValues to width of wrapper\n  // const xScale = scaleLinear()\n  //     .domain([0, max(data)])\n  //     .range([0, width]);\n\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n  useEffect(()=> {\n    const svgContent = select(svgRef.current);\n    const xScale = scaleLinear()\n        .domain([0, max(data)])\n        .range([0, 300]);\n    const xAxis = axisBottom();\n\n    svgContent\n      .selectAll(\"circle\")\n      .data(data)\n      .join(\"circle\")\n      .attr(\"r\", radius)\n      .attr(\"cx\", d => xScale(d))\n      .attr(\"cy\", d => xScale(d)*2);\n\n  }, [data]);\n\n  return (\n    <div ref={wrapperRef}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}