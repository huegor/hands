{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, axisBottom, linkHorizontal, format, drag, zoom, shape } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport generateLinks from \"./generateLinks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Graphic({\n  data,\n  setData,\n  minMax,\n  radius,\n  fontSize\n}) {\n  _s();\n\n  //all data is passed down from and synced to App.js\n  //initialize reference object to pass to svg in React Dom\n  const svgRef = useRef(); //svg wrapped in div bc otherwise resize observer callback won't work\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState(); //initialize links between nodes\n\n  const links = generateLinks(data); //initialize bottom axis label\n\n  const [axisLabel, setAxisLabel] = useState(\"Years (AD)\"); //all d3 shennanigans goes in this hook. called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n\n    if (!dimensions) return; //prevents crashing before min and max are calculated\n\n    if (!minMax) return; //prevents crashing before links are calculated\n\n    if (!links) return; //---scales---//\n    //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n\n    const xScale = scaleLinear().domain([minMax[0], minMax[1]]) //0 is minX, 1 is maxX (reference findMinMax)\n    .range([0, dimensions.width]);\n    const yScale = scaleLinear().domain([0, minMax[3]]) //todo\n    .range([0, dimensions.height]); //inverse scales for drag behavior\n\n    const xScaleInverse = scaleLinear().domain([-dimensions.width, dimensions.width]).range([-(minMax[1] - minMax[0]), minMax[1] - minMax[0]]); //minMax[1]-minMax[0] gives section of x values displayed onscreen\n\n    const yScaleInverse = scaleLinear().domain([-dimensions.height, dimensions.height]).range([-minMax[3], minMax[3]]); //todo\n\n    if (currentZoomState) {\n      const newXScale = currentZoomState.rescaleX(xScale); //zoom state comes w methods for transformations\n\n      xScale.domain(newXScale.domain());\n      xScaleInverse.range([-(newXScale.domain()[1] - newXScale.domain()[0]), newXScale.domain()[1] - newXScale.domain()[0]]);\n    }\n\n    ; //---draw bottom axis---//\n\n    const xAxis = axisBottom(xScale).tickSize(-dimensions.height) //tick extends to entire height of svg\n    .tickFormat(format('')); //gets rid of , for 1000s groupings\n\n    svg.select(\".x-axis\") //selects and replaces .x-axis\n    .style(\"transform\", `translateY(${dimensions.height}px)`).call(xAxis).call(g => g.select(\".domain\") //removes solid black axis bar\n    .remove()).call(g => g.selectAll(\".tick line\") //styles individual ticks\n    .attr(\"stroke-opacity\", 0.5).attr(\"stroke-dasharray\", \"2,2\")).call(g => g.selectAll(\".tick text\").attr(\"y\", 10) //todo?\n    .attr(\"opacity\", 0.5).attr(\"font-size\", fontSize * .8)); //replace class \"x-axis\" w xAxis\n\n    svg.selectAll(\".axisLabel\").data(axisLabel).join(\"text\").attr(\"class\", \"axisLabel\").text(axisLabel).attr(\"x\", dimensions.width / 2).attr(\"y\", dimensions.height * 1.08).attr(\"text-anchor\", \"middle\").attr(\"opacity\", 0.5) //todo\n    .attr(\"font-size\", fontSize * .8); //--drag behavior--//\n\n    const dragged = drag() // .on(\"start\", e => {\n    //   select(this).attr(\"stroke\", \"black\");\n    // })\n    .on(\"drag\", e => {\n      const newNodes = [...data]; //always make a copy when updating array\n      //find array element in newData (id = index) and set new x y coordinates\n      //define id as array.length-1\n\n      newNodes[e.subject.id].x += xScaleInverse(e.dx);\n      newNodes[e.subject.id].y += yScaleInverse(e.dy); // const newSrc = Object.assign({}, src, {nodes: newNodes});\n\n      setData(newNodes);\n    }); //---draw lines---//\n\n    const linker = linkHorizontal().source(link => link.source).target(link => link.target).x(node => xScale(node.x)).y(node => yScale(node.y));\n    svg.selectAll(\".link\").data(links).join(\"path\").attr(\"class\", \"link\").attr(\"d\", linker).attr(\"fill\", \"none\").attr(\"stroke\", n => n.color ? n.color : \"black\"); //---draw points---//\n\n    svg.selectAll(\".node\").data(data).join(\"circle\").attr(\"class\", \"node\").attr(\"r\", radius).attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n    .attr(\"cx\", d => xScale(d.x)).attr(\"cy\", d => yScale(d.y)).call(dragged).on(\"click\", e => {\n      svg.append(\"rect\").attr(\"x\", e.x + 2).attr(\"y\", e.y).attr(\"fill\", \"white\").attr(\"opacity\", \"90%\").attr(\"width\", 100).attr(\"height\", 50);\n    }); //---draw labels---//\n\n    svg.selectAll(\".label\").data(data).join(\"text\").attr(\"class\", \"label\").text(node => node.name).attr(\"x\", node => xScale(node.x)).attr(\"y\", node => yScale(node.y + 2)).attr(\"text-anchor\", \"middle\").attr(\"font-size\", fontSize); // //--draw info pop-up--//\n    // svg\n    //   .selectAll(\".info\")\n    //   .data(e.x, e.y)\n    //   .join(\"square\")\n    //   .\n    //---zoom---//\n\n    const zoomBehavior = zoom().scaleExtent([0.25, 5]) //can zoom 2x smaller and 5x bigger\n    .translateExtent([[-100, 0], [dimensions.width + 100, dimensions.height]]) //limits how far graph can pan\n    .on(\"zoom\", e => {\n      const zoomState = e.transform; //returns zoom transformations as an object\n\n      setCurrentZoomState(zoomState);\n    });\n    svg.call(zoomBehavior);\n  }, [data, dimensions, currentZoomState, minMax, radius, fontSize]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"x-axis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Graphic, \"uoSQK9BPMmsdVoeMdL/E+s194Mk=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = Graphic;\n;\nexport default Graphic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graphic\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js"],"names":["React","useState","useEffect","useRef","select","scaleLinear","axisBottom","linkHorizontal","format","drag","zoom","shape","useResizeObserver","generateLinks","Graphic","data","setData","minMax","radius","fontSize","svgRef","wrapperRef","dimensions","currentZoomState","setCurrentZoomState","links","axisLabel","setAxisLabel","svg","current","xScale","domain","range","width","yScale","height","xScaleInverse","yScaleInverse","newXScale","rescaleX","xAxis","tickSize","tickFormat","style","call","g","remove","selectAll","attr","join","text","dragged","on","e","newNodes","subject","id","x","dx","y","dy","linker","source","link","target","node","n","color","d","append","name","zoomBehavior","scaleExtent","translateExtent","zoomState","transform"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, axisBottom, linkHorizontal, format, drag, zoom, shape } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport generateLinks from \"./generateLinks\";\n\nfunction Graphic({data, setData, minMax, radius, fontSize}) {\n\n  //all data is passed down from and synced to App.js\n\n  //initialize reference object to pass to svg in React Dom\n  const svgRef = useRef();\n  //svg wrapped in div bc otherwise resize observer callback won't work\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState();\n\n  //initialize links between nodes\n  const links = generateLinks(data);\n\n  //initialize bottom axis label\n  const [axisLabel, setAxisLabel] = useState(\"Years (AD)\");\n\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n    if (!dimensions) return;\n    //prevents crashing before min and max are calculated\n    if (!minMax) return;\n    //prevents crashing before links are calculated\n    if (!links) return;\n\n    //---scales---//\n    //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n    const xScale = scaleLinear()\n      .domain([minMax[0], minMax[1]]) //0 is minX, 1 is maxX (reference findMinMax)\n      .range([0, dimensions.width]);\n    const yScale = scaleLinear()\n      .domain([0, minMax[3]]) //todo\n      .range([0, dimensions.height]);\n    //inverse scales for drag behavior\n    const xScaleInverse = scaleLinear()\n      .domain([-dimensions.width, dimensions.width])\n      .range([-(minMax[1]-minMax[0]), minMax[1]-minMax[0]]); //minMax[1]-minMax[0] gives section of x values displayed onscreen\n    const yScaleInverse = scaleLinear()\n      .domain([-dimensions.height, dimensions.height])\n      .range([-minMax[3], minMax[3]]); //todo\n\n    if (currentZoomState) {\n      const newXScale = currentZoomState.rescaleX(xScale); //zoom state comes w methods for transformations\n      xScale.domain(newXScale.domain());\n      xScaleInverse.range([\n        -(newXScale.domain()[1]-newXScale.domain()[0]),\n        (newXScale.domain()[1]-newXScale.domain()[0])\n      ]);\n    };\n\n    //---draw bottom axis---//\n    const xAxis = axisBottom(xScale)\n      .tickSize(-dimensions.height) //tick extends to entire height of svg\n      .tickFormat(format('')); //gets rid of , for 1000s groupings\n\n    svg\n      .select(\".x-axis\") //selects and replaces .x-axis\n      .style(\"transform\", `translateY(${dimensions.height}px)`)\n      .call(xAxis)\n      .call(g => g.select(\".domain\") //removes solid black axis bar\n        .remove())\n      .call(g => g.selectAll(\".tick line\") //styles individual ticks\n        .attr(\"stroke-opacity\", 0.5)\n        .attr(\"stroke-dasharray\", \"2,2\"))\n      .call(g => g.selectAll(\".tick text\")\n        .attr(\"y\", 10) //todo?\n        .attr(\"opacity\", 0.5)\n        .attr(\"font-size\", fontSize*.8)); //replace class \"x-axis\" w xAxis\n\n    svg\n      .selectAll(\".axisLabel\")\n      .data(axisLabel)\n      .join(\"text\")\n      .attr(\"class\", \"axisLabel\")\n      .text(axisLabel)\n      .attr(\"x\", dimensions.width/2)\n      .attr(\"y\", dimensions.height*1.08)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"opacity\", 0.5) //todo\n      .attr(\"font-size\", fontSize*.8);\n\n    //--drag behavior--//\n    const dragged = drag()\n      // .on(\"start\", e => {\n      //   select(this).attr(\"stroke\", \"black\");\n      // })\n      .on(\"drag\", e => {\n        const newNodes = [...data]; //always make a copy when updating array\n        //find array element in newData (id = index) and set new x y coordinates\n        //define id as array.length-1\n        newNodes[e.subject.id].x += xScaleInverse(e.dx);\n        newNodes[e.subject.id].y += yScaleInverse(e.dy);\n        // const newSrc = Object.assign({}, src, {nodes: newNodes});\n        setData(newNodes);\n      });\n\n    //---draw lines---//\n    const linker = linkHorizontal()\n      .source(link => link.source)\n      .target(link => link.target)\n      .x(node => xScale(node.x))\n      .y(node => yScale(node.y));\n\n    svg\n      .selectAll(\".link\")\n      .data(links)\n      .join(\"path\")\n      .attr(\"class\", \"link\")\n      .attr(\"d\", linker)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", n => n.color? n.color : \"black\");\n\n\n    //---draw points---//\n    svg\n      .selectAll(\".node\")\n      .data(data)\n      .join(\"circle\")\n      .attr(\"class\", \"node\")\n      .attr(\"r\", radius)\n      .attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n      .attr(\"cx\", d => xScale(d.x))\n      .attr(\"cy\", d => yScale(d.y))\n      .call(dragged)\n      .on(\"click\", e => {\n        svg\n          .append(\"rect\")\n          .attr(\"x\", (e.x+2))\n          .attr(\"y\", e.y)\n          .attr(\"fill\", \"white\")\n          .attr(\"opacity\", \"90%\")\n          .attr(\"width\", 100)\n          .attr(\"height\", 50)\n      });\n\n\n    //---draw labels---//\n    svg\n      .selectAll(\".label\")\n      .data(data)\n      .join(\"text\")\n      .attr(\"class\", \"label\")\n      .text(node => node.name)\n      .attr(\"x\", node => xScale(node.x))\n      .attr(\"y\", node => yScale(node.y + 2))\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", fontSize);\n\n    // //--draw info pop-up--//\n    // svg\n    //   .selectAll(\".info\")\n    //   .data(e.x, e.y)\n    //   .join(\"square\")\n    //   .\n\n    //---zoom---//\n    const zoomBehavior = zoom()\n      .scaleExtent([0.25, 5]) //can zoom 2x smaller and 5x bigger\n      .translateExtent([[-100, 0], [dimensions.width+100, dimensions.height]]) //limits how far graph can pan\n      .on(\"zoom\", e => {\n        const zoomState = e.transform; //returns zoom transformations as an object\n        setCurrentZoomState(zoomState);\n      });\n\n    svg.call(zoomBehavior);\n  }, [data, dimensions, currentZoomState, minMax, radius, fontSize]);\n\n  return (\n    <div ref={wrapperRef}>\n      <svg ref={svgRef}>\n        <g className=\"x-axis\" />\n      </svg>\n    </div>\n  );\n};\n\n\nexport default Graphic;\n"]},"metadata":{},"sourceType":"module"}