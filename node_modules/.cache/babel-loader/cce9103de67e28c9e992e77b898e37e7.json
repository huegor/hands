{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, scaleOrdinal, axisBottom, linkHorizontal, format, drag, zoom, min, max, symbol, symbols } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport generateLinks from \"./generateLinks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Graphic({\n  data,\n  setData,\n  activeLayer,\n  zones,\n  setZones,\n  radius,\n  info,\n  setInfo,\n  setInflectTarget,\n  showLabel,\n  toggle,\n  setToggle,\n  scales,\n  setScales,\n  syntacticOrder,\n  setSyntacticOrder,\n  activeScale\n}) {\n  _s();\n\n  //all data is passed down from and synced to App.js\n  const activeData = activeLayer ? data.filter(d => d.layer === activeLayer) : data; //is logical operators active?\n\n  const logic = isNaN(data[0].x); //Todo\n  //initialize reference object to pass to svg in React Dom\n\n  const svgRef = useRef(); //svg wrapped in div bc otherwise resize observer callback won't work\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState(); // //initialize links between instants\n\n  const links = generateLinks(activeData); //all d3 shennanigans goes in this hook. called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n\n    if (!dimensions) return; //removes svgs added using append()\n\n    svg.selectAll(\".remove\").remove(); //initialize inflections for .selectAll\n    //add cancelled class\n    //---scales---//\n    //if time matches logical operator keyword, translate into index values, then map\n\n    const logicScale = scaleOrdinal([\"before\", \"now\", \"after\"], [-1, 0, 1]).unknown(0);\n    const breakpoint = 5;\n    const xMin = min(data.map(({\n      x\n    }) => logic ? logicScale(x) : x));\n    const xMax = max(data.map(({\n      x\n    }) => logic ? logicScale(x) : x));\n    const yMin = min(data.map(({\n      y\n    }) => y));\n    const yMax = max(data.map(({\n      y\n    }) => y));\n    const rangeX = xMax - xMin; //0 is minX, 1 is maxX (reference findMinMax)\n\n    const rangeY = yMax - yMin; //TODO: scaleTime()\n    //for multiple scales, generate a new scale for each x/y min - x/y max\n\n    /*\n    - Allow users to specify scale. x&y min max and units\n    - for each scale, generateScale()\n     */\n\n    function generateScales(currentScale) {\n      const x = scaleLinear().domain([currentScale.min, currentScale.max]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n      .range([0, dimensions.width]);\n      const y = scaleLinear() //if difference in y vaules greater than 5, resize to min and max\n      .domain(rangeY > breakpoint ? [yMin, yMax] : [yMin - breakpoint, yMax + breakpoint]).range([0, dimensions.height]);\n      const xInverse = scaleLinear().domain([0, dimensions.width]).range([currentScale.min, currentScale.max]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n\n      const xInverseDrag = scaleLinear().domain([-dimensions.width, dimensions.width]).range([-(currentScale.max - currentScale.min), currentScale.max - currentScale.min]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n\n      const yInverse = scaleLinear().domain([-dimensions.height, dimensions.height]).range(rangeY > breakpoint ? [-rangeY, rangeY] : [-breakpoint * 5, breakpoint * 5]);\n      return {\n        x,\n        y,\n        xInverse,\n        xInverseDrag,\n        yInverse\n      };\n    } //scales values to screen pixels\n\n    /*\n    {\n      biggie: {\n        ...\n        scale: generateScale()\n      }\n      ...\n    }\n    */\n    // const xScales = () => {\n    //   Object.keys(scales).forEach(key => { //for every scale in scales data, generate an xScale\n    //     // const thisScale = scales[key];\n    //     scales[key] = {...scales[key], scale:generateScales(scales[key]).x}\n    //   });\n    //   return scales;\n    // }\n\n\n    const xScales = Object.keys(scales).map(key => {\n      //for every scale in scales data, generate an xScale\n      const thisScale = scales[key];\n      return {\n        name: key,\n        scale: scaleLinear() //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n        .domain([thisScale.min, thisScale.max]).range([0, dimensions.width]),\n        // segments: thisScale.segments.map(n => {\n        //   scaleLinear() //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n        //     .domain([thisScale.min, thisScale.max])\n        //     .range([0, dimensions.width])\n        // }),\n        yPos: thisScale.yPos,\n        units: thisScale.units,\n        scaleInverse: scaleLinear() //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n        .domain([-dimensions.width, dimensions.width]).range([-(thisScale.max - thisScale.min), thisScale.max - thisScale.min])\n      };\n    }); // const xSegments = Object.keys(scales).map((key, i) => {\n    //   const thisScale = scales[key];\n    //   const segments = [];\n    //   if (!thisScale.segments) {\n    //     return;\n    //   }\n    //   thisScale.segments.map(n => {\n    //     const min = n.min?n.min:thisScale.min; //if segment contains a min, set that as min. otherwise, set scale min as min.\n    //     const max = n.max?n.max:thisScale.max;\n    //     // console.log(xScales[i].scale(min));\n    //     segments.push(\n    //       {\n    //         scale: key,\n    //         yPos: thisScale.yPos,\n    //         segment: scaleLinear()\n    //         .domain([min, max])\n    //         .range([xScales[i].scale(min), xScales[i].scale(max)])\n    //       }\n    //     )\n    //   })\n    //   return segments;\n    // });\n\n    const xSegments = () => {\n      const segments = [];\n      Object.keys(scales).forEach((key, i) => {\n        const thisScale = scales[key]; // const segments = [];\n\n        if (!thisScale.segments) {\n          return;\n        }\n\n        thisScale.segments.map(n => {\n          const min = n.min ? n.min : thisScale.min; //if segment contains a min, set that as min. otherwise, set scale min as min.\n\n          const max = n.max ? n.max : thisScale.max; // console.log(xScales[i].scale(min));\n\n          segments.push({\n            scale: key,\n            yPos: thisScale.yPos,\n            proportion: (max - min) / (thisScale.max - thisScale.min),\n            segment: scaleLinear().domain([min, max]).range([xScales[i].scale(min), xScales[i].scale(max)])\n          });\n        });\n      });\n      return segments;\n    };\n    /*\n      xScales(generateScales(scaleLinear(scale)))\n      - take xScale and rescale according to transformations (newXScale)\n      - update each array entry's domain with that of newXScale\n    */\n    //if there is a zoom transform, override each xScales.scale with adjusted scale\n\n\n    if (currentZoomState) {\n      xScales.forEach((thisScale, i) => {\n        const newXScale = currentZoomState.rescaleX(thisScale.scale); //zoom state comes w methods for transformations\n        // const newXSegments = currentZoomState\n\n        xScales[i].scale = newXScale; //sets domain to newXScale domain\n      });\n    }\n\n    ; // const xScale = scaleLinear()\n    //   .domain([xMin, xMax]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n    //   .range([0, dimensions.width]);\n\n    const yScale = scaleLinear() //if difference in y vaules greater than 5, resize to min and max\n    .domain(rangeY > breakpoint ? [yMin, yMax] : [yMin - breakpoint, yMax + breakpoint]).range([0, dimensions.height]); //inverse scales for drag behavior\n    // const xScaleInverse = scaleLinear()\n    //   .domain([-dimensions.width, dimensions.width])\n    //   .range([-rangeX, rangeX]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n\n    const yScaleInverse = scaleLinear().domain([-0, dimensions.height]).range(rangeY > breakpoint ? [yMin, yMax] : [yMin - breakpoint, yMax + breakpoint]);\n    const yScaleInverseDrag = scaleLinear().domain([-dimensions.height, dimensions.height]).range(rangeY > breakpoint ? [-rangeY, rangeY] : [-breakpoint * 5, breakpoint * 5]); //---draw zones---//\n\n    if (zones.length) {\n      svg.selectAll(\".zones\").data(zones).join(\"rect\").attr(\"class\", \"zones\").attr(\"x\", d => xScales.find(n => n.name === d.scale).scale(d.start)) // .attr(\"x\", n => generateScales(scales[n.scale]).x(n.start))\n      // .attr(\"y\", n => n.yStart ? yScale(n.yStart) : yScale(minMax[2]))\n      .attr(\"y\", n => n.yStart ? yScale(n.yStart) : 0) //todo\n      .attr(\"width\", d => xScales.find(n => n.name === d.scale).scale(d.end) - xScales.find(n => n.name === d.scale).scale(d.start)).attr(\"height\", n => {\n        if (n.yStart & n.yEnd) {\n          return yScale(n.yEnd) - yScale(n.yStart);\n        } else if (n.yStart) {\n          return yScale(yMax + 10) - yScale(n.yStart);\n        } else {\n          return yScale(yMax + 10); //todo\n          // return (yScale(minMax[3])-yScale(minMax[2]))\n        }\n      }).attr(\"opacity\", n => n.opacity ? n.opacity : 0.5).attr(\"fill\", n => n.color ? n.color : \"#999\").attr(\"stroke\", \"black\") //todo\n      .attr(\"stroke-width\", n => n.importance ? n.importance * 2 : 0).on(\"click\", (e, target) => {\n        //displays zone properties when clicked\n        if (toggle === \"certainty\" || toggle === \"importance\") {\n          setInflectTarget(target);\n        } else {\n          setInfo({\n            position: [e.x, e.y],\n            target: target,\n            type: \"zone\"\n          }); //todo: set info to null when clicking again\n        }\n\n        e.stopPropagation();\n      });\n    } //---draw bottom axis---//\n\n\n    xSegments().forEach(n => {\n      const segment = axisBottom(n.segment) // .ticks(n.proportion<.33?5:null, \"f\");\n      .ticks(null, \"f\");\n      svg.append(\"g\") //todo\n      .attr(\"class\", \"remove\").style(\"transform\", `translateY(${dimensions.height * n.yPos}px)`).call(segment).raise().call(g => g.select(\".domain\") //removes solid black axis bar\n      .remove()).call(g => g.selectAll(\".tick line\") //styles individual ticks\n      .attr(\"stroke-opacity\", 0.5)).call(g => g.selectAll(\".tick text\").each((_, i) => d3.select(this).remove()).attr(\"y\", 10) //todo?\n      .attr(\"opacity\", 0.5));\n    });\n    xScales.forEach(thisScale => {\n      const xAxis = axisBottom(thisScale.scale).tickFormat(format(''));\n      svg.append(\"g\") //todo\n      .attr(\"class\", \"remove\").style(\"transform\", `translateY(${dimensions.height * thisScale.yPos}px)`).call(xAxis).raise().call(g => g.select(\".domain\") //removes solid black axis bar\n      .remove()).call(g => g.selectAll(\".tick line\") //styles individual ticks\n      .attr(\"stroke-opacity\", 0)).call(g => g.selectAll(\".tick text\").attr(\"y\", 10) //todo?\n      .attr(\"opacity\", 0));\n      svg.append(\"text\").text(thisScale.units).attr(\"class\", \"axisLabel smallTxt remove\").attr(\"x\", dimensions.width / 2).attr(\"y\", dimensions.height * (thisScale.yPos + .07)).attr(\"text-anchor\", \"middle\").attr(\"opacity\", 0.5);\n    }); // const xAxis = axisBottom(generateScales(scales.smalls).x)\n    //   // .tickSize(-dimensions.height) //tick extends to entire height of svg\n    //   .tickValues(logic ? [-1, 0, 1] : null)\n    //   .tickFormat(logic ? x => scaleOrdinal([-1, 0, 1], [\"before\", \"now\", \"after\"])(x) : format('')); //gets rid of , for 1000s groupings\n    // svg\n    //   .select(\".x-axis\") //selects and replaces .x-axis\n    //   .style(\"transform\", `translateY(${dimensions.height}px)`)\n    //   .call(xAxis)\n    //   .raise()\n    // .call(g => g.select(\".domain\") //removes solid black axis bar\n    //   .remove())\n    // .call(g => g.selectAll(\".tick line\") //styles individual ticks\n    //   .attr(\"stroke-opacity\", 0.5))\n    //   // .attr(\"stroke-dasharray\", \"2,2\"))\n    // .call(g => g.selectAll(\".tick text\")\n    //   .attr(\"y\", 10) //todo?\n    //   .attr(\"opacity\", 0.5));\n    //   // .attr(\"font-size\", fontSize*.8)); //replace class \"x-axis\" w xAxis\n    //\n    //--drag behavior--//\n\n    const dragged = drag() // .on(\"start\", e => {\n    //   select(this).attr(\"stroke\", \"black\");\n    // })\n    .on(\"drag\", e => {\n      //todo (round new position to .01)\n      const dx = generateScales(scales[e.subject.scale]).xInverseDrag(e.dx); // const dx = xScales.scaleInverse\n\n      const dy = yScaleInverseDrag(e.dy);\n      const newInstants = [...data]; //always make a copy when updating array\n      //find array element in data with matching ID and set new x y coordinates\n\n      newInstants.find(n => n.id === e.subject.id).x += dx;\n      newInstants.find(n => n.id === e.subject.id).y += dy;\n      setData(newInstants);\n    }); //---draw links---//\n\n    const linker = linkHorizontal().source(link => link.source).target(link => link.target) // .x(n => generateScales(scales[n.scale]).x(logic ? logicScale(n.x) : n.x))\n    .x(d => xScales.find(n => n.name === d.scale).scale(d.x)).y(d => yScale(d.y));\n    svg.selectAll(\".link\").data(links).join(\"path\").raise().attr(\"class\", \"link pointer\").attr(\"d\", linker).attr(\"fill\", \"none\").attr(\"stroke\", n => n.color ? n.color : \"black\").attr(\"stroke-width\", n => n.width ? n.width : radius / 3).attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1).attr(\"stroke-dasharray\", n => n.dashed ? n.dashed : null).on(\"click\", (e, target) => {\n      if (toggle === \"connection\") {\n        const newOrder = [...syntacticOrder];\n\n        if (newOrder[2] === 0) {\n          //set 2nd selection\n          newOrder[1] = {\n            x: generateScales(scales[activeScale]).xInverse(e.layerX),\n            y: yScaleInverse(e.layerY),\n            scale: activeScale\n          }; //scale TODO\n\n          newOrder[2] = 1;\n        } else {\n          //set 1st selection\n          newOrder[0] = {\n            x: generateScales(scales[activeScale]).xInverse(e.layerX),\n            y: yScaleInverse(e.layerY),\n            scale: activeScale\n          };\n          newOrder[2] = 0;\n        }\n\n        setSyntacticOrder(newOrder);\n      } //else if (toggle===\"foreshadowing\") {\n      //   if (!target.target) { //if target is an endpoint, indeterminate end\n      //\n      //\n      //   } else { //otherwise, change mouse to no symbol\n      //\n      //   }\n      //   //option to adjust gradient eventually\n      // } else\n      else if (toggle === \"certainty\" || toggle === \"importance\") {\n          setInflectTarget(target);\n        } else {\n          console.log(e);\n          setInfo({\n            position: [e.x, e.y],\n            target: target,\n            type: \"link\"\n          }); //displays interval properties when clicked\n        }\n\n      e.stopPropagation();\n    }); //---draw instants---//\n\n    svg.selectAll(\".instant\").data(activeData.filter(d => !d.foreshadowing && !d.cancelled)).join(\"circle\").raise().attr(\"class\", \"instant pointer\").attr(\"r\", n => n.radius ? n.radius : radius) //todo for accessibility\n    .attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n    .attr(\"opacity\", d => d.opacity ? d.opacity : 1) // .attr(\"cx\", d => generateScales(scales[d.scale]).x(logic ? logicScale(d.x) : d.x))\n    .attr(\"cx\", d => xScales.find(n => n.name === d.scale).scale(d.x)) //todo\n    .attr(\"cy\", d => yScale(d.y)).call(dragged).on(\"click\", (e, target) => {\n      switch (toggle) {\n        case \"cancelled\":\n          const newInstants = [...data];\n          const instant = newInstants.find(n => n.id === target.id);\n          instant.cancelled = true;\n          setData(newInstants);\n          break;\n\n        case \"connection\":\n          const newOrder = [...syntacticOrder];\n\n          if (newOrder[2] === 0) {\n            //set 2nd selection\n            newOrder[1] = target;\n            newOrder[2] = 1;\n          } else {\n            //set 1st selection\n            newOrder[0] = target;\n            newOrder[2] = 0;\n          }\n\n          setSyntacticOrder(newOrder);\n          break;\n\n        case \"foreshadowing\":\n          if (!target.target) {\n            //if target is an endpoint, indeterminate end\n            const newInstants = [...data];\n            const instant = newInstants.find(n => n.id === target.id);\n            instant.foreshadowing = true;\n            setData(newInstants);\n          } else {\n            //otherwise, change mouse to no symbol\n            console.log(\"forbidden\");\n          }\n\n          break;\n\n        case \"certainty\":\n          setInflectTarget(target);\n          break;\n\n        case \"importance\":\n          setInflectTarget(target);\n          break;\n\n        default:\n          setInfo({\n            position: [e.x, e.y],\n            target: target\n          });\n        //displays instant properties when clicked\n      } // if (toggle===\"cancelled\") {\n      //   const newInstants = [...data];\n      //   const instant = newInstants.find(n => n.id === target.id);\n      //   instant.cancelled = true;\n      //   setData(newInstants);\n      // } else if (){\n      //\n      // } else if (toggle===\"connection\") {\n      //   const newOrder = [...syntacticOrder];\n      //   if (newOrder[2]===0) { //set 2nd selection\n      //     newOrder[1] = target;\n      //     newOrder[2] = 1;\n      //   } else { //set 1st selection\n      //     newOrder[0] = target;\n      //     newOrder[2] = 0;\n      //   }\n      //   setSyntacticOrder(newOrder);\n      // } else if (toggle===\"foreshadowing\") { //todo: adjust gradient\n      //   if (!target.target) { //if target is an endpoint, indeterminate end\n      //     const newInstants = [...data];\n      //     const instant = newInstants.find(n => n.id === target.id);\n      //     instant.foreshadowing = true;\n      //     setData(newInstants);\n      //   } else { //otherwise, change mouse to no symbol\n      //     console.log(\"forbidden\");\n      //   }\n      // } else if (toggle===\"certainty\" || toggle===\"importance\"){\n      //   setInflectTarget(target);\n      // } else {\n      //   setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n      // }\n\n\n      e.stopPropagation(); //stops deselect when bg is clicked\n    }); //---draw inflections---//\n    //--draw connetion inflection--//\n    //circle around instant\n\n    svg.selectAll(\".connections\").data(activeData.filter(d => d.connections)).join(\"circle\").raise().attr(\"class\", \"connections pointer\").attr(\"r\", n => n.radius ? n.radius * 1.5 : radius * 2) //todo for accessibility\n    .attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-dasharray\", \"3\") // .attr(\"opacity\", d => d.opacity ? d.opacity : 1)\n    .attr(\"cx\", d => xScales.find(n => n.name === d.scale).scale(d.x)) //todo\n    .attr(\"cy\", d => yScale(d.y)); //link connecting circles\n\n    const ctLinker = linkHorizontal().source(instant => data.find(x => x.id === instant.id)).target(instant => typeof instant.connections[0] === \"object\" ? instant.connections[0] : data.find(x => x.id === instant.connections[0])) // .target(() => {\n    //   //layerX, layerY\n    //   const y = yScaleInverse(499);\n    //   const x = xScales.find(n => n.name === \"biggie\").scaleInverse(778)\n    //   return {x: x, y: y}\n    // })\n    // .target(instant => data.find(x => x.id === instant.connections[0]))\n    .x(d => d.scale ? xScales.find(n => n.name === d.scale).scale(d.x) : d.x).y(d => d.scale ? yScale(d.y) : d.y);\n    svg.selectAll(\".connectionLinks\").data(activeData.filter(n => n.connections && !n.connections[1])) //link starts from 1st one\n    .join(\"path\").raise().attr(\"class\", \"connectionLinks pointer\").attr(\"d\", ctLinker).attr(\"fill\", \"none\").attr(\"stroke\", \"black\") // .attr(\"stroke\", n => n.color? n.color : \"black\")\n    // .attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1)\n    .attr(\"stroke-dasharray\", \"3\"); //initialize custom symbols\n\n    const cancelledSymbol = {\n      draw: (context, size) => {\n        let s = Math.sqrt(size) / 2;\n        context.moveTo(s, 0);\n        context.lineTo(s * 2, s);\n        context.lineTo(s, s * 2);\n        context.lineTo(0, s);\n        context.lineTo(-s, s * 2);\n        context.lineTo(-s * 2, s);\n        context.lineTo(-s, 0);\n        context.lineTo(-s * 2, -s);\n        context.lineTo(-s, -s * 2);\n        context.lineTo(0, -s);\n        context.lineTo(s, -s * 2);\n        context.lineTo(s * 2, -s);\n        context.closePath();\n      }\n    }; //foreshadowing symbol\n\n    const fsSymbol = {\n      draw: (context, size) => {\n        let s = size;\n        context.moveTo(0, 0);\n        context.lineTo(s * 2, s / 2);\n        context.lineTo(s * 2, -s / 2);\n        context.closePath();\n      }\n    }; //foreshadowing gradient\n\n    var fsg = svg.append(\"defs\").append(\"linearGradient\").attr(\"id\", \"fsgradient\") //id of the gradient\n    .attr(\"x1\", \"0%\").attr(\"x2\", \"100%\") //since its a horizontal linear gradient\n    .attr(\"y1\", \"0%\").attr(\"y2\", \"0%\");\n    fsg.append(\"stop\").attr(\"offset\", \"0%\").style(\"stop-color\", \"black\") //start in black. TODO\n    .style(\"stop-opacity\", 1);\n    fsg.append(\"stop\").attr(\"offset\", \"100%\").style(\"stop-color\", \"black\") //end in transparent\n    .style(\"stop-opacity\", 0); //---draw symbols---//\n    //todo: doesn't work when cancelled is true from the start\n\n    svg.selectAll(\".cancelled\").data(activeData.filter(d => d.cancelled)).join(\"path\").raise().attr(\"class\", \"cancelled pointer\").attr(\"d\", symbol(cancelledSymbol, radius * radius * 5)).attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n    .attr(\"transform\", d => `translate(${xScales.find(n => n.name === d.scale).scale(d.x)}, ${yScale(d.y)})`).on(\"click\", (e, target) => {\n      if (toggle === \"cancelled\") {\n        const newInstants = [...data];\n        const instant = newInstants.find(n => n.id === target.id);\n        delete instant.cancelled;\n        setData(newInstants);\n      } else {\n        setInfo({\n          position: [e.x, e.y],\n          target: target\n        }); //displays instant properties when clicked\n      }\n\n      e.stopPropagation();\n    }); //---draw foreshadowing---//\n\n    svg.selectAll(\".foreshadowing\").data(activeData.filter(d => d.foreshadowing)).join(\"path\").raise().attr(\"class\", \"foreshadowing pointer\").attr(\"d\", symbol(fsSymbol, radius * radius * 5)).style(\"fill\", \"url(#fsgradient)\").attr(\"transform\", d => `translate(${xScales.find(n => n.name === d.scale).scale(d.x)}, ${yScale(d.y)})`).on(\"click\", (e, target) => {\n      if (toggle === \"foreshadowing\") {\n        const newInstants = [...data];\n        const instant = newInstants.find(n => n.id === target.id);\n        delete instant.foreshadowing;\n        setData(newInstants);\n      } else {\n        setInfo({\n          position: [e.x, e.y],\n          target: target\n        }); //displays instant properties when clicked\n      }\n\n      e.stopPropagation();\n    }); //---draw labels---//\n\n    svg.selectAll(\".label\").data(activeData).join(\"text\").raise().attr(\"class\", \"label\").text(instant => showLabel ? instant.name : instant.id).attr(\"x\", d => xScales.find(n => n.name === d.scale).scale(d.x)).attr(\"y\", d => yScale(d.y + (rangeY > breakpoint ? rangeY * .06 : breakpoint / 5))) //vertical offset. see scales\n    .attr(\"text-anchor\", \"middle\"); // .attr(\"font-size\", fontSize);\n    //---zoom---//\n\n    const zoomBehavior = zoom().scaleExtent([0.25, 5]) //can zoom 2x smaller and 5x bigger\n    .translateExtent([[-100, 0], [dimensions.width + 100, dimensions.height]]) //limits how far graph can pan\n    .on(\"zoom\", e => {\n      const zoomState = e.transform; //returns zoom transformations as an object\n\n      setCurrentZoomState(zoomState);\n    }); //regular clicking\n\n    svg.on(\"click\", e => {\n      if (toggle === \"addInstant\") {\n        const x = generateScales(scales[activeScale]).xInverse(e.layerX);\n        const y = yScaleInverse(e.layerY);\n        setInflectTarget({\n          x: x,\n          y: y\n        });\n        setToggle(\"NewInstantForm\");\n      }\n\n      setInfo(null);\n    });\n    svg.call(zoomBehavior);\n  }, [data, setData, zones, scales, toggle, activeLayer, activeData, dimensions, logic, currentZoomState, setInfo, radius, showLabel, syntacticOrder]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    className: \"svgWrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: \"graphic\",\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 664,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Graphic, \"/KiWkGO4xuCDaFbcDOaAf23vnZg=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = Graphic;\n;\nexport default Graphic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graphic\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js"],"names":["React","useState","useEffect","useRef","select","scaleLinear","scaleOrdinal","axisBottom","linkHorizontal","format","drag","zoom","min","max","symbol","symbols","useResizeObserver","generateLinks","Graphic","data","setData","activeLayer","zones","setZones","radius","info","setInfo","setInflectTarget","showLabel","toggle","setToggle","scales","setScales","syntacticOrder","setSyntacticOrder","activeScale","activeData","filter","d","layer","logic","isNaN","x","svgRef","wrapperRef","dimensions","currentZoomState","setCurrentZoomState","links","svg","current","selectAll","remove","logicScale","unknown","breakpoint","xMin","map","xMax","yMin","y","yMax","rangeX","rangeY","generateScales","currentScale","domain","range","width","height","xInverse","xInverseDrag","yInverse","xScales","Object","keys","key","thisScale","name","scale","yPos","units","scaleInverse","xSegments","segments","forEach","i","n","push","proportion","segment","newXScale","rescaleX","yScale","yScaleInverse","yScaleInverseDrag","length","join","attr","find","start","yStart","end","yEnd","opacity","color","importance","on","e","target","position","type","stopPropagation","ticks","append","style","call","raise","g","each","_","d3","xAxis","tickFormat","text","dragged","dx","subject","dy","newInstants","id","linker","source","link","dashed","newOrder","layerX","layerY","console","log","foreshadowing","cancelled","instant","connections","ctLinker","cancelledSymbol","draw","context","size","s","Math","sqrt","moveTo","lineTo","closePath","fsSymbol","fsg","zoomBehavior","scaleExtent","translateExtent","zoomState","transform"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, scaleOrdinal, axisBottom, linkHorizontal, format, drag, zoom, min, max, symbol, symbols } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport generateLinks from \"./generateLinks\";\n\nfunction Graphic({\n  data, setData,\n  activeLayer,\n  zones, setZones,\n  radius,\n  info, setInfo,\n  setInflectTarget,\n  showLabel,\n  toggle, setToggle,\n  scales, setScales,\n  syntacticOrder, setSyntacticOrder,\n  activeScale\n}) {\n\n  //all data is passed down from and synced to App.js\n  const activeData = activeLayer ? data.filter(d => d.layer === activeLayer) : data;\n\n  //is logical operators active?\n  const logic = isNaN(data[0].x); //Todo\n\n  //initialize reference object to pass to svg in React Dom\n  const svgRef = useRef();\n  //svg wrapped in div bc otherwise resize observer callback won't work\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState();\n\n  // //initialize links between instants\n  const links = generateLinks(activeData);\n\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n    if (!dimensions) return;\n    //removes svgs added using append()\n    svg\n      .selectAll(\".remove\")\n      .remove();\n\n    //initialize inflections for .selectAll\n    //add cancelled class\n\n    //---scales---//\n\n    //if time matches logical operator keyword, translate into index values, then map\n    const logicScale = scaleOrdinal([\"before\", \"now\", \"after\"], [-1, 0, 1]).unknown(0);\n\n    const breakpoint = 5;\n\n\n    const xMin = min(data.map(({x}) => logic ? logicScale(x) : x));\n    const xMax = max(data.map(({x}) => logic ? logicScale(x) : x));\n    const yMin = min(data.map(({y}) => y));\n    const yMax = max(data.map(({y}) => y));\n    const rangeX = xMax-xMin; //0 is minX, 1 is maxX (reference findMinMax)\n    const rangeY = yMax-yMin;\n\n\n    //TODO: scaleTime()\n\n    //for multiple scales, generate a new scale for each x/y min - x/y max\n    /*\n    - Allow users to specify scale. x&y min max and units\n    - for each scale, generateScale()\n\n    */\n\n    function generateScales(currentScale) {\n\n      const x = scaleLinear()\n        .domain([currentScale.min, currentScale.max]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n        .range([0, dimensions.width])\n      const y = scaleLinear()\n        //if difference in y vaules greater than 5, resize to min and max\n        .domain((rangeY>breakpoint) ? [yMin, yMax] : [yMin-breakpoint, yMax+breakpoint])\n        .range([0, dimensions.height])\n      const xInverse = scaleLinear()\n        .domain([0, dimensions.width])\n        .range([currentScale.min, currentScale.max]) //maxRangeX-minRangeX gives section of x values displayed onscreen\n      const xInverseDrag = scaleLinear()\n        .domain([-dimensions.width, dimensions.width])\n        .range([-(currentScale.max-currentScale.min), (currentScale.max-currentScale.min)]) //maxRangeX-minRangeX gives section of x values displayed onscreen\n      const yInverse = scaleLinear()\n        .domain([-dimensions.height, dimensions.height])\n        .range((rangeY>breakpoint) ? [-rangeY, rangeY] : [-breakpoint*5, breakpoint*5])\n\n\n      return {\n        x, y, xInverse, xInverseDrag, yInverse\n      };\n    }\n\n    //scales values to screen pixels\n    /*\n    {\n      biggie: {\n        ...\n        scale: generateScale()\n      }\n      ...\n    }\n    */\n    // const xScales = () => {\n    //   Object.keys(scales).forEach(key => { //for every scale in scales data, generate an xScale\n    //     // const thisScale = scales[key];\n    //     scales[key] = {...scales[key], scale:generateScales(scales[key]).x}\n    //   });\n    //   return scales;\n    // }\n\n\n\n    const xScales = Object.keys(scales).map(key => { //for every scale in scales data, generate an xScale\n      const thisScale = scales[key];\n      return ({\n        name: key,\n        scale: scaleLinear() //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n          .domain([thisScale.min, thisScale.max])\n          .range([0, dimensions.width]),\n        // segments: thisScale.segments.map(n => {\n        //   scaleLinear() //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n        //     .domain([thisScale.min, thisScale.max])\n        //     .range([0, dimensions.width])\n        // }),\n        yPos: thisScale.yPos,\n        units: thisScale.units,\n        scaleInverse: scaleLinear() //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n          .domain([-dimensions.width, dimensions.width])\n          .range([-(thisScale.max-thisScale.min), (thisScale.max-thisScale.min)])\n      })\n    });\n\n    // const xSegments = Object.keys(scales).map((key, i) => {\n    //   const thisScale = scales[key];\n    //   const segments = [];\n    //   if (!thisScale.segments) {\n    //     return;\n    //   }\n    //   thisScale.segments.map(n => {\n    //     const min = n.min?n.min:thisScale.min; //if segment contains a min, set that as min. otherwise, set scale min as min.\n    //     const max = n.max?n.max:thisScale.max;\n    //     // console.log(xScales[i].scale(min));\n    //     segments.push(\n    //       {\n    //         scale: key,\n    //         yPos: thisScale.yPos,\n    //         segment: scaleLinear()\n    //         .domain([min, max])\n    //         .range([xScales[i].scale(min), xScales[i].scale(max)])\n    //       }\n    //     )\n    //   })\n    //   return segments;\n    // });\n\n    const xSegments = () => {\n      const segments = [];\n      Object.keys(scales).forEach((key, i) => {\n        const thisScale = scales[key];\n        // const segments = [];\n        if (!thisScale.segments) {\n          return;\n        }\n        thisScale.segments.map(n => {\n          const min = n.min?n.min:thisScale.min; //if segment contains a min, set that as min. otherwise, set scale min as min.\n          const max = n.max?n.max:thisScale.max;\n          // console.log(xScales[i].scale(min));\n          segments.push({\n            scale: key,\n            yPos: thisScale.yPos,\n            proportion: (max-min)/(thisScale.max-thisScale.min),\n            segment: scaleLinear()\n            .domain([min, max])\n            .range([xScales[i].scale(min), xScales[i].scale(max)])\n          })\n        })\n      });\n      return segments;\n    }\n\n\n    /*\n      xScales(generateScales(scaleLinear(scale)))\n      - take xScale and rescale according to transformations (newXScale)\n      - update each array entry's domain with that of newXScale\n    */\n    //if there is a zoom transform, override each xScales.scale with adjusted scale\n    if (currentZoomState) {\n      xScales.forEach((thisScale, i) => {\n        const newXScale = currentZoomState.rescaleX(thisScale.scale); //zoom state comes w methods for transformations\n        // const newXSegments = currentZoomState\n        xScales[i].scale = newXScale; //sets domain to newXScale domain\n\n      });\n\n\n    };\n    // const xScale = scaleLinear()\n    //   .domain([xMin, xMax]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n    //   .range([0, dimensions.width]);\n    const yScale = scaleLinear()\n      //if difference in y vaules greater than 5, resize to min and max\n      .domain((rangeY>breakpoint) ? [yMin, yMax] : [yMin-breakpoint, yMax+breakpoint])\n      .range([0, dimensions.height]);\n    //inverse scales for drag behavior\n    // const xScaleInverse = scaleLinear()\n    //   .domain([-dimensions.width, dimensions.width])\n    //   .range([-rangeX, rangeX]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n    const yScaleInverse = scaleLinear()\n      .domain([-0, dimensions.height])\n      .range((rangeY>breakpoint) ? [yMin, yMax] : [yMin-breakpoint, yMax+breakpoint]);\n    const yScaleInverseDrag = scaleLinear()\n      .domain([-dimensions.height, dimensions.height])\n      .range((rangeY>breakpoint) ? [-rangeY, rangeY] : [-breakpoint*5, breakpoint*5]);\n\n\n\n\n\n    //---draw zones---//\n    if (zones.length) {\n      svg\n      .selectAll(\".zones\")\n      .data(zones)\n      .join(\"rect\")\n      .attr(\"class\", \"zones\")\n      .attr(\"x\", d => xScales.find(n => n.name === d.scale).scale(d.start))\n      // .attr(\"x\", n => generateScales(scales[n.scale]).x(n.start))\n      // .attr(\"y\", n => n.yStart ? yScale(n.yStart) : yScale(minMax[2]))\n      .attr(\"y\", n => n.yStart ? yScale(n.yStart) : 0) //todo\n      .attr(\"width\", d => xScales.find(n => n.name === d.scale).scale(d.end) - xScales.find(n => n.name === d.scale).scale(d.start))\n      .attr(\"height\", n => {\n        if (n.yStart & n.yEnd) {\n          return (yScale(n.yEnd)-yScale(n.yStart))\n        } else if (n.yStart) {\n          return (yScale(yMax+10)-yScale(n.yStart))\n        } else {\n          return (yScale(yMax+10)) //todo\n          // return (yScale(minMax[3])-yScale(minMax[2]))\n        }})\n      .attr(\"opacity\", n => n.opacity ? n.opacity : 0.5)\n      .attr(\"fill\", n => n.color ? n.color : \"#999\")\n      .attr(\"stroke\", \"black\") //todo\n      .attr(\"stroke-width\", n => n.importance ? n.importance*2 : 0)\n      .on(\"click\", (e, target) => {\n        //displays zone properties when clicked\n        if (toggle===\"certainty\" || toggle===\"importance\") {\n          setInflectTarget(target);\n        } else {\n          setInfo({position: [e.x, e.y], target: target, type: \"zone\"});  //todo: set info to null when clicking again\n        }\n        e.stopPropagation();\n      });\n    }\n\n    //---draw bottom axis---//\n\n    xSegments().forEach(n => {\n      const segment = axisBottom(n.segment)\n      // .ticks(n.proportion<.33?5:null, \"f\");\n      .ticks(null, \"f\");\n\n      svg\n        .append(\"g\") //todo\n        .attr(\"class\", \"remove\")\n        .style(\"transform\", `translateY(${dimensions.height*n.yPos}px)`)\n        .call(segment)\n        .raise()\n        .call(g => g.select(\".domain\") //removes solid black axis bar\n          .remove())\n        .call(g => g.selectAll(\".tick line\") //styles individual ticks\n          .attr(\"stroke-opacity\", 0.5))\n        .call(g => g.selectAll(\".tick text\")\n          .each((_, i) => d3.select(this).remove())\n          .attr(\"y\", 10) //todo?\n          .attr(\"opacity\", 0.5)\n        );\n    });\n\n    xScales.forEach(thisScale => {\n      const xAxis = axisBottom(thisScale.scale)\n      .tickFormat(format(''));\n\n      svg\n        .append(\"g\") //todo\n        .attr(\"class\", \"remove\")\n        .style(\"transform\", `translateY(${dimensions.height*thisScale.yPos}px)`)\n        .call(xAxis)\n        .raise()\n        .call(g => g.select(\".domain\") //removes solid black axis bar\n          .remove())\n        .call(g => g.selectAll(\".tick line\") //styles individual ticks\n          .attr(\"stroke-opacity\", 0))\n        .call(g => g.selectAll(\".tick text\")\n          .attr(\"y\", 10) //todo?\n          .attr(\"opacity\", 0));\n      svg\n        .append(\"text\")\n        .text(thisScale.units)\n        .attr(\"class\", \"axisLabel smallTxt remove\")\n        .attr(\"x\", dimensions.width/2)\n        .attr(\"y\", dimensions.height*(thisScale.yPos+.07))\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"opacity\", 0.5);\n      }\n    );\n\n\n    // const xAxis = axisBottom(generateScales(scales.smalls).x)\n    //   // .tickSize(-dimensions.height) //tick extends to entire height of svg\n    //   .tickValues(logic ? [-1, 0, 1] : null)\n    //   .tickFormat(logic ? x => scaleOrdinal([-1, 0, 1], [\"before\", \"now\", \"after\"])(x) : format('')); //gets rid of , for 1000s groupings\n\n    // svg\n    //   .select(\".x-axis\") //selects and replaces .x-axis\n    //   .style(\"transform\", `translateY(${dimensions.height}px)`)\n    //   .call(xAxis)\n    //   .raise()\n      // .call(g => g.select(\".domain\") //removes solid black axis bar\n      //   .remove())\n      // .call(g => g.selectAll(\".tick line\") //styles individual ticks\n      //   .attr(\"stroke-opacity\", 0.5))\n      //   // .attr(\"stroke-dasharray\", \"2,2\"))\n      // .call(g => g.selectAll(\".tick text\")\n      //   .attr(\"y\", 10) //todo?\n      //   .attr(\"opacity\", 0.5));\n      //   // .attr(\"font-size\", fontSize*.8)); //replace class \"x-axis\" w xAxis\n    //\n\n    //--drag behavior--//\n    const dragged = drag()\n      // .on(\"start\", e => {\n      //   select(this).attr(\"stroke\", \"black\");\n      // })\n      .on(\"drag\", e => {\n        //todo (round new position to .01)\n        const dx = generateScales(scales[e.subject.scale]).xInverseDrag(e.dx);\n        // const dx = xScales.scaleInverse\n        const dy = yScaleInverseDrag(e.dy);\n        const newInstants = [...data]; //always make a copy when updating array\n        //find array element in data with matching ID and set new x y coordinates\n        newInstants.find(n => n.id === e.subject.id).x += dx;\n        newInstants.find(n => n.id === e.subject.id).y += dy;\n        setData(newInstants);\n      });\n\n    //---draw links---//\n    const linker = linkHorizontal()\n      .source(link => link.source)\n      .target(link => link.target)\n      // .x(n => generateScales(scales[n.scale]).x(logic ? logicScale(n.x) : n.x))\n      .x(d => xScales.find(n => n.name === d.scale).scale(d.x))\n      .y(d => yScale(d.y));\n\n    svg\n      .selectAll(\".link\")\n      .data(links)\n      .join(\"path\")\n      .raise()\n      .attr(\"class\", \"link pointer\")\n      .attr(\"d\", linker)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", n => n.color? n.color : \"black\")\n      .attr(\"stroke-width\", n => n.width ? n.width : radius/3)\n      .attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1)\n      .attr(\"stroke-dasharray\", n => n.dashed ? n.dashed : null)\n      .on(\"click\", (e, target) => {\n        if (toggle===\"connection\") {\n          const newOrder = [...syntacticOrder];\n          if (newOrder[2]===0) { //set 2nd selection\n            newOrder[1] = {x:generateScales(scales[activeScale]).xInverse(e.layerX), y:yScaleInverse(e.layerY), scale:activeScale}; //scale TODO\n            newOrder[2] = 1;\n          } else { //set 1st selection\n            newOrder[0] = {x:generateScales(scales[activeScale]).xInverse(e.layerX), y:yScaleInverse(e.layerY), scale:activeScale};\n            newOrder[2] = 0;\n          }\n          setSyntacticOrder(newOrder);\n        }\n        //else if (toggle===\"foreshadowing\") {\n        //   if (!target.target) { //if target is an endpoint, indeterminate end\n        //\n        //\n        //   } else { //otherwise, change mouse to no symbol\n        //\n        //   }\n        //   //option to adjust gradient eventually\n        // } else\n        else if (toggle===\"certainty\" || toggle===\"importance\") {\n          setInflectTarget(target);\n        } else {\n          console.log(e)\n          setInfo({position: [e.x, e.y], target: target, type: \"link\"}); //displays interval properties when clicked\n        }\n        e.stopPropagation();\n      });\n\n\n    //---draw instants---//\n    svg\n      .selectAll(\".instant\")\n      .data(activeData.filter(d => !d.foreshadowing && !d.cancelled))\n      .join(\"circle\")\n      .raise()\n      .attr(\"class\", \"instant pointer\")\n      .attr(\"r\", n => n.radius? n.radius : radius) //todo for accessibility\n      .attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n      .attr(\"opacity\", d => d.opacity ? d.opacity : 1)\n      // .attr(\"cx\", d => generateScales(scales[d.scale]).x(logic ? logicScale(d.x) : d.x))\n      .attr(\"cx\", d => xScales.find(n => n.name === d.scale).scale(d.x)) //todo\n      .attr(\"cy\", d => yScale(d.y))\n      .call(dragged)\n      .on(\"click\", (e, target) => {\n        switch (toggle) {\n          case \"cancelled\":\n            const newInstants = [...data];\n            const instant = newInstants.find(n => n.id === target.id);\n            instant.cancelled = true;\n            setData(newInstants);\n            break;\n          case \"connection\":\n            const newOrder = [...syntacticOrder];\n            if (newOrder[2]===0) { //set 2nd selection\n              newOrder[1] = target;\n              newOrder[2] = 1;\n            } else { //set 1st selection\n              newOrder[0] = target;\n              newOrder[2] = 0;\n            }\n            setSyntacticOrder(newOrder);\n            break;\n          case \"foreshadowing\":\n            if (!target.target) { //if target is an endpoint, indeterminate end\n              const newInstants = [...data];\n              const instant = newInstants.find(n => n.id === target.id);\n              instant.foreshadowing = true;\n              setData(newInstants);\n            } else { //otherwise, change mouse to no symbol\n              console.log(\"forbidden\");\n            }\n            break;\n          case \"certainty\":\n            setInflectTarget(target);\n            break;\n          case \"importance\":\n            setInflectTarget(target);\n            break;\n          default:\n            setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n        }\n        // if (toggle===\"cancelled\") {\n        //   const newInstants = [...data];\n        //   const instant = newInstants.find(n => n.id === target.id);\n        //   instant.cancelled = true;\n        //   setData(newInstants);\n        // } else if (){\n        //\n        // } else if (toggle===\"connection\") {\n        //   const newOrder = [...syntacticOrder];\n        //   if (newOrder[2]===0) { //set 2nd selection\n        //     newOrder[1] = target;\n        //     newOrder[2] = 1;\n        //   } else { //set 1st selection\n        //     newOrder[0] = target;\n        //     newOrder[2] = 0;\n        //   }\n        //   setSyntacticOrder(newOrder);\n        // } else if (toggle===\"foreshadowing\") { //todo: adjust gradient\n        //   if (!target.target) { //if target is an endpoint, indeterminate end\n        //     const newInstants = [...data];\n        //     const instant = newInstants.find(n => n.id === target.id);\n        //     instant.foreshadowing = true;\n        //     setData(newInstants);\n        //   } else { //otherwise, change mouse to no symbol\n        //     console.log(\"forbidden\");\n        //   }\n        // } else if (toggle===\"certainty\" || toggle===\"importance\"){\n        //   setInflectTarget(target);\n        // } else {\n        //   setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n        // }\n        e.stopPropagation(); //stops deselect when bg is clicked\n      });\n\n    //---draw inflections---//\n\n    //--draw connetion inflection--//\n    //circle around instant\n    svg\n      .selectAll(\".connections\")\n      .data(activeData.filter(d => d.connections))\n      .join(\"circle\")\n      .raise()\n      .attr(\"class\", \"connections pointer\")\n      .attr(\"r\", n => n.radius? n.radius*1.5 : radius*2) //todo for accessibility\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-dasharray\", \"3\")\n      // .attr(\"opacity\", d => d.opacity ? d.opacity : 1)\n      .attr(\"cx\", d => xScales.find(n => n.name === d.scale).scale(d.x)) //todo\n      .attr(\"cy\", d => yScale(d.y));\n\n    //link connecting circles\n    const ctLinker = linkHorizontal()\n      .source(instant => data.find(x => x.id === instant.id))\n      .target(instant => typeof(instant.connections[0])===\"object\" ? instant.connections[0] : data.find(x => x.id === instant.connections[0]))\n      // .target(() => {\n      //   //layerX, layerY\n      //   const y = yScaleInverse(499);\n      //   const x = xScales.find(n => n.name === \"biggie\").scaleInverse(778)\n      //   return {x: x, y: y}\n      // })\n      // .target(instant => data.find(x => x.id === instant.connections[0]))\n      .x(d => d.scale ? xScales.find(n => n.name === d.scale).scale(d.x) : d.x)\n      .y(d => d.scale ? yScale(d.y) : d.y);\n    svg\n      .selectAll(\".connectionLinks\")\n      .data(activeData.filter(n => n.connections && !n.connections[1])) //link starts from 1st one\n      .join(\"path\")\n      .raise()\n      .attr(\"class\", \"connectionLinks pointer\")\n      .attr(\"d\", ctLinker)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"black\")\n      // .attr(\"stroke\", n => n.color? n.color : \"black\")\n      // .attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1)\n      .attr(\"stroke-dasharray\", \"3\")\n\n    //initialize custom symbols\n    const cancelledSymbol = {\n      draw: (context, size) => {\n        let s = Math.sqrt(size)/2;\n            context.moveTo(s,0);\n            context.lineTo(s*2,s);\n            context.lineTo(s,s*2);\n            context.lineTo(0,s);\n            context.lineTo(-s,s*2);\n            context.lineTo(-s*2,s);\n            context.lineTo(-s,0);\n            context.lineTo(-s*2,-s);\n            context.lineTo(-s,-s*2);\n            context.lineTo(0,-s);\n            context.lineTo(s,-s*2);\n            context.lineTo(s*2,-s);\n            context.closePath();\n      }\n    };\n    //foreshadowing symbol\n    const fsSymbol = {\n      draw: (context, size) => {\n        let s = size;\n            context.moveTo(0,0);\n            context.lineTo(s*2,s/2);\n            context.lineTo(s*2,-s/2);\n            context.closePath();\n      }\n    };\n    //foreshadowing gradient\n    var fsg = svg.append(\"defs\").append(\"linearGradient\")\n    .attr(\"id\", \"fsgradient\")//id of the gradient\n    .attr(\"x1\", \"0%\")\n    .attr(\"x2\", \"100%\") //since its a horizontal linear gradient\n    .attr(\"y1\", \"0%\")\n    .attr(\"y2\", \"0%\");\n\n    fsg.append(\"stop\")\n    .attr(\"offset\", \"0%\")\n    .style(\"stop-color\", \"black\")//start in black. TODO\n    .style(\"stop-opacity\", 1);\n\n    fsg.append(\"stop\")\n    .attr(\"offset\", \"100%\")\n    .style(\"stop-color\", \"black\")//end in transparent\n    .style(\"stop-opacity\", 0);\n\n    //---draw symbols---//\n    //todo: doesn't work when cancelled is true from the start\n    svg\n      .selectAll(\".cancelled\")\n      .data(activeData.filter(d => d.cancelled))\n      .join(\"path\")\n      .raise()\n      .attr(\"class\", \"cancelled pointer\")\n      .attr(\"d\", symbol(cancelledSymbol, radius*radius*5))\n      .attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n      .attr(\"transform\", d => `translate(${xScales.find(n => n.name === d.scale).scale(d.x)}, ${yScale(d.y)})`)\n      .on(\"click\", (e, target) => {\n        if (toggle===\"cancelled\") {\n          const newInstants = [...data];\n          const instant = newInstants.find(n => n.id === target.id);\n          delete instant.cancelled;\n          setData(newInstants);\n        } else {\n          setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n        }\n        e.stopPropagation();\n      });\n\n    //---draw foreshadowing---//\n    svg\n      .selectAll(\".foreshadowing\")\n      .data(activeData.filter(d => d.foreshadowing))\n      .join(\"path\")\n      .raise()\n      .attr(\"class\", \"foreshadowing pointer\")\n      .attr(\"d\", symbol(fsSymbol, radius*radius*5))\n      .style(\"fill\", \"url(#fsgradient)\")\n      .attr(\"transform\", d => `translate(${xScales.find(n => n.name === d.scale).scale(d.x)}, ${yScale(d.y)})`)\n      .on(\"click\", (e, target) => {\n        if (toggle===\"foreshadowing\") {\n          const newInstants = [...data];\n          const instant = newInstants.find(n => n.id === target.id);\n          delete instant.foreshadowing;\n          setData(newInstants);\n        } else {\n          setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n        }\n        e.stopPropagation();\n      });\n\n    //---draw labels---//\n    svg\n      .selectAll(\".label\")\n      .data(activeData)\n      .join(\"text\")\n      .raise()\n      .attr(\"class\", \"label\")\n      .text(instant => showLabel ? instant.name : instant.id)\n      .attr(\"x\", d => xScales.find(n => n.name === d.scale).scale(d.x))\n      .attr(\"y\", d => yScale(d.y + (rangeY>breakpoint ? rangeY*.06 : breakpoint/5))) //vertical offset. see scales\n      .attr(\"text-anchor\", \"middle\");\n      // .attr(\"font-size\", fontSize);\n\n\n    //---zoom---//\n    const zoomBehavior = zoom()\n      .scaleExtent([0.25, 5]) //can zoom 2x smaller and 5x bigger\n      .translateExtent([[-100, 0], [dimensions.width+100, dimensions.height]]) //limits how far graph can pan\n      .on(\"zoom\", e => {\n        const zoomState = e.transform; //returns zoom transformations as an object\n        setCurrentZoomState(zoomState);\n      });\n\n    //regular clicking\n    svg.on(\"click\", (e) => {\n      if (toggle===\"addInstant\") {\n        const x = generateScales(scales[activeScale]).xInverse(e.layerX);\n        const y = yScaleInverse(e.layerY);\n        setInflectTarget({x: x, y: y});\n        setToggle(\"NewInstantForm\");\n      }\n      setInfo(null)\n    });\n    svg.call(zoomBehavior);\n\n  }, [data, setData, zones, scales, toggle, activeLayer, activeData, dimensions, logic, currentZoomState, setInfo, radius, showLabel, syntacticOrder]);\n\n  return (\n    <div ref={wrapperRef} className=\"svgWrapper\">\n      <svg id=\"graphic\" ref={svgRef}>\n      </svg>\n    </div>\n  );\n};\n\n\nexport default Graphic;\n"]},"metadata":{},"sourceType":"module"}