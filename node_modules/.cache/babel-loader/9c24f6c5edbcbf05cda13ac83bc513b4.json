{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, scaleOrdinal, axisBottom, linkHorizontal, format, drag, zoom, min, max, symbol, symbols } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport generateLinks from \"./generateLinks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Graphic({\n  data,\n  setData,\n  activeLayer,\n  intervals,\n  setIntervals,\n  radius,\n  info,\n  setInfo,\n  setInflectTarget,\n  showLabel,\n  toggle,\n  scales,\n  setScales,\n  syntacticOrder,\n  setSyntacticOrder\n}) {\n  _s();\n\n  //all data is passed down from and synced to App.js\n  const activeData = activeLayer ? data.filter(d => d.layer === activeLayer) : data; //is logical operators active?\n\n  const logic = isNaN(data[0].x); //Todo\n  //initialize reference object to pass to svg in React Dom\n\n  const svgRef = useRef(); //svg wrapped in div bc otherwise resize observer callback won't work\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState(); // //initialize links between nodes\n\n  const links = generateLinks(activeData); //all d3 shennanigans goes in this hook. called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n\n    if (!dimensions) return; //removes svgs added using append()\n\n    svg.selectAll(\".remove\").remove(); //initialize inflections for .selectAll\n    //add cancelled class\n    //---scales---//\n    //if time matches logical operator keyword, translate into index values, then map\n\n    const logicScale = scaleOrdinal([\"before\", \"now\", \"after\"], [-1, 0, 1]).unknown(0);\n    const breakpoint = 5;\n    const xMin = min(data.map(({\n      x\n    }) => logic ? logicScale(x) : x));\n    const xMax = max(data.map(({\n      x\n    }) => logic ? logicScale(x) : x));\n    const yMin = min(data.map(({\n      y\n    }) => y));\n    const yMax = max(data.map(({\n      y\n    }) => y));\n    const rangeX = xMax - xMin; //0 is minX, 1 is maxX (reference findMinMax)\n\n    const rangeY = yMax - yMin; //TODO: scaleTime()\n    //for multiple scales, generate a new scale for each x/y min - x/y max\n\n    /*\n    - Allow users to specify scale. x&y min max and units\n    - for each scale, generateScale()\n     */\n\n    function generateScales(currentScale) {\n      const x = scaleLinear().domain([currentScale.min, currentScale.max]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n      .range([0, dimensions.width]);\n      const y = scaleLinear() //if difference in y vaules greater than 5, resize to min and max\n      .domain(rangeY > breakpoint ? [yMin, yMax] : [yMin - breakpoint, yMax + breakpoint]).range([0, dimensions.height]);\n      const xInverse = scaleLinear().domain([-dimensions.width, dimensions.width]).range([-(currentScale.max - currentScale.min), currentScale.max - currentScale.min]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n\n      const yInverse = scaleLinear().domain([-dimensions.height, dimensions.height]).range(rangeY > breakpoint ? [-rangeY, rangeY] : [-breakpoint * 5, breakpoint * 5]);\n      return {\n        x,\n        y,\n        xInverse,\n        yInverse\n      };\n    } //scales values to screen pixels\n\n    /*\n    {\n      biggie: {\n        ...\n        scale: generateScale()\n      }\n      ...\n    }\n    */\n    // const xScales = () => {\n    //   Object.keys(scales).forEach(key => { //for every scale in scales data, generate an xScale\n    //     // const thisScale = scales[key];\n    //     scales[key] = {...scales[key], scale:generateScales(scales[key]).x}\n    //   });\n    //   return scales;\n    // }\n\n\n    const xScales = Object.keys(scales).map(key => {\n      //for every scale in scales data, generate an xScale\n      const thisScale = scales[key];\n      return {\n        name: key,\n        scale: scaleLinear() //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n        .domain([thisScale.min, thisScale.max]).range([0, dimensions.width]),\n        yPos: thisScale.yPos,\n        units: thisScale.units,\n        scaleInverse: scaleLinear() //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n        .domain([-dimensions.width, dimensions.width]).range([-(thisScale.max - thisScale.min), thisScale.max - thisScale.min])\n      };\n    });\n    /*\n      xScales(generateScales(scaleLinear(scale)))\n      - take xScale and rescale according to transformations (newXScale)\n      - update each array entry's domain with that of newXScale\n    */\n    //if there is a zoom transform, override each xScales.scale with adjusted scale\n\n    if (currentZoomState) {\n      xScales.forEach((thisScale, i) => {\n        const newXScale = currentZoomState.rescaleX(thisScale.scale); //zoom state comes w methods for transformations\n\n        xScales[i].scale = newXScale; //sets domain to newXScale domain\n      });\n    }\n\n    ; // const xScale = scaleLinear()\n    //   .domain([xMin, xMax]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n    //   .range([0, dimensions.width]);\n\n    const yScale = scaleLinear() //if difference in y vaules greater than 5, resize to min and max\n    .domain(rangeY > breakpoint ? [yMin, yMax] : [yMin - breakpoint, yMax + breakpoint]).range([0, dimensions.height]); //inverse scales for drag behavior\n    // const xScaleInverse = scaleLinear()\n    //   .domain([-dimensions.width, dimensions.width])\n    //   .range([-rangeX, rangeX]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n\n    const yScaleInverse = scaleLinear().domain([-dimensions.height, dimensions.height]).range(rangeY > breakpoint ? [-rangeY, rangeY] : [-breakpoint * 5, breakpoint * 5]); //---draw intervals---//\n\n    if (intervals.length) {\n      svg.selectAll(\".intervals\").data(intervals).join(\"rect\").attr(\"class\", \"intervals\").attr(\"x\", d => xScales.find(n => n.name === d.scale).scale(d.start)) // .attr(\"x\", n => generateScales(scales[n.scale]).x(n.start))\n      // .attr(\"y\", n => n.yStart ? yScale(n.yStart) : yScale(minMax[2]))\n      .attr(\"y\", n => n.yStart ? yScale(n.yStart) : 0) //todo\n      .attr(\"width\", d => xScales.find(n => n.name === d.scale).scale(d.end) - xScales.find(n => n.name === d.scale).scale(d.start)).attr(\"height\", n => {\n        if (n.yStart & n.yEnd) {\n          return yScale(n.yEnd) - yScale(n.yStart);\n        } else if (n.yStart) {\n          return yScale(yMax + 10) - yScale(n.yStart);\n        } else {\n          return yScale(yMax + 10); //todo\n          // return (yScale(minMax[3])-yScale(minMax[2]))\n        }\n      }).attr(\"opacity\", n => n.opacity ? n.opacity : 0.5).attr(\"fill\", n => n.color ? n.color : \"#999\").attr(\"stroke\", \"black\") //todo\n      .attr(\"stroke-width\", n => n.importance ? n.importance * 2 : 0).on(\"click\", (e, target) => {\n        //displays interval properties when clicked\n        if (toggle === \"certainty\" || toggle === \"importance\") {\n          setInflectTarget(target);\n        } else {\n          setInfo({\n            position: [e.x, e.y],\n            target: target,\n            type: \"interval\"\n          }); //todo: set info to null when clicking again\n        }\n\n        e.stopPropagation();\n      });\n    } //---draw bottom axis---//\n\n\n    xScales.forEach(thisScale => {\n      const xAxis = axisBottom(thisScale.scale).tickFormat(format(''));\n      svg.append(\"g\") //todo\n      .attr(\"class\", \"remove\").style(\"transform\", `translateY(${dimensions.height * thisScale.yPos}px)`).call(xAxis).raise().call(g => g.select(\".domain\") //removes solid black axis bar\n      .remove()).call(g => g.selectAll(\".tick line\") //styles individual ticks\n      .attr(\"stroke-opacity\", 0.5)).call(g => g.selectAll(\".tick text\").attr(\"y\", 10) //todo?\n      .attr(\"opacity\", 0.5));\n      svg.append(\"text\").text(thisScale.units).attr(\"class\", \"axisLabel smallTxt remove\").attr(\"x\", dimensions.width / 2).attr(\"y\", dimensions.height * (thisScale.yPos + .07)).attr(\"text-anchor\", \"middle\").attr(\"opacity\", 0.5);\n    }); // const xAxis = axisBottom(generateScales(scales.smalls).x)\n    //   // .tickSize(-dimensions.height) //tick extends to entire height of svg\n    //   .tickValues(logic ? [-1, 0, 1] : null)\n    //   .tickFormat(logic ? x => scaleOrdinal([-1, 0, 1], [\"before\", \"now\", \"after\"])(x) : format('')); //gets rid of , for 1000s groupings\n    // svg\n    //   .select(\".x-axis\") //selects and replaces .x-axis\n    //   .style(\"transform\", `translateY(${dimensions.height}px)`)\n    //   .call(xAxis)\n    //   .raise()\n    // .call(g => g.select(\".domain\") //removes solid black axis bar\n    //   .remove())\n    // .call(g => g.selectAll(\".tick line\") //styles individual ticks\n    //   .attr(\"stroke-opacity\", 0.5))\n    //   // .attr(\"stroke-dasharray\", \"2,2\"))\n    // .call(g => g.selectAll(\".tick text\")\n    //   .attr(\"y\", 10) //todo?\n    //   .attr(\"opacity\", 0.5));\n    //   // .attr(\"font-size\", fontSize*.8)); //replace class \"x-axis\" w xAxis\n    //\n    //--drag behavior--//\n\n    const dragged = drag() // .on(\"start\", e => {\n    //   select(this).attr(\"stroke\", \"black\");\n    // })\n    .on(\"drag\", e => {\n      //todo (round new position to .01)\n      // const dx = generateScales(scales[e.subject.scale]).xInverse(e.dx);\n      const dx = xScales.scaleInverse;\n      const dy = yScaleInverse(e.dy);\n      const newNodes = [...data]; //always make a copy when updating array\n      //find array element in data with matching ID and set new x y coordinates\n\n      newNodes.find(n => n.id === e.subject.id).x += dx;\n      newNodes.find(n => n.id === e.subject.id).y += dy;\n      setData(newNodes);\n    }); //---draw links---//\n\n    const linker = linkHorizontal().source(link => link.source).target(link => link.target) // .x(n => generateScales(scales[n.scale]).x(logic ? logicScale(n.x) : n.x))\n    .x(d => xScales.find(n => n.name === d.scale).scale(d.x)).y(d => yScale(d.y));\n    svg.selectAll(\".link\").data(links).join(\"path\").raise().attr(\"class\", \"link pointer\").attr(\"d\", linker).attr(\"fill\", \"none\").attr(\"stroke\", n => n.color ? n.color : \"black\").attr(\"stroke-width\", n => n.width ? n.width : radius / 3).attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1).attr(\"stroke-dasharray\", n => n.dashed ? n.dashed : null).on(\"click\", (e, target) => {\n      // if (toggle===\"causality\") {\n      //   //must select at least 2 temporal objects\n      //\n      // } else if (toggle===\"foreshadowing\") {\n      //   if (!target.target) { //if target is an endpoint, indeterminate end\n      //\n      //\n      //   } else { //otherwise, change mouse to no symbol\n      //\n      //   }\n      //   //option to adjust gradient eventually\n      // } else\n      if (toggle === \"certainty\" || toggle === \"importance\") {\n        setInflectTarget(target);\n      } else {\n        console.log(e);\n        setInfo({\n          position: [e.x, e.y],\n          target: target,\n          type: \"link\"\n        }); //displays line properties when clicked\n      }\n\n      e.stopPropagation();\n    }); //---draw points---//\n\n    svg.selectAll(\".node\").data(activeData.filter(d => !d.foreshadowing && !d.cancelled)).join(\"circle\").raise().attr(\"class\", \"node pointer\").attr(\"r\", n => n.radius ? n.radius : radius) //todo for accessibility\n    .attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n    .attr(\"opacity\", d => d.opacity ? d.opacity : 1) // .attr(\"cx\", d => generateScales(scales[d.scale]).x(logic ? logicScale(d.x) : d.x))\n    .attr(\"cx\", d => xScales.find(n => n.name === d.scale).scale(d.x)) //todo\n    .attr(\"cy\", d => yScale(d.y)).call(dragged).on(\"click\", (e, target) => {\n      if (toggle === \"cancelled\") {\n        const newNodes = [...data];\n        const node = newNodes.find(n => n.id === target.id);\n        node.cancelled = true;\n        setData(newNodes);\n      } else if (toggle === \"connection\") {\n        const newOrder = [...syntacticOrder];\n\n        if (newOrder[2] === 0) {\n          //set 2nd selection\n          newOrder[1] = target;\n          newOrder[2] = 1;\n        } else {\n          //set 1st selection\n          newOrder[0] = target;\n          newOrder[2] = 0;\n        }\n\n        setSyntacticOrder(newOrder);\n      } else if (toggle === \"foreshadowing\") {\n        //todo: adjust gradient\n        if (!target.target) {\n          //if target is an endpoint, indeterminate end\n          const newNodes = [...data];\n          const node = newNodes.find(n => n.id === target.id);\n          node.foreshadowing = true;\n          setData(newNodes);\n        } else {\n          //otherwise, change mouse to no symbol\n          console.log(\"forbidden\");\n        }\n      } else if (toggle === \"certainty\" || toggle === \"importance\") {\n        setInflectTarget(target);\n      } else {\n        setInfo({\n          position: [e.x, e.y],\n          target: target\n        }); //displays node properties when clicked\n      }\n\n      e.stopPropagation(); //stops deselect when bg is clicked\n    }); //---draw inflections---//\n    //--draw connetion inflection--//\n    //circle around point\n\n    svg.selectAll(\".connections\").data(activeData.filter(d => d.connections)).join(\"circle\").raise().attr(\"class\", \"connections pointer\").attr(\"r\", n => n.radius ? n.radius * 1.5 : radius * 2) //todo for accessibility\n    .attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-dasharray\", \"3\") // .attr(\"opacity\", d => d.opacity ? d.opacity : 1)\n    .attr(\"cx\", d => xScales.find(n => n.name === d.scale).scale(d.x)) //todo\n    .attr(\"cy\", d => yScale(d.y)); //link connecting circles\n\n    const ctLinker = linkHorizontal().source(node => data.find(x => x.id === node.id)) // .target(node => typeof(node.connections[0])===\"object\" ? node.connections[0] : data.find(x => x.id === node.connections[0]))\n    .target(() => {\n      const y = yScaleInverse(742);\n      const x = xScales.find(n => n.name === \"biggie\").scale(903);\n      return {\n        x: 903,\n        y: y\n      };\n    }) //822, 502\n    // .target(node => data.find(x => x.id === node.connections[0]))\n    .x(d => d.scale ? xScales.find(n => n.name === d.scale).scale(d.x) : d.x).y(d => yScale(d.y));\n    svg.selectAll(\".connectionLinks\").data(activeData.filter(n => n.connections && !n.connections[1])) //link starts from 1st one\n    .join(\"path\").raise().attr(\"class\", \"connectionLinks pointer\").attr(\"d\", ctLinker).attr(\"fill\", \"none\").attr(\"stroke\", \"black\") // .attr(\"stroke\", n => n.color? n.color : \"black\")\n    // .attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1)\n    .attr(\"stroke-dasharray\", \"3\"); //initialize custom symbols\n\n    const cancelledSymbol = {\n      draw: (context, size) => {\n        let s = Math.sqrt(size) / 2;\n        context.moveTo(s, 0);\n        context.lineTo(s * 2, s);\n        context.lineTo(s, s * 2);\n        context.lineTo(0, s);\n        context.lineTo(-s, s * 2);\n        context.lineTo(-s * 2, s);\n        context.lineTo(-s, 0);\n        context.lineTo(-s * 2, -s);\n        context.lineTo(-s, -s * 2);\n        context.lineTo(0, -s);\n        context.lineTo(s, -s * 2);\n        context.lineTo(s * 2, -s);\n        context.closePath();\n      }\n    }; //foreshadowing symbol\n\n    const fsSymbol = {\n      draw: (context, size) => {\n        let s = size;\n        context.moveTo(0, 0);\n        context.lineTo(s * 2, s / 2);\n        context.lineTo(s * 2, -s / 2);\n        context.closePath();\n      }\n    }; //foreshadowing gradient\n\n    var fsg = svg.append(\"defs\").append(\"linearGradient\").attr(\"id\", \"fsgradient\") //id of the gradient\n    .attr(\"x1\", \"0%\").attr(\"x2\", \"100%\") //since its a horizontal linear gradient\n    .attr(\"y1\", \"0%\").attr(\"y2\", \"0%\");\n    fsg.append(\"stop\").attr(\"offset\", \"0%\").style(\"stop-color\", \"black\") //start in black. TODO\n    .style(\"stop-opacity\", 1);\n    fsg.append(\"stop\").attr(\"offset\", \"100%\").style(\"stop-color\", \"black\") //end in transparent\n    .style(\"stop-opacity\", 0); //---draw symbols---//\n    //todo: doesn't work when cancelled is true from the start\n\n    svg.selectAll(\".cancelled\").data(activeData.filter(d => d.cancelled)).join(\"path\").raise().attr(\"class\", \"cancelled pointer\").attr(\"d\", symbol(cancelledSymbol, radius * radius * 5)).attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n    .attr(\"transform\", d => `translate(${xScales.find(n => n.name === d.scale).scale(d.x)}, ${yScale(d.y)})`).on(\"click\", (e, target) => {\n      if (toggle === \"cancelled\") {\n        const newNodes = [...data];\n        const node = newNodes.find(n => n.id === target.id);\n        delete node.cancelled;\n        setData(newNodes);\n      } else {\n        setInfo({\n          position: [e.x, e.y],\n          target: target\n        }); //displays node properties when clicked\n      }\n\n      e.stopPropagation();\n    }); //---draw foreshadowing---//\n\n    svg.selectAll(\".foreshadowing\").data(activeData.filter(d => d.foreshadowing)).join(\"path\").raise().attr(\"class\", \"foreshadowing pointer\").attr(\"d\", symbol(fsSymbol, radius * radius * 5)).style(\"fill\", \"url(#fsgradient)\").attr(\"transform\", d => `translate(${xScales.find(n => n.name === d.scale).scale(d.x)}, ${yScale(d.y)})`).on(\"click\", (e, target) => {\n      if (toggle === \"foreshadowing\") {\n        const newNodes = [...data];\n        const node = newNodes.find(n => n.id === target.id);\n        delete node.foreshadowing;\n        setData(newNodes);\n      } else {\n        setInfo({\n          position: [e.x, e.y],\n          target: target\n        }); //displays node properties when clicked\n      }\n\n      e.stopPropagation();\n    }); //---draw labels---//\n\n    svg.selectAll(\".label\").data(activeData).join(\"text\").raise().attr(\"class\", \"label\").text(node => showLabel ? node.name : node.id).attr(\"x\", d => xScales.find(n => n.name === d.scale).scale(d.x)).attr(\"y\", d => yScale(d.y + (rangeY > breakpoint ? rangeY * .06 : breakpoint / 5))) //vertical offset. see scales\n    .attr(\"text-anchor\", \"middle\"); // .attr(\"font-size\", fontSize);\n    //---zoom---//\n\n    const zoomBehavior = zoom().scaleExtent([0.25, 5]) //can zoom 2x smaller and 5x bigger\n    .translateExtent([[-100, 0], [dimensions.width + 100, dimensions.height]]) //limits how far graph can pan\n    .on(\"zoom\", e => {\n      const zoomState = e.transform; //returns zoom transformations as an object\n\n      setCurrentZoomState(zoomState);\n    });\n    svg.on(\"click\", () => setInfo(null));\n    svg.call(zoomBehavior);\n  }, [data, setData, intervals, scales, toggle, activeLayer, activeData, dimensions, logic, currentZoomState, setInfo, radius, showLabel, syntacticOrder]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    className: \"svgWrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: \"graphic\",\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 523,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Graphic, \"/KiWkGO4xuCDaFbcDOaAf23vnZg=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = Graphic;\n;\nexport default Graphic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graphic\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js"],"names":["React","useState","useEffect","useRef","select","scaleLinear","scaleOrdinal","axisBottom","linkHorizontal","format","drag","zoom","min","max","symbol","symbols","useResizeObserver","generateLinks","Graphic","data","setData","activeLayer","intervals","setIntervals","radius","info","setInfo","setInflectTarget","showLabel","toggle","scales","setScales","syntacticOrder","setSyntacticOrder","activeData","filter","d","layer","logic","isNaN","x","svgRef","wrapperRef","dimensions","currentZoomState","setCurrentZoomState","links","svg","current","selectAll","remove","logicScale","unknown","breakpoint","xMin","map","xMax","yMin","y","yMax","rangeX","rangeY","generateScales","currentScale","domain","range","width","height","xInverse","yInverse","xScales","Object","keys","key","thisScale","name","scale","yPos","units","scaleInverse","forEach","i","newXScale","rescaleX","yScale","yScaleInverse","length","join","attr","find","n","start","yStart","end","yEnd","opacity","color","importance","on","e","target","position","type","stopPropagation","xAxis","tickFormat","append","style","call","raise","g","text","dragged","dx","dy","newNodes","id","subject","linker","source","link","dashed","console","log","foreshadowing","cancelled","node","newOrder","connections","ctLinker","cancelledSymbol","draw","context","size","s","Math","sqrt","moveTo","lineTo","closePath","fsSymbol","fsg","zoomBehavior","scaleExtent","translateExtent","zoomState","transform"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,YAA9B,EAA4CC,UAA5C,EAAwDC,cAAxD,EAAwEC,MAAxE,EAAgFC,IAAhF,EAAsFC,IAAtF,EAA4FC,GAA5F,EAAiGC,GAAjG,EAAsGC,MAAtG,EAA8GC,OAA9G,QAA6H,IAA7H;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;;AAEA,SAASC,OAAT,CAAiB;AACfC,EAAAA,IADe;AACTC,EAAAA,OADS;AAEfC,EAAAA,WAFe;AAGfC,EAAAA,SAHe;AAGJC,EAAAA,YAHI;AAIfC,EAAAA,MAJe;AAKfC,EAAAA,IALe;AAKTC,EAAAA,OALS;AAMfC,EAAAA,gBANe;AAOfC,EAAAA,SAPe;AAQfC,EAAAA,MARe;AASfC,EAAAA,MATe;AASPC,EAAAA,SATO;AAUfC,EAAAA,cAVe;AAUCC,EAAAA;AAVD,CAAjB,EAWG;AAAA;;AAED;AACA,QAAMC,UAAU,GAAGb,WAAW,GAAGF,IAAI,CAACgB,MAAL,CAAYC,CAAC,IAAIA,CAAC,CAACC,KAAF,KAAYhB,WAA7B,CAAH,GAA+CF,IAA7E,CAHC,CAKD;;AACA,QAAMmB,KAAK,GAAGC,KAAK,CAACpB,IAAI,CAAC,CAAD,CAAJ,CAAQqB,CAAT,CAAnB,CANC,CAM+B;AAEhC;;AACA,QAAMC,MAAM,GAAGtC,MAAM,EAArB,CATC,CAUD;;AACA,QAAMuC,UAAU,GAAGvC,MAAM,EAAzB;AACA,QAAMwC,UAAU,GAAG3B,iBAAiB,CAAC0B,UAAD,CAApC;AACA,QAAM,CAACE,gBAAD,EAAmBC,mBAAnB,IAA0C5C,QAAQ,EAAxD,CAbC,CAeD;;AACA,QAAM6C,KAAK,GAAG7B,aAAa,CAACiB,UAAD,CAA3B,CAhBC,CAkBD;;AACAhC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM6C,GAAG,GAAG3C,MAAM,CAACqC,MAAM,CAACO,OAAR,CAAlB,CADc,CACsB;AACpC;;AACA,QAAI,CAACL,UAAL,EAAiB,OAHH,CAId;;AACAI,IAAAA,GAAG,CACAE,SADH,CACa,SADb,EAEGC,MAFH,GALc,CASd;AACA;AAEA;AAEA;;AACA,UAAMC,UAAU,GAAG7C,YAAY,CAAC,CAAC,QAAD,EAAW,KAAX,EAAkB,OAAlB,CAAD,EAA6B,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAA7B,CAAZ,CAAqD8C,OAArD,CAA6D,CAA7D,CAAnB;AAEA,UAAMC,UAAU,GAAG,CAAnB;AAGA,UAAMC,IAAI,GAAG1C,GAAG,CAACO,IAAI,CAACoC,GAAL,CAAS,CAAC;AAACf,MAAAA;AAAD,KAAD,KAASF,KAAK,GAAGa,UAAU,CAACX,CAAD,CAAb,GAAmBA,CAA1C,CAAD,CAAhB;AACA,UAAMgB,IAAI,GAAG3C,GAAG,CAACM,IAAI,CAACoC,GAAL,CAAS,CAAC;AAACf,MAAAA;AAAD,KAAD,KAASF,KAAK,GAAGa,UAAU,CAACX,CAAD,CAAb,GAAmBA,CAA1C,CAAD,CAAhB;AACA,UAAMiB,IAAI,GAAG7C,GAAG,CAACO,IAAI,CAACoC,GAAL,CAAS,CAAC;AAACG,MAAAA;AAAD,KAAD,KAASA,CAAlB,CAAD,CAAhB;AACA,UAAMC,IAAI,GAAG9C,GAAG,CAACM,IAAI,CAACoC,GAAL,CAAS,CAAC;AAACG,MAAAA;AAAD,KAAD,KAASA,CAAlB,CAAD,CAAhB;AACA,UAAME,MAAM,GAAGJ,IAAI,GAACF,IAApB,CAxBc,CAwBY;;AAC1B,UAAMO,MAAM,GAAGF,IAAI,GAACF,IAApB,CAzBc,CA4Bd;AAEA;;AACA;AACJ;AACA;AACA;;AAGI,aAASK,cAAT,CAAwBC,YAAxB,EAAsC;AAEpC,YAAMvB,CAAC,GAAGnC,WAAW,GAClB2D,MADO,CACA,CAACD,YAAY,CAACnD,GAAd,EAAmBmD,YAAY,CAAClD,GAAhC,CADA,EACsC;AADtC,OAEPoD,KAFO,CAED,CAAC,CAAD,EAAItB,UAAU,CAACuB,KAAf,CAFC,CAAV;AAGA,YAAMR,CAAC,GAAGrD,WAAW,GACnB;AADmB,OAElB2D,MAFO,CAECH,MAAM,GAACR,UAAR,GAAsB,CAACI,IAAD,EAAOE,IAAP,CAAtB,GAAqC,CAACF,IAAI,GAACJ,UAAN,EAAkBM,IAAI,GAACN,UAAvB,CAFrC,EAGPY,KAHO,CAGD,CAAC,CAAD,EAAItB,UAAU,CAACwB,MAAf,CAHC,CAAV;AAIA,YAAMC,QAAQ,GAAG/D,WAAW,GACzB2D,MADc,CACP,CAAC,CAACrB,UAAU,CAACuB,KAAb,EAAoBvB,UAAU,CAACuB,KAA/B,CADO,EAEdD,KAFc,CAER,CAAC,EAAEF,YAAY,CAAClD,GAAb,GAAiBkD,YAAY,CAACnD,GAAhC,CAAD,EAAwCmD,YAAY,CAAClD,GAAb,GAAiBkD,YAAY,CAACnD,GAAtE,CAFQ,CAAjB,CAToC,CAWkD;;AACtF,YAAMyD,QAAQ,GAAGhE,WAAW,GACzB2D,MADc,CACP,CAAC,CAACrB,UAAU,CAACwB,MAAb,EAAqBxB,UAAU,CAACwB,MAAhC,CADO,EAEdF,KAFc,CAEPJ,MAAM,GAACR,UAAR,GAAsB,CAAC,CAACQ,MAAF,EAAUA,MAAV,CAAtB,GAA0C,CAAC,CAACR,UAAD,GAAY,CAAb,EAAgBA,UAAU,GAAC,CAA3B,CAFlC,CAAjB;AAKA,aAAO;AACLb,QAAAA,CADK;AACFkB,QAAAA,CADE;AACCU,QAAAA,QADD;AACWC,QAAAA;AADX,OAAP;AAGD,KAzDa,CA2Dd;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA,UAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAY1C,MAAZ,EAAoByB,GAApB,CAAwBkB,GAAG,IAAI;AAAE;AAC/C,YAAMC,SAAS,GAAG5C,MAAM,CAAC2C,GAAD,CAAxB;AACA,aAAQ;AACNE,QAAAA,IAAI,EAAEF,GADA;AAENG,QAAAA,KAAK,EAAEvE,WAAW,GAAG;AAAH,SACf2D,MADI,CACG,CAACU,SAAS,CAAC9D,GAAX,EAAgB8D,SAAS,CAAC7D,GAA1B,CADH,EAEJoD,KAFI,CAEE,CAAC,CAAD,EAAItB,UAAU,CAACuB,KAAf,CAFF,CAFD;AAKNW,QAAAA,IAAI,EAAEH,SAAS,CAACG,IALV;AAMNC,QAAAA,KAAK,EAAEJ,SAAS,CAACI,KANX;AAONC,QAAAA,YAAY,EAAE1E,WAAW,GAAG;AAAH,SACtB2D,MADW,CACJ,CAAC,CAACrB,UAAU,CAACuB,KAAb,EAAoBvB,UAAU,CAACuB,KAA/B,CADI,EAEXD,KAFW,CAEL,CAAC,EAAES,SAAS,CAAC7D,GAAV,GAAc6D,SAAS,CAAC9D,GAA1B,CAAD,EAAkC8D,SAAS,CAAC7D,GAAV,GAAc6D,SAAS,CAAC9D,GAA1D,CAFK;AAPR,OAAR;AAWD,KAbe,CAAhB;AAeA;AACJ;AACA;AACA;AACA;AACI;;AACA,QAAIgC,gBAAJ,EAAsB;AACpB0B,MAAAA,OAAO,CAACU,OAAR,CAAgB,CAACN,SAAD,EAAYO,CAAZ,KAAkB;AAChC,cAAMC,SAAS,GAAGtC,gBAAgB,CAACuC,QAAjB,CAA0BT,SAAS,CAACE,KAApC,CAAlB,CADgC,CAC8B;;AAC9DN,QAAAA,OAAO,CAACW,CAAD,CAAP,CAAWL,KAAX,GAAmBM,SAAnB,CAFgC,CAEF;AAE/B,OAJD;AAOD;;AAAA,KA5Ga,CA6Gd;AACA;AACA;;AACA,UAAME,MAAM,GAAG/E,WAAW,GACxB;AADwB,KAEvB2D,MAFY,CAEJH,MAAM,GAACR,UAAR,GAAsB,CAACI,IAAD,EAAOE,IAAP,CAAtB,GAAqC,CAACF,IAAI,GAACJ,UAAN,EAAkBM,IAAI,GAACN,UAAvB,CAFhC,EAGZY,KAHY,CAGN,CAAC,CAAD,EAAItB,UAAU,CAACwB,MAAf,CAHM,CAAf,CAhHc,CAoHd;AACA;AACA;AACA;;AACA,UAAMkB,aAAa,GAAGhF,WAAW,GAC9B2D,MADmB,CACZ,CAAC,CAACrB,UAAU,CAACwB,MAAb,EAAqBxB,UAAU,CAACwB,MAAhC,CADY,EAEnBF,KAFmB,CAEZJ,MAAM,GAACR,UAAR,GAAsB,CAAC,CAACQ,MAAF,EAAUA,MAAV,CAAtB,GAA0C,CAAC,CAACR,UAAD,GAAY,CAAb,EAAgBA,UAAU,GAAC,CAA3B,CAF7B,CAAtB,CAxHc,CAgId;;AACA,QAAI/B,SAAS,CAACgE,MAAd,EAAsB;AACpBvC,MAAAA,GAAG,CACFE,SADD,CACW,YADX,EAEC9B,IAFD,CAEMG,SAFN,EAGCiE,IAHD,CAGM,MAHN,EAICC,IAJD,CAIM,OAJN,EAIe,WAJf,EAKCA,IALD,CAKM,GALN,EAKWpD,CAAC,IAAIkC,OAAO,CAACmB,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACf,IAAF,KAAWvC,CAAC,CAACwC,KAA/B,EAAsCA,KAAtC,CAA4CxC,CAAC,CAACuD,KAA9C,CALhB,EAMA;AACA;AAPA,OAQCH,IARD,CAQM,GARN,EAQWE,CAAC,IAAIA,CAAC,CAACE,MAAF,GAAWR,MAAM,CAACM,CAAC,CAACE,MAAH,CAAjB,GAA8B,CAR9C,EAQiD;AARjD,OASCJ,IATD,CASM,OATN,EASepD,CAAC,IAAIkC,OAAO,CAACmB,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACf,IAAF,KAAWvC,CAAC,CAACwC,KAA/B,EAAsCA,KAAtC,CAA4CxC,CAAC,CAACyD,GAA9C,IAAqDvB,OAAO,CAACmB,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACf,IAAF,KAAWvC,CAAC,CAACwC,KAA/B,EAAsCA,KAAtC,CAA4CxC,CAAC,CAACuD,KAA9C,CATzE,EAUCH,IAVD,CAUM,QAVN,EAUgBE,CAAC,IAAI;AACnB,YAAIA,CAAC,CAACE,MAAF,GAAWF,CAAC,CAACI,IAAjB,EAAuB;AACrB,iBAAQV,MAAM,CAACM,CAAC,CAACI,IAAH,CAAN,GAAeV,MAAM,CAACM,CAAC,CAACE,MAAH,CAA7B;AACD,SAFD,MAEO,IAAIF,CAAC,CAACE,MAAN,EAAc;AACnB,iBAAQR,MAAM,CAACzB,IAAI,GAAC,EAAN,CAAN,GAAgByB,MAAM,CAACM,CAAC,CAACE,MAAH,CAA9B;AACD,SAFM,MAEA;AACL,iBAAQR,MAAM,CAACzB,IAAI,GAAC,EAAN,CAAd,CADK,CACoB;AACzB;AACD;AAAC,OAlBJ,EAmBC6B,IAnBD,CAmBM,SAnBN,EAmBiBE,CAAC,IAAIA,CAAC,CAACK,OAAF,GAAYL,CAAC,CAACK,OAAd,GAAwB,GAnB9C,EAoBCP,IApBD,CAoBM,MApBN,EAoBcE,CAAC,IAAIA,CAAC,CAACM,KAAF,GAAUN,CAAC,CAACM,KAAZ,GAAoB,MApBvC,EAqBCR,IArBD,CAqBM,QArBN,EAqBgB,OArBhB,EAqByB;AArBzB,OAsBCA,IAtBD,CAsBM,cAtBN,EAsBsBE,CAAC,IAAIA,CAAC,CAACO,UAAF,GAAeP,CAAC,CAACO,UAAF,GAAa,CAA5B,GAAgC,CAtB3D,EAuBCC,EAvBD,CAuBI,OAvBJ,EAuBa,CAACC,CAAD,EAAIC,MAAJ,KAAe;AAC1B;AACA,YAAIvE,MAAM,KAAG,WAAT,IAAwBA,MAAM,KAAG,YAArC,EAAmD;AACjDF,UAAAA,gBAAgB,CAACyE,MAAD,CAAhB;AACD,SAFD,MAEO;AACL1E,UAAAA,OAAO,CAAC;AAAC2E,YAAAA,QAAQ,EAAE,CAACF,CAAC,CAAC3D,CAAH,EAAM2D,CAAC,CAACzC,CAAR,CAAX;AAAuB0C,YAAAA,MAAM,EAAEA,MAA/B;AAAuCE,YAAAA,IAAI,EAAE;AAA7C,WAAD,CAAP,CADK,CAC+D;AACrE;;AACDH,QAAAA,CAAC,CAACI,eAAF;AACD,OA/BD;AAgCD,KAlKa,CAoKd;;;AAEAjC,IAAAA,OAAO,CAACU,OAAR,CAAgBN,SAAS,IAAI;AAC3B,YAAM8B,KAAK,GAAGjG,UAAU,CAACmE,SAAS,CAACE,KAAX,CAAV,CACb6B,UADa,CACFhG,MAAM,CAAC,EAAD,CADJ,CAAd;AAGAsC,MAAAA,GAAG,CACA2D,MADH,CACU,GADV,EACe;AADf,OAEGlB,IAFH,CAEQ,OAFR,EAEiB,QAFjB,EAGGmB,KAHH,CAGS,WAHT,EAGuB,cAAahE,UAAU,CAACwB,MAAX,GAAkBO,SAAS,CAACG,IAAK,KAHrE,EAIG+B,IAJH,CAIQJ,KAJR,EAKGK,KALH,GAMGD,IANH,CAMQE,CAAC,IAAIA,CAAC,CAAC1G,MAAF,CAAS,SAAT,EAAoB;AAApB,OACR8C,MADQ,EANb,EAQG0D,IARH,CAQQE,CAAC,IAAIA,CAAC,CAAC7D,SAAF,CAAY,YAAZ,EAA0B;AAA1B,OACRuC,IADQ,CACH,gBADG,EACe,GADf,CARb,EAUGoB,IAVH,CAUQE,CAAC,IAAIA,CAAC,CAAC7D,SAAF,CAAY,YAAZ,EACRuC,IADQ,CACH,GADG,EACE,EADF,EACM;AADN,OAERA,IAFQ,CAEH,SAFG,EAEQ,GAFR,CAVb;AAaAzC,MAAAA,GAAG,CACA2D,MADH,CACU,MADV,EAEGK,IAFH,CAEQrC,SAAS,CAACI,KAFlB,EAGGU,IAHH,CAGQ,OAHR,EAGiB,2BAHjB,EAIGA,IAJH,CAIQ,GAJR,EAIa7C,UAAU,CAACuB,KAAX,GAAiB,CAJ9B,EAKGsB,IALH,CAKQ,GALR,EAKa7C,UAAU,CAACwB,MAAX,IAAmBO,SAAS,CAACG,IAAV,GAAe,GAAlC,CALb,EAMGW,IANH,CAMQ,aANR,EAMuB,QANvB,EAOGA,IAPH,CAOQ,SAPR,EAOmB,GAPnB;AAQC,KAzBH,EAtKc,CAmMd;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AAEA;;AACA,UAAMwB,OAAO,GAAGtG,IAAI,GAClB;AACA;AACA;AAHkB,KAIjBwF,EAJa,CAIV,MAJU,EAIFC,CAAC,IAAI;AACf;AACA;AACA,YAAMc,EAAE,GAAG3C,OAAO,CAACS,YAAnB;AACA,YAAMmC,EAAE,GAAG7B,aAAa,CAACc,CAAC,CAACe,EAAH,CAAxB;AACA,YAAMC,QAAQ,GAAG,CAAC,GAAGhG,IAAJ,CAAjB,CALe,CAKa;AAC5B;;AACAgG,MAAAA,QAAQ,CAAC1B,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAAC0B,EAAF,KAASjB,CAAC,CAACkB,OAAF,CAAUD,EAAtC,EAA0C5E,CAA1C,IAA+CyE,EAA/C;AACAE,MAAAA,QAAQ,CAAC1B,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAAC0B,EAAF,KAASjB,CAAC,CAACkB,OAAF,CAAUD,EAAtC,EAA0C1D,CAA1C,IAA+CwD,EAA/C;AACA9F,MAAAA,OAAO,CAAC+F,QAAD,CAAP;AACD,KAda,CAAhB,CAzNc,CAyOd;;AACA,UAAMG,MAAM,GAAG9G,cAAc,GAC1B+G,MADY,CACLC,IAAI,IAAIA,IAAI,CAACD,MADR,EAEZnB,MAFY,CAELoB,IAAI,IAAIA,IAAI,CAACpB,MAFR,EAGb;AAHa,KAIZ5D,CAJY,CAIVJ,CAAC,IAAIkC,OAAO,CAACmB,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACf,IAAF,KAAWvC,CAAC,CAACwC,KAA/B,EAAsCA,KAAtC,CAA4CxC,CAAC,CAACI,CAA9C,CAJK,EAKZkB,CALY,CAKVtB,CAAC,IAAIgD,MAAM,CAAChD,CAAC,CAACsB,CAAH,CALD,CAAf;AAOAX,IAAAA,GAAG,CACAE,SADH,CACa,OADb,EAEG9B,IAFH,CAEQ2B,KAFR,EAGGyC,IAHH,CAGQ,MAHR,EAIGsB,KAJH,GAKGrB,IALH,CAKQ,OALR,EAKiB,cALjB,EAMGA,IANH,CAMQ,GANR,EAMa8B,MANb,EAOG9B,IAPH,CAOQ,MAPR,EAOgB,MAPhB,EAQGA,IARH,CAQQ,QARR,EAQkBE,CAAC,IAAIA,CAAC,CAACM,KAAF,GAASN,CAAC,CAACM,KAAX,GAAmB,OAR1C,EASGR,IATH,CASQ,cATR,EASwBE,CAAC,IAAIA,CAAC,CAACxB,KAAF,GAAUwB,CAAC,CAACxB,KAAZ,GAAoB1C,MAAM,GAAC,CATxD,EAUGgE,IAVH,CAUQ,gBAVR,EAU0BE,CAAC,IAAIA,CAAC,CAACK,OAAF,GAAYL,CAAC,CAACK,OAAd,GAAwB,CAVvD,EAWGP,IAXH,CAWQ,kBAXR,EAW4BE,CAAC,IAAIA,CAAC,CAAC+B,MAAF,GAAW/B,CAAC,CAAC+B,MAAb,GAAsB,IAXvD,EAYGvB,EAZH,CAYM,OAZN,EAYe,CAACC,CAAD,EAAIC,MAAJ,KAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAIvE,MAAM,KAAG,WAAT,IAAwBA,MAAM,KAAG,YAArC,EAAmD;AACjDF,QAAAA,gBAAgB,CAACyE,MAAD,CAAhB;AACD,OAFD,MAEO;AACLsB,QAAAA,OAAO,CAACC,GAAR,CAAYxB,CAAZ;AACAzE,QAAAA,OAAO,CAAC;AAAC2E,UAAAA,QAAQ,EAAE,CAACF,CAAC,CAAC3D,CAAH,EAAM2D,CAAC,CAACzC,CAAR,CAAX;AAAuB0C,UAAAA,MAAM,EAAEA,MAA/B;AAAuCE,UAAAA,IAAI,EAAE;AAA7C,SAAD,CAAP,CAFK,CAE0D;AAChE;;AACDH,MAAAA,CAAC,CAACI,eAAF;AACD,KAhCH,EAjPc,CAoRd;;AACAxD,IAAAA,GAAG,CACAE,SADH,CACa,OADb,EAEG9B,IAFH,CAEQe,UAAU,CAACC,MAAX,CAAkBC,CAAC,IAAI,CAACA,CAAC,CAACwF,aAAH,IAAoB,CAACxF,CAAC,CAACyF,SAA9C,CAFR,EAGGtC,IAHH,CAGQ,QAHR,EAIGsB,KAJH,GAKGrB,IALH,CAKQ,OALR,EAKiB,cALjB,EAMGA,IANH,CAMQ,GANR,EAMaE,CAAC,IAAIA,CAAC,CAAClE,MAAF,GAAUkE,CAAC,CAAClE,MAAZ,GAAqBA,MANvC,EAM+C;AAN/C,KAOGgE,IAPH,CAOQ,MAPR,EAOgBpD,CAAC,IAAIA,CAAC,CAAC4D,KAAF,GAAU5D,CAAC,CAAC4D,KAAZ,GAAoB,OAPzC,EAOkD;AAPlD,KAQGR,IARH,CAQQ,SARR,EAQmBpD,CAAC,IAAIA,CAAC,CAAC2D,OAAF,GAAY3D,CAAC,CAAC2D,OAAd,GAAwB,CARhD,EASE;AATF,KAUGP,IAVH,CAUQ,IAVR,EAUcpD,CAAC,IAAIkC,OAAO,CAACmB,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACf,IAAF,KAAWvC,CAAC,CAACwC,KAA/B,EAAsCA,KAAtC,CAA4CxC,CAAC,CAACI,CAA9C,CAVnB,EAUqE;AAVrE,KAWGgD,IAXH,CAWQ,IAXR,EAWcpD,CAAC,IAAIgD,MAAM,CAAChD,CAAC,CAACsB,CAAH,CAXzB,EAYGkD,IAZH,CAYQI,OAZR,EAaGd,EAbH,CAaM,OAbN,EAae,CAACC,CAAD,EAAIC,MAAJ,KAAe;AAC1B,UAAIvE,MAAM,KAAG,WAAb,EAA0B;AACxB,cAAMsF,QAAQ,GAAG,CAAC,GAAGhG,IAAJ,CAAjB;AACA,cAAM2G,IAAI,GAAGX,QAAQ,CAAC1B,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAAC0B,EAAF,KAAShB,MAAM,CAACgB,EAAnC,CAAb;AACAU,QAAAA,IAAI,CAACD,SAAL,GAAiB,IAAjB;AACAzG,QAAAA,OAAO,CAAC+F,QAAD,CAAP;AACD,OALD,MAKO,IAAItF,MAAM,KAAG,YAAb,EAA2B;AAChC,cAAMkG,QAAQ,GAAG,CAAC,GAAG/F,cAAJ,CAAjB;;AACA,YAAI+F,QAAQ,CAAC,CAAD,CAAR,KAAc,CAAlB,EAAqB;AAAE;AACrBA,UAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc3B,MAAd;AACA2B,UAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAd;AACD,SAHD,MAGO;AAAE;AACPA,UAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc3B,MAAd;AACA2B,UAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAd;AACD;;AACD9F,QAAAA,iBAAiB,CAAC8F,QAAD,CAAjB;AACD,OAVM,MAUA,IAAIlG,MAAM,KAAG,eAAb,EAA8B;AAAE;AACrC,YAAI,CAACuE,MAAM,CAACA,MAAZ,EAAoB;AAAE;AACpB,gBAAMe,QAAQ,GAAG,CAAC,GAAGhG,IAAJ,CAAjB;AACA,gBAAM2G,IAAI,GAAGX,QAAQ,CAAC1B,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAAC0B,EAAF,KAAShB,MAAM,CAACgB,EAAnC,CAAb;AACAU,UAAAA,IAAI,CAACF,aAAL,GAAqB,IAArB;AACAxG,UAAAA,OAAO,CAAC+F,QAAD,CAAP;AACD,SALD,MAKO;AAAE;AACPO,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;AACF,OATM,MASA,IAAI9F,MAAM,KAAG,WAAT,IAAwBA,MAAM,KAAG,YAArC,EAAkD;AACvDF,QAAAA,gBAAgB,CAACyE,MAAD,CAAhB;AACD,OAFM,MAEA;AACL1E,QAAAA,OAAO,CAAC;AAAC2E,UAAAA,QAAQ,EAAE,CAACF,CAAC,CAAC3D,CAAH,EAAM2D,CAAC,CAACzC,CAAR,CAAX;AAAuB0C,UAAAA,MAAM,EAAEA;AAA/B,SAAD,CAAP,CADK,CAC4C;AAClD;;AACDD,MAAAA,CAAC,CAACI,eAAF,GA9B0B,CA8BL;AACtB,KA5CH,EArRc,CAmUd;AAEA;AACA;;AACAxD,IAAAA,GAAG,CACAE,SADH,CACa,cADb,EAEG9B,IAFH,CAEQe,UAAU,CAACC,MAAX,CAAkBC,CAAC,IAAIA,CAAC,CAAC4F,WAAzB,CAFR,EAGGzC,IAHH,CAGQ,QAHR,EAIGsB,KAJH,GAKGrB,IALH,CAKQ,OALR,EAKiB,qBALjB,EAMGA,IANH,CAMQ,GANR,EAMaE,CAAC,IAAIA,CAAC,CAAClE,MAAF,GAAUkE,CAAC,CAAClE,MAAF,GAAS,GAAnB,GAAyBA,MAAM,GAAC,CANlD,EAMqD;AANrD,KAOGgE,IAPH,CAOQ,MAPR,EAOgB,MAPhB,EAQGA,IARH,CAQQ,QARR,EAQkB,OARlB,EASGA,IATH,CASQ,kBATR,EAS4B,GAT5B,EAUE;AAVF,KAWGA,IAXH,CAWQ,IAXR,EAWcpD,CAAC,IAAIkC,OAAO,CAACmB,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACf,IAAF,KAAWvC,CAAC,CAACwC,KAA/B,EAAsCA,KAAtC,CAA4CxC,CAAC,CAACI,CAA9C,CAXnB,EAWqE;AAXrE,KAYGgD,IAZH,CAYQ,IAZR,EAYcpD,CAAC,IAAIgD,MAAM,CAAChD,CAAC,CAACsB,CAAH,CAZzB,EAvUc,CAqVd;;AACA,UAAMuE,QAAQ,GAAGzH,cAAc,GAC5B+G,MADc,CACPO,IAAI,IAAI3G,IAAI,CAACsE,IAAL,CAAUjD,CAAC,IAAIA,CAAC,CAAC4E,EAAF,KAASU,IAAI,CAACV,EAA7B,CADD,EAEf;AAFe,KAGdhB,MAHc,CAGP,MAAM;AACZ,YAAM1C,CAAC,GAAG2B,aAAa,CAAC,GAAD,CAAvB;AACA,YAAM7C,CAAC,GAAG8B,OAAO,CAACmB,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACf,IAAF,KAAW,QAA7B,EAAuCC,KAAvC,CAA6C,GAA7C,CAAV;AACA,aAAO;AAACpC,QAAAA,CAAC,EAAE,GAAJ;AAASkB,QAAAA,CAAC,EAAEA;AAAZ,OAAP;AACD,KAPc,EAOZ;AACH;AARe,KASdlB,CATc,CASZJ,CAAC,IAAIA,CAAC,CAACwC,KAAF,GAAQN,OAAO,CAACmB,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACf,IAAF,KAAWvC,CAAC,CAACwC,KAA/B,EAAsCA,KAAtC,CAA4CxC,CAAC,CAACI,CAA9C,CAAR,GAAyDJ,CAAC,CAACI,CATpD,EAUdkB,CAVc,CAUZtB,CAAC,IAAIgD,MAAM,CAAChD,CAAC,CAACsB,CAAH,CAVC,CAAjB;AAWAX,IAAAA,GAAG,CACAE,SADH,CACa,kBADb,EAEG9B,IAFH,CAEQe,UAAU,CAACC,MAAX,CAAkBuD,CAAC,IAAIA,CAAC,CAACsC,WAAF,IAAiB,CAACtC,CAAC,CAACsC,WAAF,CAAc,CAAd,CAAzC,CAFR,EAEoE;AAFpE,KAGGzC,IAHH,CAGQ,MAHR,EAIGsB,KAJH,GAKGrB,IALH,CAKQ,OALR,EAKiB,yBALjB,EAMGA,IANH,CAMQ,GANR,EAMayC,QANb,EAOGzC,IAPH,CAOQ,MAPR,EAOgB,MAPhB,EAQGA,IARH,CAQQ,QARR,EAQkB,OARlB,EASE;AACA;AAVF,KAWGA,IAXH,CAWQ,kBAXR,EAW4B,GAX5B,EAjWc,CA8Wd;;AACA,UAAM0C,eAAe,GAAG;AACtBC,MAAAA,IAAI,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACvB,YAAIC,CAAC,GAAGC,IAAI,CAACC,IAAL,CAAUH,IAAV,IAAgB,CAAxB;AACID,QAAAA,OAAO,CAACK,MAAR,CAAeH,CAAf,EAAiB,CAAjB;AACAF,QAAAA,OAAO,CAACM,MAAR,CAAeJ,CAAC,GAAC,CAAjB,EAAmBA,CAAnB;AACAF,QAAAA,OAAO,CAACM,MAAR,CAAeJ,CAAf,EAAiBA,CAAC,GAAC,CAAnB;AACAF,QAAAA,OAAO,CAACM,MAAR,CAAe,CAAf,EAAiBJ,CAAjB;AACAF,QAAAA,OAAO,CAACM,MAAR,CAAe,CAACJ,CAAhB,EAAkBA,CAAC,GAAC,CAApB;AACAF,QAAAA,OAAO,CAACM,MAAR,CAAe,CAACJ,CAAD,GAAG,CAAlB,EAAoBA,CAApB;AACAF,QAAAA,OAAO,CAACM,MAAR,CAAe,CAACJ,CAAhB,EAAkB,CAAlB;AACAF,QAAAA,OAAO,CAACM,MAAR,CAAe,CAACJ,CAAD,GAAG,CAAlB,EAAoB,CAACA,CAArB;AACAF,QAAAA,OAAO,CAACM,MAAR,CAAe,CAACJ,CAAhB,EAAkB,CAACA,CAAD,GAAG,CAArB;AACAF,QAAAA,OAAO,CAACM,MAAR,CAAe,CAAf,EAAiB,CAACJ,CAAlB;AACAF,QAAAA,OAAO,CAACM,MAAR,CAAeJ,CAAf,EAAiB,CAACA,CAAD,GAAG,CAApB;AACAF,QAAAA,OAAO,CAACM,MAAR,CAAeJ,CAAC,GAAC,CAAjB,EAAmB,CAACA,CAApB;AACAF,QAAAA,OAAO,CAACO,SAAR;AACL;AAhBqB,KAAxB,CA/Wc,CAiYd;;AACA,UAAMC,QAAQ,GAAG;AACfT,MAAAA,IAAI,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACvB,YAAIC,CAAC,GAAGD,IAAR;AACID,QAAAA,OAAO,CAACK,MAAR,CAAe,CAAf,EAAiB,CAAjB;AACAL,QAAAA,OAAO,CAACM,MAAR,CAAeJ,CAAC,GAAC,CAAjB,EAAmBA,CAAC,GAAC,CAArB;AACAF,QAAAA,OAAO,CAACM,MAAR,CAAeJ,CAAC,GAAC,CAAjB,EAAmB,CAACA,CAAD,GAAG,CAAtB;AACAF,QAAAA,OAAO,CAACO,SAAR;AACL;AAPc,KAAjB,CAlYc,CA2Yd;;AACA,QAAIE,GAAG,GAAG9F,GAAG,CAAC2D,MAAJ,CAAW,MAAX,EAAmBA,MAAnB,CAA0B,gBAA1B,EACTlB,IADS,CACJ,IADI,EACE,YADF,EACe;AADf,KAETA,IAFS,CAEJ,IAFI,EAEE,IAFF,EAGTA,IAHS,CAGJ,IAHI,EAGE,MAHF,EAGU;AAHV,KAITA,IAJS,CAIJ,IAJI,EAIE,IAJF,EAKTA,IALS,CAKJ,IALI,EAKE,IALF,CAAV;AAOAqD,IAAAA,GAAG,CAACnC,MAAJ,CAAW,MAAX,EACClB,IADD,CACM,QADN,EACgB,IADhB,EAECmB,KAFD,CAEO,YAFP,EAEqB,OAFrB,EAE6B;AAF7B,KAGCA,KAHD,CAGO,cAHP,EAGuB,CAHvB;AAKAkC,IAAAA,GAAG,CAACnC,MAAJ,CAAW,MAAX,EACClB,IADD,CACM,QADN,EACgB,MADhB,EAECmB,KAFD,CAEO,YAFP,EAEqB,OAFrB,EAE6B;AAF7B,KAGCA,KAHD,CAGO,cAHP,EAGuB,CAHvB,EAxZc,CA6Zd;AACA;;AACA5D,IAAAA,GAAG,CACAE,SADH,CACa,YADb,EAEG9B,IAFH,CAEQe,UAAU,CAACC,MAAX,CAAkBC,CAAC,IAAIA,CAAC,CAACyF,SAAzB,CAFR,EAGGtC,IAHH,CAGQ,MAHR,EAIGsB,KAJH,GAKGrB,IALH,CAKQ,OALR,EAKiB,mBALjB,EAMGA,IANH,CAMQ,GANR,EAMa1E,MAAM,CAACoH,eAAD,EAAkB1G,MAAM,GAACA,MAAP,GAAc,CAAhC,CANnB,EAOGgE,IAPH,CAOQ,MAPR,EAOgBpD,CAAC,IAAIA,CAAC,CAAC4D,KAAF,GAAU5D,CAAC,CAAC4D,KAAZ,GAAoB,OAPzC,EAOkD;AAPlD,KAQGR,IARH,CAQQ,WARR,EAQqBpD,CAAC,IAAK,aAAYkC,OAAO,CAACmB,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACf,IAAF,KAAWvC,CAAC,CAACwC,KAA/B,EAAsCA,KAAtC,CAA4CxC,CAAC,CAACI,CAA9C,CAAiD,KAAI4C,MAAM,CAAChD,CAAC,CAACsB,CAAH,CAAM,GARxG,EASGwC,EATH,CASM,OATN,EASe,CAACC,CAAD,EAAIC,MAAJ,KAAe;AAC1B,UAAIvE,MAAM,KAAG,WAAb,EAA0B;AACxB,cAAMsF,QAAQ,GAAG,CAAC,GAAGhG,IAAJ,CAAjB;AACA,cAAM2G,IAAI,GAAGX,QAAQ,CAAC1B,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAAC0B,EAAF,KAAShB,MAAM,CAACgB,EAAnC,CAAb;AACA,eAAOU,IAAI,CAACD,SAAZ;AACAzG,QAAAA,OAAO,CAAC+F,QAAD,CAAP;AACD,OALD,MAKO;AACLzF,QAAAA,OAAO,CAAC;AAAC2E,UAAAA,QAAQ,EAAE,CAACF,CAAC,CAAC3D,CAAH,EAAM2D,CAAC,CAACzC,CAAR,CAAX;AAAuB0C,UAAAA,MAAM,EAAEA;AAA/B,SAAD,CAAP,CADK,CAC4C;AAClD;;AACDD,MAAAA,CAAC,CAACI,eAAF;AACD,KAnBH,EA/Zc,CAobd;;AACAxD,IAAAA,GAAG,CACAE,SADH,CACa,gBADb,EAEG9B,IAFH,CAEQe,UAAU,CAACC,MAAX,CAAkBC,CAAC,IAAIA,CAAC,CAACwF,aAAzB,CAFR,EAGGrC,IAHH,CAGQ,MAHR,EAIGsB,KAJH,GAKGrB,IALH,CAKQ,OALR,EAKiB,uBALjB,EAMGA,IANH,CAMQ,GANR,EAMa1E,MAAM,CAAC8H,QAAD,EAAWpH,MAAM,GAACA,MAAP,GAAc,CAAzB,CANnB,EAOGmF,KAPH,CAOS,MAPT,EAOiB,kBAPjB,EAQGnB,IARH,CAQQ,WARR,EAQqBpD,CAAC,IAAK,aAAYkC,OAAO,CAACmB,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACf,IAAF,KAAWvC,CAAC,CAACwC,KAA/B,EAAsCA,KAAtC,CAA4CxC,CAAC,CAACI,CAA9C,CAAiD,KAAI4C,MAAM,CAAChD,CAAC,CAACsB,CAAH,CAAM,GARxG,EASGwC,EATH,CASM,OATN,EASe,CAACC,CAAD,EAAIC,MAAJ,KAAe;AAC1B,UAAIvE,MAAM,KAAG,eAAb,EAA8B;AAC5B,cAAMsF,QAAQ,GAAG,CAAC,GAAGhG,IAAJ,CAAjB;AACA,cAAM2G,IAAI,GAAGX,QAAQ,CAAC1B,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAAC0B,EAAF,KAAShB,MAAM,CAACgB,EAAnC,CAAb;AACA,eAAOU,IAAI,CAACF,aAAZ;AACAxG,QAAAA,OAAO,CAAC+F,QAAD,CAAP;AACD,OALD,MAKO;AACLzF,QAAAA,OAAO,CAAC;AAAC2E,UAAAA,QAAQ,EAAE,CAACF,CAAC,CAAC3D,CAAH,EAAM2D,CAAC,CAACzC,CAAR,CAAX;AAAuB0C,UAAAA,MAAM,EAAEA;AAA/B,SAAD,CAAP,CADK,CAC4C;AAClD;;AACDD,MAAAA,CAAC,CAACI,eAAF;AACD,KAnBH,EArbc,CA0cd;;AACAxD,IAAAA,GAAG,CACAE,SADH,CACa,QADb,EAEG9B,IAFH,CAEQe,UAFR,EAGGqD,IAHH,CAGQ,MAHR,EAIGsB,KAJH,GAKGrB,IALH,CAKQ,OALR,EAKiB,OALjB,EAMGuB,IANH,CAMQe,IAAI,IAAIlG,SAAS,GAAGkG,IAAI,CAACnD,IAAR,GAAemD,IAAI,CAACV,EAN7C,EAOG5B,IAPH,CAOQ,GAPR,EAOapD,CAAC,IAAIkC,OAAO,CAACmB,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACf,IAAF,KAAWvC,CAAC,CAACwC,KAA/B,EAAsCA,KAAtC,CAA4CxC,CAAC,CAACI,CAA9C,CAPlB,EAQGgD,IARH,CAQQ,GARR,EAQapD,CAAC,IAAIgD,MAAM,CAAChD,CAAC,CAACsB,CAAF,IAAOG,MAAM,GAACR,UAAP,GAAoBQ,MAAM,GAAC,GAA3B,GAAiCR,UAAU,GAAC,CAAnD,CAAD,CARxB,EAQiF;AARjF,KASGmC,IATH,CASQ,aATR,EASuB,QATvB,EA3cc,CAqdZ;AAGF;;AACA,UAAMsD,YAAY,GAAGnI,IAAI,GACtBoI,WADkB,CACN,CAAC,IAAD,EAAO,CAAP,CADM,EACK;AADL,KAElBC,eAFkB,CAEF,CAAC,CAAC,CAAC,GAAF,EAAO,CAAP,CAAD,EAAY,CAACrG,UAAU,CAACuB,KAAX,GAAiB,GAAlB,EAAuBvB,UAAU,CAACwB,MAAlC,CAAZ,CAFE,EAEsD;AAFtD,KAGlB+B,EAHkB,CAGf,MAHe,EAGPC,CAAC,IAAI;AACf,YAAM8C,SAAS,GAAG9C,CAAC,CAAC+C,SAApB,CADe,CACgB;;AAC/BrG,MAAAA,mBAAmB,CAACoG,SAAD,CAAnB;AACD,KANkB,CAArB;AAQAlG,IAAAA,GAAG,CAACmD,EAAJ,CAAO,OAAP,EAAgB,MAAMxE,OAAO,CAAC,IAAD,CAA7B;AACAqB,IAAAA,GAAG,CAAC6D,IAAJ,CAASkC,YAAT;AAED,GApeQ,EAoeN,CAAC3H,IAAD,EAAOC,OAAP,EAAgBE,SAAhB,EAA2BQ,MAA3B,EAAmCD,MAAnC,EAA2CR,WAA3C,EAAwDa,UAAxD,EAAoES,UAApE,EAAgFL,KAAhF,EAAuFM,gBAAvF,EAAyGlB,OAAzG,EAAkHF,MAAlH,EAA0HI,SAA1H,EAAqII,cAArI,CApeM,CAAT;AAseA,sBACE;AAAK,IAAA,GAAG,EAAEU,UAAV;AAAsB,IAAA,SAAS,EAAC,YAAhC;AAAA,2BACE;AAAK,MAAA,EAAE,EAAC,SAAR;AAAkB,MAAA,GAAG,EAAED;AAAvB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GA1gBQvB,O;UAuBYF,iB;;;KAvBZE,O;AA0gBR;AAGD,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, scaleOrdinal, axisBottom, linkHorizontal, format, drag, zoom, min, max, symbol, symbols } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport generateLinks from \"./generateLinks\";\n\nfunction Graphic({\n  data, setData,\n  activeLayer,\n  intervals, setIntervals,\n  radius,\n  info, setInfo,\n  setInflectTarget,\n  showLabel,\n  toggle,\n  scales, setScales,\n  syntacticOrder, setSyntacticOrder\n}) {\n\n  //all data is passed down from and synced to App.js\n  const activeData = activeLayer ? data.filter(d => d.layer === activeLayer) : data;\n\n  //is logical operators active?\n  const logic = isNaN(data[0].x); //Todo\n\n  //initialize reference object to pass to svg in React Dom\n  const svgRef = useRef();\n  //svg wrapped in div bc otherwise resize observer callback won't work\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState();\n\n  // //initialize links between nodes\n  const links = generateLinks(activeData);\n\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n    if (!dimensions) return;\n    //removes svgs added using append()\n    svg\n      .selectAll(\".remove\")\n      .remove();\n\n    //initialize inflections for .selectAll\n    //add cancelled class\n\n    //---scales---//\n\n    //if time matches logical operator keyword, translate into index values, then map\n    const logicScale = scaleOrdinal([\"before\", \"now\", \"after\"], [-1, 0, 1]).unknown(0);\n\n    const breakpoint = 5;\n\n\n    const xMin = min(data.map(({x}) => logic ? logicScale(x) : x));\n    const xMax = max(data.map(({x}) => logic ? logicScale(x) : x));\n    const yMin = min(data.map(({y}) => y));\n    const yMax = max(data.map(({y}) => y));\n    const rangeX = xMax-xMin; //0 is minX, 1 is maxX (reference findMinMax)\n    const rangeY = yMax-yMin;\n\n\n    //TODO: scaleTime()\n\n    //for multiple scales, generate a new scale for each x/y min - x/y max\n    /*\n    - Allow users to specify scale. x&y min max and units\n    - for each scale, generateScale()\n\n    */\n\n    function generateScales(currentScale) {\n\n      const x = scaleLinear()\n        .domain([currentScale.min, currentScale.max]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n        .range([0, dimensions.width])\n      const y = scaleLinear()\n        //if difference in y vaules greater than 5, resize to min and max\n        .domain((rangeY>breakpoint) ? [yMin, yMax] : [yMin-breakpoint, yMax+breakpoint])\n        .range([0, dimensions.height])\n      const xInverse = scaleLinear()\n        .domain([-dimensions.width, dimensions.width])\n        .range([-(currentScale.max-currentScale.min), (currentScale.max-currentScale.min)]) //maxRangeX-minRangeX gives section of x values displayed onscreen\n      const yInverse = scaleLinear()\n        .domain([-dimensions.height, dimensions.height])\n        .range((rangeY>breakpoint) ? [-rangeY, rangeY] : [-breakpoint*5, breakpoint*5])\n\n\n      return {\n        x, y, xInverse, yInverse\n      };\n    }\n\n    //scales values to screen pixels\n    /*\n    {\n      biggie: {\n        ...\n        scale: generateScale()\n      }\n      ...\n    }\n    */\n    // const xScales = () => {\n    //   Object.keys(scales).forEach(key => { //for every scale in scales data, generate an xScale\n    //     // const thisScale = scales[key];\n    //     scales[key] = {...scales[key], scale:generateScales(scales[key]).x}\n    //   });\n    //   return scales;\n    // }\n\n\n\n    const xScales = Object.keys(scales).map(key => { //for every scale in scales data, generate an xScale\n      const thisScale = scales[key];\n      return ({\n        name: key,\n        scale: scaleLinear() //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n          .domain([thisScale.min, thisScale.max])\n          .range([0, dimensions.width]),\n        yPos: thisScale.yPos,\n        units: thisScale.units,\n        scaleInverse: scaleLinear() //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n          .domain([-dimensions.width, dimensions.width])\n          .range([-(thisScale.max-thisScale.min), (thisScale.max-thisScale.min)])\n      })\n    });\n\n    /*\n      xScales(generateScales(scaleLinear(scale)))\n      - take xScale and rescale according to transformations (newXScale)\n      - update each array entry's domain with that of newXScale\n    */\n    //if there is a zoom transform, override each xScales.scale with adjusted scale\n    if (currentZoomState) {\n      xScales.forEach((thisScale, i) => {\n        const newXScale = currentZoomState.rescaleX(thisScale.scale); //zoom state comes w methods for transformations\n        xScales[i].scale = newXScale; //sets domain to newXScale domain\n\n      });\n\n\n    };\n    // const xScale = scaleLinear()\n    //   .domain([xMin, xMax]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n    //   .range([0, dimensions.width]);\n    const yScale = scaleLinear()\n      //if difference in y vaules greater than 5, resize to min and max\n      .domain((rangeY>breakpoint) ? [yMin, yMax] : [yMin-breakpoint, yMax+breakpoint])\n      .range([0, dimensions.height]);\n    //inverse scales for drag behavior\n    // const xScaleInverse = scaleLinear()\n    //   .domain([-dimensions.width, dimensions.width])\n    //   .range([-rangeX, rangeX]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n    const yScaleInverse = scaleLinear()\n      .domain([-dimensions.height, dimensions.height])\n      .range((rangeY>breakpoint) ? [-rangeY, rangeY] : [-breakpoint*5, breakpoint*5]);\n\n\n\n\n\n    //---draw intervals---//\n    if (intervals.length) {\n      svg\n      .selectAll(\".intervals\")\n      .data(intervals)\n      .join(\"rect\")\n      .attr(\"class\", \"intervals\")\n      .attr(\"x\", d => xScales.find(n => n.name === d.scale).scale(d.start))\n      // .attr(\"x\", n => generateScales(scales[n.scale]).x(n.start))\n      // .attr(\"y\", n => n.yStart ? yScale(n.yStart) : yScale(minMax[2]))\n      .attr(\"y\", n => n.yStart ? yScale(n.yStart) : 0) //todo\n      .attr(\"width\", d => xScales.find(n => n.name === d.scale).scale(d.end) - xScales.find(n => n.name === d.scale).scale(d.start))\n      .attr(\"height\", n => {\n        if (n.yStart & n.yEnd) {\n          return (yScale(n.yEnd)-yScale(n.yStart))\n        } else if (n.yStart) {\n          return (yScale(yMax+10)-yScale(n.yStart))\n        } else {\n          return (yScale(yMax+10)) //todo\n          // return (yScale(minMax[3])-yScale(minMax[2]))\n        }})\n      .attr(\"opacity\", n => n.opacity ? n.opacity : 0.5)\n      .attr(\"fill\", n => n.color ? n.color : \"#999\")\n      .attr(\"stroke\", \"black\") //todo\n      .attr(\"stroke-width\", n => n.importance ? n.importance*2 : 0)\n      .on(\"click\", (e, target) => {\n        //displays interval properties when clicked\n        if (toggle===\"certainty\" || toggle===\"importance\") {\n          setInflectTarget(target);\n        } else {\n          setInfo({position: [e.x, e.y], target: target, type: \"interval\"});  //todo: set info to null when clicking again\n        }\n        e.stopPropagation();\n      });\n    }\n\n    //---draw bottom axis---//\n\n    xScales.forEach(thisScale => {\n      const xAxis = axisBottom(thisScale.scale)\n      .tickFormat(format(''));\n\n      svg\n        .append(\"g\") //todo\n        .attr(\"class\", \"remove\")\n        .style(\"transform\", `translateY(${dimensions.height*thisScale.yPos}px)`)\n        .call(xAxis)\n        .raise()\n        .call(g => g.select(\".domain\") //removes solid black axis bar\n          .remove())\n        .call(g => g.selectAll(\".tick line\") //styles individual ticks\n          .attr(\"stroke-opacity\", 0.5))\n        .call(g => g.selectAll(\".tick text\")\n          .attr(\"y\", 10) //todo?\n          .attr(\"opacity\", 0.5));\n      svg\n        .append(\"text\")\n        .text(thisScale.units)\n        .attr(\"class\", \"axisLabel smallTxt remove\")\n        .attr(\"x\", dimensions.width/2)\n        .attr(\"y\", dimensions.height*(thisScale.yPos+.07))\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"opacity\", 0.5);\n      }\n    );\n\n\n    // const xAxis = axisBottom(generateScales(scales.smalls).x)\n    //   // .tickSize(-dimensions.height) //tick extends to entire height of svg\n    //   .tickValues(logic ? [-1, 0, 1] : null)\n    //   .tickFormat(logic ? x => scaleOrdinal([-1, 0, 1], [\"before\", \"now\", \"after\"])(x) : format('')); //gets rid of , for 1000s groupings\n\n    // svg\n    //   .select(\".x-axis\") //selects and replaces .x-axis\n    //   .style(\"transform\", `translateY(${dimensions.height}px)`)\n    //   .call(xAxis)\n    //   .raise()\n      // .call(g => g.select(\".domain\") //removes solid black axis bar\n      //   .remove())\n      // .call(g => g.selectAll(\".tick line\") //styles individual ticks\n      //   .attr(\"stroke-opacity\", 0.5))\n      //   // .attr(\"stroke-dasharray\", \"2,2\"))\n      // .call(g => g.selectAll(\".tick text\")\n      //   .attr(\"y\", 10) //todo?\n      //   .attr(\"opacity\", 0.5));\n      //   // .attr(\"font-size\", fontSize*.8)); //replace class \"x-axis\" w xAxis\n    //\n\n    //--drag behavior--//\n    const dragged = drag()\n      // .on(\"start\", e => {\n      //   select(this).attr(\"stroke\", \"black\");\n      // })\n      .on(\"drag\", e => {\n        //todo (round new position to .01)\n        // const dx = generateScales(scales[e.subject.scale]).xInverse(e.dx);\n        const dx = xScales.scaleInverse\n        const dy = yScaleInverse(e.dy);\n        const newNodes = [...data]; //always make a copy when updating array\n        //find array element in data with matching ID and set new x y coordinates\n        newNodes.find(n => n.id === e.subject.id).x += dx;\n        newNodes.find(n => n.id === e.subject.id).y += dy;\n        setData(newNodes);\n      });\n\n    //---draw links---//\n    const linker = linkHorizontal()\n      .source(link => link.source)\n      .target(link => link.target)\n      // .x(n => generateScales(scales[n.scale]).x(logic ? logicScale(n.x) : n.x))\n      .x(d => xScales.find(n => n.name === d.scale).scale(d.x))\n      .y(d => yScale(d.y));\n\n    svg\n      .selectAll(\".link\")\n      .data(links)\n      .join(\"path\")\n      .raise()\n      .attr(\"class\", \"link pointer\")\n      .attr(\"d\", linker)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", n => n.color? n.color : \"black\")\n      .attr(\"stroke-width\", n => n.width ? n.width : radius/3)\n      .attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1)\n      .attr(\"stroke-dasharray\", n => n.dashed ? n.dashed : null)\n      .on(\"click\", (e, target) => {\n        // if (toggle===\"causality\") {\n        //   //must select at least 2 temporal objects\n        //\n        // } else if (toggle===\"foreshadowing\") {\n        //   if (!target.target) { //if target is an endpoint, indeterminate end\n        //\n        //\n        //   } else { //otherwise, change mouse to no symbol\n        //\n        //   }\n        //   //option to adjust gradient eventually\n        // } else\n        if (toggle===\"certainty\" || toggle===\"importance\") {\n          setInflectTarget(target);\n        } else {\n          console.log(e)\n          setInfo({position: [e.x, e.y], target: target, type: \"link\"}); //displays line properties when clicked\n        }\n        e.stopPropagation();\n      });\n\n\n    //---draw points---//\n    svg\n      .selectAll(\".node\")\n      .data(activeData.filter(d => !d.foreshadowing && !d.cancelled))\n      .join(\"circle\")\n      .raise()\n      .attr(\"class\", \"node pointer\")\n      .attr(\"r\", n => n.radius? n.radius : radius) //todo for accessibility\n      .attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n      .attr(\"opacity\", d => d.opacity ? d.opacity : 1)\n      // .attr(\"cx\", d => generateScales(scales[d.scale]).x(logic ? logicScale(d.x) : d.x))\n      .attr(\"cx\", d => xScales.find(n => n.name === d.scale).scale(d.x)) //todo\n      .attr(\"cy\", d => yScale(d.y))\n      .call(dragged)\n      .on(\"click\", (e, target) => {\n        if (toggle===\"cancelled\") {\n          const newNodes = [...data];\n          const node = newNodes.find(n => n.id === target.id);\n          node.cancelled = true;\n          setData(newNodes);\n        } else if (toggle===\"connection\") {\n          const newOrder = [...syntacticOrder];\n          if (newOrder[2]===0) { //set 2nd selection\n            newOrder[1] = target;\n            newOrder[2] = 1;\n          } else { //set 1st selection\n            newOrder[0] = target;\n            newOrder[2] = 0;\n          }\n          setSyntacticOrder(newOrder);\n        } else if (toggle===\"foreshadowing\") { //todo: adjust gradient\n          if (!target.target) { //if target is an endpoint, indeterminate end\n            const newNodes = [...data];\n            const node = newNodes.find(n => n.id === target.id);\n            node.foreshadowing = true;\n            setData(newNodes);\n          } else { //otherwise, change mouse to no symbol\n            console.log(\"forbidden\");\n          }\n        } else if (toggle===\"certainty\" || toggle===\"importance\"){\n          setInflectTarget(target);\n        } else {\n          setInfo({position: [e.x, e.y], target: target}); //displays node properties when clicked\n        }\n        e.stopPropagation(); //stops deselect when bg is clicked\n      });\n\n    //---draw inflections---//\n\n    //--draw connetion inflection--//\n    //circle around point\n    svg\n      .selectAll(\".connections\")\n      .data(activeData.filter(d => d.connections))\n      .join(\"circle\")\n      .raise()\n      .attr(\"class\", \"connections pointer\")\n      .attr(\"r\", n => n.radius? n.radius*1.5 : radius*2) //todo for accessibility\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-dasharray\", \"3\")\n      // .attr(\"opacity\", d => d.opacity ? d.opacity : 1)\n      .attr(\"cx\", d => xScales.find(n => n.name === d.scale).scale(d.x)) //todo\n      .attr(\"cy\", d => yScale(d.y));\n\n    //link connecting circles\n    const ctLinker = linkHorizontal()\n      .source(node => data.find(x => x.id === node.id))\n      // .target(node => typeof(node.connections[0])===\"object\" ? node.connections[0] : data.find(x => x.id === node.connections[0]))\n      .target(() => {\n        const y = yScaleInverse(742);\n        const x = xScales.find(n => n.name === \"biggie\").scale(903)\n        return {x: 903, y: y}\n      }) //822, 502\n      // .target(node => data.find(x => x.id === node.connections[0]))\n      .x(d => d.scale?xScales.find(n => n.name === d.scale).scale(d.x):d.x)\n      .y(d => yScale(d.y));\n    svg\n      .selectAll(\".connectionLinks\")\n      .data(activeData.filter(n => n.connections && !n.connections[1])) //link starts from 1st one\n      .join(\"path\")\n      .raise()\n      .attr(\"class\", \"connectionLinks pointer\")\n      .attr(\"d\", ctLinker)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"black\")\n      // .attr(\"stroke\", n => n.color? n.color : \"black\")\n      // .attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1)\n      .attr(\"stroke-dasharray\", \"3\")\n\n    //initialize custom symbols\n    const cancelledSymbol = {\n      draw: (context, size) => {\n        let s = Math.sqrt(size)/2;\n            context.moveTo(s,0);\n            context.lineTo(s*2,s);\n            context.lineTo(s,s*2);\n            context.lineTo(0,s);\n            context.lineTo(-s,s*2);\n            context.lineTo(-s*2,s);\n            context.lineTo(-s,0);\n            context.lineTo(-s*2,-s);\n            context.lineTo(-s,-s*2);\n            context.lineTo(0,-s);\n            context.lineTo(s,-s*2);\n            context.lineTo(s*2,-s);\n            context.closePath();\n      }\n    };\n    //foreshadowing symbol\n    const fsSymbol = {\n      draw: (context, size) => {\n        let s = size;\n            context.moveTo(0,0);\n            context.lineTo(s*2,s/2);\n            context.lineTo(s*2,-s/2);\n            context.closePath();\n      }\n    };\n    //foreshadowing gradient\n    var fsg = svg.append(\"defs\").append(\"linearGradient\")\n    .attr(\"id\", \"fsgradient\")//id of the gradient\n    .attr(\"x1\", \"0%\")\n    .attr(\"x2\", \"100%\") //since its a horizontal linear gradient\n    .attr(\"y1\", \"0%\")\n    .attr(\"y2\", \"0%\");\n\n    fsg.append(\"stop\")\n    .attr(\"offset\", \"0%\")\n    .style(\"stop-color\", \"black\")//start in black. TODO\n    .style(\"stop-opacity\", 1);\n\n    fsg.append(\"stop\")\n    .attr(\"offset\", \"100%\")\n    .style(\"stop-color\", \"black\")//end in transparent\n    .style(\"stop-opacity\", 0);\n\n    //---draw symbols---//\n    //todo: doesn't work when cancelled is true from the start\n    svg\n      .selectAll(\".cancelled\")\n      .data(activeData.filter(d => d.cancelled))\n      .join(\"path\")\n      .raise()\n      .attr(\"class\", \"cancelled pointer\")\n      .attr(\"d\", symbol(cancelledSymbol, radius*radius*5))\n      .attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n      .attr(\"transform\", d => `translate(${xScales.find(n => n.name === d.scale).scale(d.x)}, ${yScale(d.y)})`)\n      .on(\"click\", (e, target) => {\n        if (toggle===\"cancelled\") {\n          const newNodes = [...data];\n          const node = newNodes.find(n => n.id === target.id);\n          delete node.cancelled;\n          setData(newNodes);\n        } else {\n          setInfo({position: [e.x, e.y], target: target}); //displays node properties when clicked\n        }\n        e.stopPropagation();\n      });\n\n    //---draw foreshadowing---//\n    svg\n      .selectAll(\".foreshadowing\")\n      .data(activeData.filter(d => d.foreshadowing))\n      .join(\"path\")\n      .raise()\n      .attr(\"class\", \"foreshadowing pointer\")\n      .attr(\"d\", symbol(fsSymbol, radius*radius*5))\n      .style(\"fill\", \"url(#fsgradient)\")\n      .attr(\"transform\", d => `translate(${xScales.find(n => n.name === d.scale).scale(d.x)}, ${yScale(d.y)})`)\n      .on(\"click\", (e, target) => {\n        if (toggle===\"foreshadowing\") {\n          const newNodes = [...data];\n          const node = newNodes.find(n => n.id === target.id);\n          delete node.foreshadowing;\n          setData(newNodes);\n        } else {\n          setInfo({position: [e.x, e.y], target: target}); //displays node properties when clicked\n        }\n        e.stopPropagation();\n      });\n\n    //---draw labels---//\n    svg\n      .selectAll(\".label\")\n      .data(activeData)\n      .join(\"text\")\n      .raise()\n      .attr(\"class\", \"label\")\n      .text(node => showLabel ? node.name : node.id)\n      .attr(\"x\", d => xScales.find(n => n.name === d.scale).scale(d.x))\n      .attr(\"y\", d => yScale(d.y + (rangeY>breakpoint ? rangeY*.06 : breakpoint/5))) //vertical offset. see scales\n      .attr(\"text-anchor\", \"middle\");\n      // .attr(\"font-size\", fontSize);\n\n\n    //---zoom---//\n    const zoomBehavior = zoom()\n      .scaleExtent([0.25, 5]) //can zoom 2x smaller and 5x bigger\n      .translateExtent([[-100, 0], [dimensions.width+100, dimensions.height]]) //limits how far graph can pan\n      .on(\"zoom\", e => {\n        const zoomState = e.transform; //returns zoom transformations as an object\n        setCurrentZoomState(zoomState);\n      });\n\n    svg.on(\"click\", () => setInfo(null));\n    svg.call(zoomBehavior);\n\n  }, [data, setData, intervals, scales, toggle, activeLayer, activeData, dimensions, logic, currentZoomState, setInfo, radius, showLabel, syntacticOrder]);\n\n  return (\n    <div ref={wrapperRef} className=\"svgWrapper\">\n      <svg id=\"graphic\" ref={svgRef}>\n      </svg>\n    </div>\n  );\n};\n\n\nexport default Graphic;\n"]},"metadata":{},"sourceType":"module"}