{"ast":null,"code":"import _slicedToArray from\"/Users/skye/Desktop/Portfolio/chronovis/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import ResizeObserver from\"resize-observer-polyfill\";//otherwise breaks in safari and edge\n/**\n* A hook that defines an html dom element for ResizeObserver to watch\n**/var useResizeObserver=function useResizeObserver(ref){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),dimensions=_useState2[0],setDimensions=_useState2[1];//only access reference (aka the svg) when it's rendered\nuseEffect(function(){var observeTarget=ref.current;//create new resize observer w callback that takes resize target as args\nvar resizeObserver=new ResizeObserver(function(entries){//contentRect is the part ResizeObserver returns that has xy dimensions\nentries.forEach(function(entry){setDimensions(entry.contentRect);});});resizeObserver.observe(observeTarget);//cleanup function when unmount\nreturn function(){resizeObserver.unobserve(observeTarget);};},[ref]);return dimensions;};export default useResizeObserver;","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/chronovis/src/components/useResizeObserver.js"],"names":["useEffect","useState","ResizeObserver","useResizeObserver","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","entries","forEach","entry","contentRect","observe","unobserve"],"mappings":"8JAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,MAAOC,CAAAA,cAAP,KAA2B,0BAA3B,CAAuD;AAEvD;AACA;AACA,GAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAAC,GAAG,CAAI,CAC/B,cAAoCH,QAAQ,CAAC,IAAD,CAA5C,wCAAOI,UAAP,eAAmBC,aAAnB,eACA;AACAN,SAAS,CAAC,UAAM,CACd,GAAMO,CAAAA,aAAa,CAAGH,GAAG,CAACI,OAA1B,CACA;AACA,GAAMC,CAAAA,cAAc,CAAI,GAAIP,CAAAA,cAAJ,CAAmB,SAACQ,OAAD,CAAa,CACtD;AACAA,OAAO,CAACC,OAAR,CAAgB,SAAAC,KAAK,CAAI,CACvBN,aAAa,CAACM,KAAK,CAACC,WAAP,CAAb,CACD,CAFD,EAGD,CALuB,CAAxB,CAMAJ,cAAc,CAACK,OAAf,CAAuBP,aAAvB,EACA;AACA,MAAO,WAAM,CACXE,cAAc,CAACM,SAAf,CAAyBR,aAAzB,EACD,CAFD,CAGD,CAdQ,CAcN,CAACH,GAAD,CAdM,CAAT,CAeA,MAAOC,CAAAA,UAAP,CACD,CAnBD,CAqBA,cAAeF,CAAAA,iBAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\"; //otherwise breaks in safari and edge\n\n/**\n* A hook that defines an html dom element for ResizeObserver to watch\n**/\n\nconst useResizeObserver = ref => {\n  const [dimensions, setDimensions] = useState(null);\n  //only access reference (aka the svg) when it's rendered\n  useEffect(() => {\n    const observeTarget = ref.current;\n    //create new resize observer w callback that takes resize target as args\n    const resizeObserver =  new ResizeObserver((entries) => {\n      //contentRect is the part ResizeObserver returns that has xy dimensions\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    //cleanup function when unmount\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n"]},"metadata":{},"sourceType":"module"}