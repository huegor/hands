{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, scaleOrdinal, axisBottom, axisLeft, linkHorizontal, format, drag, zoom, min, max, symbol, symbols } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport generateIntervals from \"./generateIntervals\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Graphic({\n  data,\n  setData,\n  activeLayer,\n  zones,\n  setZones,\n  radius,\n  info,\n  setInfo,\n  setInflectTarget,\n  showLabel,\n  toggle,\n  setToggle,\n  scales,\n  setScales,\n  syntacticOrder,\n  setSyntacticOrder,\n  activeScale\n}) {\n  _s();\n\n  //all data is passed down from and synced to App.js\n  const activeData = Object.entries(data); //convert json to array for faster processing\n\n  const activeZones = Object.entries(zones); //TODO: layers\n  // const activeData = activeLayer ? Object.entries(data).filter(([k,v]) => v.layer === activeLayer) : arrayData;\n  //convert scale object to array for faster processing\n  //is logical operators active?\n\n  const logic = data.length ? isNaN(data[0].x) : null; //TODO: refine logical operators\n  //initialize reference object to pass to svg in React Dom\n\n  const svgRef = useRef(); //svg wrapped in div bc otherwise resize observer callback won't work\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState(); // //initialize intervals between instants\n\n  const intervals = generateIntervals(data); //TODO: write updateIntervals function\n  //initialize variables\n\n  /*\n  var xMin = min(Object.entries(data).map(([key, {x}]) => logic ? logicScale(x) : x));\n  var xMax = max(Object.entries(data).map(([key, {x}]) => logic ? logicScale(x) : x));\n  var yMin = min(Object.entries(data).map(([key, {y}]) => y));\n  var yMax = max(Object.entries(data).map(([key, {y}]) => y));\n  */\n  //init d3 scales\n\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n\n    if (!dimensions) return; //removes svgs added using append()\n\n    svg.selectAll(\".remove\").remove(); //---scales---//\n    //if time matches logical operator keyword, translate into index values, then map\n\n    const logicScale = scaleOrdinal([\"before\", \"now\", \"after\"], [-1, 0, 1]).unknown(0);\n    const breakpoint = 5;\n    const xMin = min(Object.entries(data).map(([key, {\n      x\n    }]) => logic ? logicScale(x) : x));\n    const xMax = max(Object.entries(data).map(([key, {\n      x\n    }]) => logic ? logicScale(x) : x));\n    const yMin = min(Object.entries(data).map(([key, {\n      y\n    }]) => y));\n    const yMax = max(Object.entries(data).map(([key, {\n      y\n    }]) => y));\n    const rangeX = xMax - xMin; //0 is minX, 1 is maxX (reference findMinMax)\n\n    const rangeY = yMax - yMin;\n    /*\n    - Allow users to specify scale. x&y min max and units\n    - for each scale, generateScale()\n    */\n\n    function generateScales(currentScale) {\n      //TODO: turn into dedicated scaleDrag\n      const xInverse = scaleLinear().domain([0, dimensions.width]).range([currentScale.min, currentScale.max]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n\n      const xDrag = scaleLinear().domain([-dimensions.width, dimensions.width]).range([-(currentScale.domain()[1] - currentScale.domain()[0]), currentScale.domain()[1] - currentScale.domain()[0]]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n\n      const yInverse = scaleLinear().domain([-dimensions.height, dimensions.height]).range(rangeY > breakpoint ? [-rangeY, rangeY] : [-breakpoint * 5, breakpoint * 5]);\n      return {\n        xInverse,\n        xDrag,\n        yInverse\n      };\n    } //TODO: fromEntries & entries not compatible with some older browsers\n\n\n    const xScales = Object.fromEntries( //for every scale in scales data, generate an xScale\n    Object.entries(scales).map(([key, thisScale]) => [key, {\n      scale: scaleLinear() //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n      .domain([thisScale.min, thisScale.max]).range([0, dimensions.width]),\n      hasSegments: thisScale.segments.length ? true : false,\n      yPos: thisScale.yPos,\n      units: `${key} (${thisScale.units})`,\n      tickValues: thisScale.tickValues ? thisScale.tickValues : null,\n      scaleInverse: scaleLinear() //for NewInstantForm\n      .domain([0, dimensions.width]).range([thisScale.min, thisScale.max])\n    }]));\n\n    const xSegments = () => {\n      const segments = [];\n      Object.keys(scales).forEach((key, i) => {\n        const thisScale = scales[key]; // const segments = [];\n\n        if (!thisScale.segments.length) {\n          return;\n        }\n\n        thisScale.segments.map(n => {\n          const min = n.min ? n.min : thisScale.min; //if segment contains a min, set that as min. otherwise, set scale min as min.\n\n          const max = n.max ? n.max : thisScale.max; // console.log(xScales[i].scale(min));\n\n          segments.push({\n            scale: key,\n            yPos: thisScale.yPos,\n            proportion: (max - min) / (thisScale.max - thisScale.min),\n            segment: scaleLinear().domain([min, max]).range([xScales[key].scale(min), xScales[key].scale(max)])\n          });\n        });\n      });\n      return segments;\n    };\n    /*\n      xScales(generateScales(scaleLinear(scale)))\n      - take xScale and rescale according to transformations (newXScale)\n      - update each array entry's domain with that of newXScale\n    */\n    //if there is a zoom transform, override each xScales.scale with adjusted scale\n\n\n    if (currentZoomState) {\n      Object.entries(xScales).forEach(([key, thisScale]) => {\n        const newXScale = currentZoomState.rescaleX(thisScale.scale); //zoom state comes w methods for transformations\n\n        const newMin = newXScale.domain()[0];\n        const newMax = newXScale.domain()[1]; //applies zoom transformations to scale + scaleInverse\n\n        xScales[key].scale = newXScale;\n      });\n    }\n\n    ; // const xScale = scaleLinear()\n    //   .domain([xMin, xMax]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n    //   .range([0, dimensions.width]);\n\n    const yScale = scaleLinear() //if difference in y vaules greater than 5, resize to min and max\n    .domain(rangeY > breakpoint ? [yMin, yMax] : [yMin - breakpoint, yMax + breakpoint]).range([0, dimensions.height]); //inverse scales for drag behavior\n    // const xScaleInverse = scaleLinear()\n    //   .domain([-dimensions.width, dimensions.width])\n    //   .range([-rangeX, rangeX]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n\n    const yScaleInverse = scaleLinear().domain([-0, dimensions.height]).range(rangeY > breakpoint ? [yMin, yMax] : [yMin - breakpoint, yMax + breakpoint]);\n    const yScaleInverseDrag = scaleLinear().domain([-dimensions.height, dimensions.height]).range(rangeY > breakpoint ? [-rangeY, rangeY] : [-breakpoint * 5, breakpoint * 5]); //draw\n    //---draw bottom axis---//\n\n    xSegments().forEach(n => {\n      const segment = axisBottom(n.segment) // .ticks(n.proportion<.33?5:null, \"f\");\n      .ticks(null, \"f\");\n      svg.append(\"g\").attr(\"class\", \"remove\").style(\"transform\", `translateY(${dimensions.height * n.yPos}px)`).call(segment).raise().call(g => g.select(\".domain\") //removes solid black axis bar\n      .remove()).call(g => g.selectAll(\".tick line\") //styles individual ticks\n      .attr(\"stroke-opacity\", 0.5)).call(g => g.selectAll(\".tick text\").attr(\"y\", 10).attr(\"opacity\", (d, i) => {\n        //TODO: remove instead of setting opacity to 0\n        if (n.proportion < .25 && i % 3) {\n          //less than 1/4, label every 3 ticks\n          return 0;\n        } else if (n.proportion < .33 && i % 2) {\n          //less than 1/3, label every other tick\n          return 0;\n        } else {\n          return 0.5;\n        }\n      }));\n    });\n    Object.entries(xScales).forEach(([key, thisScale]) => {\n      const xAxis = axisBottom(thisScale.scale).tickValues(thisScale.tickValues).tickFormat(format(''));\n\n      if (!thisScale.hasSegments || thisScale.tickValues) {\n        svg.append(\"g\").attr(\"class\", \"remove\").style(\"transform\", `translateY(${dimensions.height * thisScale.yPos}px)`).call(xAxis).raise().call(g => g.select(\".domain\") //removes solid black axis bar\n        .remove()).call(g => g.selectAll(\".tick line\") //styles individual ticks\n        .attr(\"stroke-opacity\", 0.5)).call(g => g.selectAll(\".tick text\").attr(\"y\", 10) //TODO: dynamic tick text spacing for accessibility\n        .attr(\"opacity\", 0.5));\n      }\n\n      svg.append(\"text\").text(thisScale.units).attr(\"class\", \"axisLabel smallTxt remove\").attr(\"x\", dimensions.width / 2).attr(\"y\", dimensions.height * (thisScale.yPos + .07)).attr(\"text-anchor\", \"middle\").attr(\"opacity\", 0.5);\n    }); //--draw vertical axis--//\n\n    const yAxis = axisLeft(yScale);\n    svg.append(\"g\").attr(\"class\", \"remove\") // .style(\"transform\", `translateY(${dimensions.height*thisScale.yPos}px)`)\n    .call(yAxis).raise().call(g => g.select(\".domain\") //removes solid black axis bar\n    .remove()).call(g => g.selectAll(\".tick line\") //styles individual ticks\n    .attr(\"stroke-opacity\", 0.5)).call(g => g.selectAll(\".tick text\").attr(\"y\", 10) //TODO: dynamic tick text spacing for accessibility\n    .attr(\"opacity\", 0.5));\n  }, [scales, activeLayer, activeData, dimensions, logic, currentZoomState]); //all d3 shennanigans goes in this hook. called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n\n    if (!dimensions) return; //removes svgs added using append()\n\n    svg.selectAll(\".remove\").remove(); //rounding for data inputted thru paintbox interface\n\n    function round(value, range) {\n      const precision = Math.log10(range) < 1 ? -Math.floor(Math.log10(range) - 1) : 0;\n      return Math.round(value * Math.pow(10, precision)) / Math.pow(10, precision);\n    } //---draw zones---//\n\n\n    if (activeZones.length) {\n      svg.selectAll(\".zones\").data(activeZones).join(\"rect\").attr(\"class\", \"zones\").attr(\"x\", ([k, v]) => xScales[v.scale].scale(v.start)) // .attr(\"x\", n => generateScales(scales[n.scale]).x(n.start))\n      // .attr(\"y\", n => n.yStart ? yScale(n.yStart) : yScale(minMax[2]))\n      .attr(\"y\", ([k, v]) => v.yStart ? yScale(v.yStart) : yMin - 10) //TODO: if no yStart, minimum y value\n      .attr(\"width\", ([k, v]) => xScales[v.scale].scale(v.end) - xScales[v.scale].scale(v.start)).attr(\"height\", ([k, v]) => {\n        if (v.yStart & v.yEnd) {\n          return yScale(v.yEnd) - yScale(v.yStart);\n        } else if (v.yStart) {\n          return yScale(yMax + 10) - yScale(v.yStart);\n        } else {\n          return yScale(yMax + 10); //TODO: if no yStart, minimum y value\n          // return (yScale(minMax[3])-yScale(minMax[2]))\n        }\n      }).attr(\"opacity\", ([k, v]) => v.opacity ? v.opacity : 0.5).attr(\"fill\", ([k, v]) => v.color ? v.color : \"#999\").attr(\"stroke\", \"black\") //TODO: stroke be different colors\n      .attr(\"stroke-width\", ([k, v]) => v.importance ? v.importance * 2 : 0).on(\"click\", (e, target) => {\n        if (toggle === \"certainty\" || toggle === \"importance\") {\n          //pulls up inflection menu\n          setInflectTarget(target);\n        } else {\n          //displays zone properties when clicked\n          setInfo(null); //clear InfoBox\n\n          setInfo({\n            position: [e.x, e.y],\n            target: target,\n            type: \"zone\"\n          }); //TODO: set info to null when clicking same zone again\n        }\n\n        e.stopPropagation();\n      });\n    } //--drag behavior--//\n\n\n    const dragged = drag() // .on(\"start\", e => {\n    //   select(this).attr(\"stroke\", \"black\");\n    // })\n    .on(\"drag\", e => {\n      // console.log(e.subject[1]);\n      //TODO: extract precision function to round new pos\n      const dx = generateScales(xScales[e.subject[1].scale].scale).xDrag(e.dx); // const dx = xScales.scaleInverse\n\n      const dy = yScaleInverseDrag(e.dy);\n      const newInstants = { ...data\n      }; //always make a copy when updating array\n      //find array element in data with matching ID and set new x y coordinates\n\n      newInstants[e.subject[0]].x += dx;\n      newInstants[e.subject[0]].y += dy;\n      setData(newInstants);\n    });\n\n    if (Object.entries(data).length) {\n      //---draw intervals---//\n      const intervaler = linkHorizontal().source(interval => interval.source[1]).target(interval => interval.target[1]) // .x(n => generateScales(scales[n.scale]).x(logic ? logicScale(n.x) : n.x))\n      .x(d => xScales[d.scale].scale(d.x)).y(d => yScale(d.y));\n      svg.selectAll(\".interval\").data(intervals).join(\"path\").raise().attr(\"class\", \"interval pointer\").attr(\"d\", intervaler).attr(\"fill\", \"none\").attr(\"stroke\", n => n.color ? n.color : \"black\").attr(\"stroke-width\", n => n.width ? n.width : radius / 2).attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1).attr(\"stroke-dasharray\", n => n.dashed ? n.dashed : null).on(\"click\", (e, target) => {\n        if (toggle === \"connection\") {\n          const newOrder = [...syntacticOrder];\n\n          if (newOrder[2] === 0) {\n            //set 2nd selection\n            newOrder[1] = {\n              x: generateScales(scales[activeScale]).xInverse(e.layerX),\n              y: yScaleInverse(e.layerY),\n              scale: activeScale\n            }; //scale TODO\n\n            newOrder[2] = 1;\n          } else {\n            //set 1st selection\n            newOrder[0] = {\n              x: generateScales(scales[activeScale]).xInverse(e.layerX),\n              y: yScaleInverse(e.layerY),\n              scale: activeScale\n            };\n            newOrder[2] = 0;\n          }\n\n          setSyntacticOrder(newOrder);\n        } //else if (toggle===\"foreshadowing\") {\n        //   if (!target.target) { //if target is an endpoint, indeterminate end\n        //\n        //\n        //   } else { //otherwise, change mouse to no symbol\n        //\n        //   }\n        //   //option to adjust gradient eventually\n        // } else\n        else if (toggle === \"certainty\" || toggle === \"importance\") {\n            setInflectTarget(target);\n          } else {\n            setInfo(null); //clear InfoBox\n\n            setInfo({\n              position: [e.x, e.y],\n              target: target,\n              type: \"interval\"\n            }); //displays interval properties when clicked\n          }\n\n        e.stopPropagation();\n      }); //---draw instants---//\n\n      svg.selectAll(\".instant\") // .data(activeData.filter(d => !d.foreshadowing && !d.cancelled))\n      .data(activeData).join(\"circle\").raise().attr(\"class\", \"instant pointer\").attr(\"r\", ([k, v]) => v.radius ? v.radius : radius) //TODO: custom radius accessibility\n      .attr(\"fill\", ([k, v]) => v.color ? v.color : \"black\") //if it has a color other than black, use that\n      .attr(\"opacity\", ([k, v]) => v.opacity ? v.opacity : 1) // .attr(\"cx\", d => generateScales(scales[d.scale]).x(logic ? logicScale(d.x) : d.x))\n      .attr(\"cx\", ([k, v]) => xScales[v.scale].scale(v.x)) //scale x coordinate based on xScale defined in instant's scale property\n      .attr(\"cy\", ([k, v]) => yScale(v.y)).call(dragged).on(\"click\", (e, target) => {\n        switch (toggle) {\n          case \"cancelled\":\n            const newInstants = [...data];\n            const instant = newInstants.find(n => n.id === target.id);\n            instant.cancelled = true;\n            setData(newInstants);\n            break;\n\n          case \"connection\":\n            const newOrder = [...syntacticOrder];\n\n            if (newOrder[2] === 0) {\n              //set 2nd selection\n              newOrder[1] = target;\n              newOrder[2] = 1;\n            } else {\n              //set 1st selection\n              newOrder[0] = target;\n              newOrder[2] = 0;\n            }\n\n            setSyntacticOrder(newOrder);\n            break;\n\n          case \"foreshadowing\":\n            if (!target.target) {\n              //if target is an endpoint, indeterminate end\n              const newInstants = [...data];\n              const instant = newInstants.find(n => n.id === target.id);\n              instant.foreshadowing = true;\n              setData(newInstants);\n            } else {\n              //otherwise, change mouse to no symbol\n              console.log(\"forbidden\");\n            }\n\n            break;\n\n          case \"certainty\":\n            setInflectTarget(target);\n            break;\n\n          case \"importance\":\n            setInflectTarget(target);\n            break;\n\n          default:\n            setInfo(null); //clear InfoBox\n\n            setInfo({\n              position: [e.x, e.y],\n              target: target\n            });\n          //displays instant properties when clicked\n        } // if (toggle===\"cancelled\") {\n        //   const newInstants = [...data];\n        //   const instant = newInstants.find(n => n.id === target.id);\n        //   instant.cancelled = true;\n        //   setData(newInstants);\n        // } else if (){\n        //\n        // } else if (toggle===\"connection\") {\n        //   const newOrder = [...syntacticOrder];\n        //   if (newOrder[2]===0) { //set 2nd selection\n        //     newOrder[1] = target;\n        //     newOrder[2] = 1;\n        //   } else { //set 1st selection\n        //     newOrder[0] = target;\n        //     newOrder[2] = 0;\n        //   }\n        //   setSyntacticOrder(newOrder);\n        // } else if (toggle===\"foreshadowing\") { //todo: adjust gradient\n        //   if (!target.target) { //if target is an endpoint, indeterminate end\n        //     const newInstants = [...data];\n        //     const instant = newInstants.find(n => n.id === target.id);\n        //     instant.foreshadowing = true;\n        //     setData(newInstants);\n        //   } else { //otherwise, change mouse to no symbol\n        //     console.log(\"forbidden\");\n        //   }\n        // } else if (toggle===\"certainty\" || toggle===\"importance\"){\n        //   setInflectTarget(target);\n        // } else {\n        //   setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n        // }\n\n\n        e.stopPropagation(); //stops deselect when bg is clicked\n      });\n      /*//---draw inflections---//\n       //--draw connetion inflection--//\n      //circle around instant\n      svg\n        .selectAll(\".connections\")\n        .data(activeData.filter(d => d.connections))\n        .join(\"circle\")\n        .raise()\n        .attr(\"class\", \"connections pointer\")\n        .attr(\"r\", n => n.radius? n.radius*1.5 : radius*2) //TODO: custom radius accessibility\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-dasharray\", \"3\")\n        // .attr(\"opacity\", d => d.opacity ? d.opacity : 1)\n        .attr(\"cx\", d => xScales[d.scale].scale(d.x)) //scale x coordinate based on xScale defined in instant's scale property\n        .attr(\"cy\", d => yScale(d.y));\n       //link connecting circles\n      const ctLinker = linkHorizontal()\n        .source(instant => data.find(x => x.id === instant.id))\n        .target(instant => typeof(instant.connections[0])===\"object\" ? instant.connections[0] : data.find(x => x.id === instant.connections[0]))\n        // .target(() => {\n        //   //layerX, layerY\n        //   const y = yScaleInverse(499);\n        //   const x = xScales.find(n => n.text === \"biggie\").scaleInverse(778)\n        //   return {x: x, y: y}\n        // })\n        // .target(instant => data.find(x => x.id === instant.connections[0]))\n        .x(d => d.scale ? xScales[d.scale].scale(d.x) : d.x)\n        .y(d => d.scale ? yScale(d.y) : d.y);\n      svg\n        .selectAll(\".connectionLinks\")\n        .data(activeData.filter(n => n.connections && !n.connections[1])) //link starts from 1st one\n        .join(\"path\")\n        .raise()\n        .attr(\"class\", \"connectionLinks pointer\")\n        .attr(\"d\", ctLinker)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"black\")\n        // .attr(\"stroke\", n => n.color? n.color : \"black\")\n        // .attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1)\n        .attr(\"stroke-dasharray\", \"3\")\n       //initialize custom symbols\n      const cancelledSymbol = {\n        draw: (context, size) => {\n          let s = Math.sqrt(size)/2;\n              context.moveTo(s,0);\n              context.lineTo(s*2,s);\n              context.lineTo(s,s*2);\n              context.lineTo(0,s);\n              context.lineTo(-s,s*2);\n              context.lineTo(-s*2,s);\n              context.lineTo(-s,0);\n              context.lineTo(-s*2,-s);\n              context.lineTo(-s,-s*2);\n              context.lineTo(0,-s);\n              context.lineTo(s,-s*2);\n              context.lineTo(s*2,-s);\n              context.closePath();\n        }\n      };\n      //foreshadowing symbol\n      const fsSymbol = {\n        draw: (context, size) => {\n          let s = size;\n              context.moveTo(0,0);\n              context.lineTo(s*2,s/2);\n              context.lineTo(s*2,-s/2);\n              context.closePath();\n        }\n      };\n      //foreshadowing gradient\n      var fsg = svg.append(\"defs\").append(\"linearGradient\")\n      .attr(\"id\", \"fsgradient\")//id of the gradient\n      .attr(\"x1\", \"0%\")\n      .attr(\"x2\", \"100%\") //since its a horizontal linear gradient\n      .attr(\"y1\", \"0%\")\n      .attr(\"y2\", \"0%\");\n       fsg.append(\"stop\")\n      .attr(\"offset\", \"0%\")\n      .style(\"stop-color\", \"black\")//start in black. TODO: different color foreshadowing\n      .style(\"stop-opacity\", 1);\n       fsg.append(\"stop\")\n      .attr(\"offset\", \"100%\")\n      .style(\"stop-color\", \"black\")//end in transparent\n      .style(\"stop-opacity\", 0);\n       //---draw symbols---//\n      //TODO: doesn't display if cancelled is true from the start\n      svg\n        .selectAll(\".cancelled\")\n        .data(activeData.filter(d => d.cancelled))\n        .join(\"path\")\n        .raise()\n        .attr(\"class\", \"cancelled pointer\")\n        .attr(\"d\", symbol(cancelledSymbol, radius*radius*5))\n        .attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n        .attr(\"transform\", d => `translate(${xScales[d.scale].scale(d.x)}, ${yScale(d.y)})`)\n        .on(\"click\", (e, target) => {\n          if (toggle===\"cancelled\") {\n            const newInstants = [...data];\n            const instant = newInstants.find(n => n.id === target.id);\n            delete instant.cancelled;\n            setData(newInstants);\n          } else {\n            setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n          }\n          e.stopPropagation();\n        });\n       //---draw foreshadowing---//\n      svg\n        .selectAll(\".foreshadowing\")\n        .data(activeData.filter(d => d.foreshadowing))\n        .join(\"path\")\n        .raise()\n        .attr(\"class\", \"foreshadowing pointer\")\n        .attr(\"d\", symbol(fsSymbol, radius*radius*5))\n        .style(\"fill\", \"url(#fsgradient)\")\n        .attr(\"transform\", d => `translate(${xScales[d.scale].scale(d.x)}, ${yScale(d.y)})`)\n        .on(\"click\", (e, target) => {\n          if (toggle===\"foreshadowing\") {\n            const newInstants = [...data];\n            const instant = newInstants.find(n => n.id === target.id);\n            delete instant.foreshadowing;\n            setData(newInstants);\n          } else {\n            setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n          }\n          e.stopPropagation();\n        });\n      */\n      //---draw labels---//\n      // svg\n      //   .selectAll(\".zoneLabel\")\n      //   .data(zones)\n      //   .join(\"text\")\n      //   .attr(\"class\", \"zoneLabel\")\n      //   .text(v => v.text)\n      //   .attr(\"x\", v => xScales[v.scale].scale(v.start))\n      //   .attr(\"y\", v => yScale(v.yStart?v.yStart:yMin+5))\n      //   .attr(\"text-anchor\", \"middle\");\n\n      svg.selectAll(\".label\").data(activeData).join(\"text\").attr(\"class\", \"label\").text(([k, v]) => showLabel ? v.text : v.id).attr(\"x\", ([k, v]) => xScales[v.scale].scale(v.x)).attr(\"y\", ([k, v]) => yScale(v.y - (rangeY > breakpoint ? rangeY * .05 : breakpoint / 5))) //vertical offset. see scales\n      .attr(\"text-anchor\", \"middle\"); // .attr(\"font-size\", fontSize);\n\n      svg.selectAll(\".intervalLabel\").data(intervals).join(\"text\").attr(\"class\", \"intervalLabel\").text(v => v.text).attr(\"x\", v => (xScales[v.source[1].scale].scale(v.source[1].x) + xScales[v.target[1].scale].scale(v.target[1].x)) / 2) //average scaled x values\n      .attr(\"y\", v => yScale(Math.max(v.source[1].y, v.target[1].y) + (rangeY > breakpoint ? rangeY * .06 : breakpoint / 5))) //.6 below lowest y, otherwise 1/5 of breakpoint\n      .attr(\"text-anchor\", \"middle\");\n    } //---zoom---//\n\n\n    const zoomBehavior = zoom().scaleExtent([1, 5]) //can zoom 2x smaller and 5x bigger\n    .translateExtent([[-50, 0], [dimensions.width + 50, dimensions.height]]) //limits how far graph can pan\n    .on(\"zoom\", e => {\n      const zoomState = e.transform; //returns zoom transformations as an object\n\n      setCurrentZoomState(zoomState);\n    }); //regular clicking\n\n    svg.on(\"click\", e => {\n      if (toggle === \"addInstant\") {\n        /*\n        if range of zoom > 10, Math.round(x)\n        if range of zoom <= 10 (floor: 10^0, ceiling: 10^1), use tenths (/10 -> /10^1)\n        if range of zoom <= 1 (floor: 10^-1, ceiling: 10^0), use hudredths (/100 -> (10^2))\n        if range of zoom <= .1 (floor: 10^-2, ceiling: 10^-1), use thousandths (/1000 -> (10^-3), etc.\n        const decimal = scales[activeScale]\n        xScales[key].scale\n        const decimal = scales[activeScale]\n        */\n        //TODO: zoom range matches up with current zoom\n        const zoomRange = xScales[activeScale].scale.domain()[1] - xScales[activeScale].scale.domain()[0]; //max-min\n        // const precision = Math.log10(zoomRange)<1 ? -(Math.floor(Math.log10(zoomRange)-1)) : 0;\n\n        const x = xScales[activeScale].scaleInverse(e.layerX);\n        const y = yScaleInverse(e.layerY); // console.log(Math.round(x*Math.pow(10, precision))/ Math.pow(10, precision));\n\n        setInflectTarget({\n          x: round(x, zoomRange),\n          y: Math.round(y)\n        });\n        setToggle(\"NewInstantForm\");\n      }\n\n      setInfo(null);\n    });\n    svg.call(zoomBehavior);\n  }, [data, zones, scales, toggle, activeLayer, activeData, dimensions, logic, currentZoomState, setInfo, radius, showLabel, syntacticOrder]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    className: \"svgWrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: \"graphic\",\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 690,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Graphic, \"b4CAhwLk9FZLxktZNVY3UOkz6Nw=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = Graphic;\n;\nexport default Graphic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graphic\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js"],"names":["React","useState","useEffect","useRef","select","scaleLinear","scaleOrdinal","axisBottom","axisLeft","linkHorizontal","format","drag","zoom","min","max","symbol","symbols","useResizeObserver","generateIntervals","Graphic","data","setData","activeLayer","zones","setZones","radius","info","setInfo","setInflectTarget","showLabel","toggle","setToggle","scales","setScales","syntacticOrder","setSyntacticOrder","activeScale","activeData","Object","entries","activeZones","logic","length","isNaN","x","svgRef","wrapperRef","dimensions","currentZoomState","setCurrentZoomState","intervals","svg","current","selectAll","remove","logicScale","unknown","breakpoint","xMin","map","key","xMax","yMin","y","yMax","rangeX","rangeY","generateScales","currentScale","xInverse","domain","width","range","xDrag","yInverse","height","xScales","fromEntries","thisScale","scale","hasSegments","segments","yPos","units","tickValues","scaleInverse","xSegments","keys","forEach","i","n","push","proportion","segment","newXScale","rescaleX","newMin","newMax","yScale","yScaleInverse","yScaleInverseDrag","ticks","append","attr","style","call","raise","g","d","xAxis","tickFormat","text","yAxis","round","value","precision","Math","log10","floor","pow","join","k","v","start","yStart","end","yEnd","opacity","color","importance","on","e","target","position","type","stopPropagation","dragged","dx","subject","dy","newInstants","intervaler","source","interval","dashed","newOrder","layerX","layerY","instant","find","id","cancelled","foreshadowing","console","log","zoomBehavior","scaleExtent","translateExtent","zoomState","transform","zoomRange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, scaleOrdinal, axisBottom, axisLeft, linkHorizontal, format, drag, zoom, min, max, symbol, symbols } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport generateIntervals from \"./generateIntervals\";\n\nfunction Graphic({\n  data, setData,\n  activeLayer,\n  zones, setZones,\n  radius,\n  info, setInfo,\n  setInflectTarget,\n  showLabel,\n  toggle, setToggle,\n  scales, setScales,\n  syntacticOrder, setSyntacticOrder,\n  activeScale\n}) {\n\n  //all data is passed down from and synced to App.js\n  const activeData = Object.entries(data); //convert json to array for faster processing\n  const activeZones = Object.entries(zones);\n  //TODO: layers\n  // const activeData = activeLayer ? Object.entries(data).filter(([k,v]) => v.layer === activeLayer) : arrayData;\n\n  //convert scale object to array for faster processing\n\n\n  //is logical operators active?\n  const logic = data.length? isNaN(data[0].x): null; //TODO: refine logical operators\n\n  //initialize reference object to pass to svg in React Dom\n  const svgRef = useRef();\n  //svg wrapped in div bc otherwise resize observer callback won't work\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState();\n\n  // //initialize intervals between instants\n  const intervals = generateIntervals(data); //TODO: write updateIntervals function\n\n  //initialize variables\n  /*\n  var xMin = min(Object.entries(data).map(([key, {x}]) => logic ? logicScale(x) : x));\n  var xMax = max(Object.entries(data).map(([key, {x}]) => logic ? logicScale(x) : x));\n  var yMin = min(Object.entries(data).map(([key, {y}]) => y));\n  var yMax = max(Object.entries(data).map(([key, {y}]) => y));\n  */\n\n  //init d3 scales\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n    if (!dimensions) return;\n    //removes svgs added using append()\n    svg\n      .selectAll(\".remove\")\n      .remove();\n\n    //---scales---//\n\n    //if time matches logical operator keyword, translate into index values, then map\n    const logicScale = scaleOrdinal([\"before\", \"now\", \"after\"], [-1, 0, 1]).unknown(0);\n\n    const breakpoint = 5;\n\n\n    const xMin = min(Object.entries(data).map(([key, {x}]) => logic ? logicScale(x) : x));\n    const xMax = max(Object.entries(data).map(([key, {x}]) => logic ? logicScale(x) : x));\n    const yMin = min(Object.entries(data).map(([key, {y}]) => y));\n    const yMax = max(Object.entries(data).map(([key, {y}]) => y));\n    const rangeX = xMax-xMin; //0 is minX, 1 is maxX (reference findMinMax)\n    const rangeY = yMax-yMin;\n\n    /*\n    - Allow users to specify scale. x&y min max and units\n    - for each scale, generateScale()\n    */\n\n    function generateScales(currentScale) { //TODO: turn into dedicated scaleDrag\n\n      const xInverse = scaleLinear()\n        .domain([0, dimensions.width])\n        .range([currentScale.min, currentScale.max]) //maxRangeX-minRangeX gives section of x values displayed onscreen\n      const xDrag = scaleLinear()\n        .domain([-dimensions.width, dimensions.width])\n        .range([-(currentScale.domain()[1]-currentScale.domain()[0]), (currentScale.domain()[1]-currentScale.domain()[0])]) //maxRangeX-minRangeX gives section of x values displayed onscreen\n      const yInverse = scaleLinear()\n        .domain([-dimensions.height, dimensions.height])\n        .range((rangeY>breakpoint) ? [-rangeY, rangeY] : [-breakpoint*5, breakpoint*5])\n\n\n      return {\n        xInverse, xDrag, yInverse\n      };\n    }\n\n    //TODO: fromEntries & entries not compatible with some older browsers\n    const xScales = Object.fromEntries( //for every scale in scales data, generate an xScale\n      Object.entries(scales).map(([key, thisScale]) => [\n        key,\n        {\n          scale: scaleLinear() //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n            .domain([thisScale.min, thisScale.max])\n            .range([0, dimensions.width]),\n          hasSegments: thisScale.segments.length?true:false,\n          yPos: thisScale.yPos,\n          units: `${key} (${thisScale.units})`,\n          tickValues: thisScale.tickValues?thisScale.tickValues:null,\n          scaleInverse: scaleLinear() //for NewInstantForm\n            .domain([0, dimensions.width])\n            .range([thisScale.min, thisScale.max])\n        }\n      ])\n    );\n\n\n    const xSegments = () => {\n      const segments = [];\n      Object.keys(scales).forEach((key, i) => {\n        const thisScale = scales[key];\n        // const segments = [];\n        if (!thisScale.segments.length) {\n          return;\n        }\n        thisScale.segments.map(n => {\n          const min = n.min?n.min:thisScale.min; //if segment contains a min, set that as min. otherwise, set scale min as min.\n          const max = n.max?n.max:thisScale.max;\n          // console.log(xScales[i].scale(min));\n          segments.push({\n            scale: key,\n            yPos: thisScale.yPos,\n            proportion: (max-min)/(thisScale.max-thisScale.min),\n            segment: scaleLinear()\n            .domain([min, max])\n            .range([xScales[key].scale(min), xScales[key].scale(max)])\n          })\n        })\n      });\n      return segments;\n    }\n\n\n    /*\n      xScales(generateScales(scaleLinear(scale)))\n      - take xScale and rescale according to transformations (newXScale)\n      - update each array entry's domain with that of newXScale\n    */\n    //if there is a zoom transform, override each xScales.scale with adjusted scale\n    if (currentZoomState) {\n      Object.entries(xScales).forEach(([key,thisScale]) => {\n        const newXScale = currentZoomState.rescaleX(thisScale.scale); //zoom state comes w methods for transformations\n        const newMin = newXScale.domain()[0]\n        const newMax = newXScale.domain()[1];\n\n        //applies zoom transformations to scale + scaleInverse\n        xScales[key].scale = newXScale;\n      });\n\n\n    };\n    // const xScale = scaleLinear()\n    //   .domain([xMin, xMax]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n    //   .range([0, dimensions.width]);\n    const yScale = scaleLinear()\n      //if difference in y vaules greater than 5, resize to min and max\n      .domain((rangeY>breakpoint) ? [yMin, yMax] : [yMin-breakpoint, yMax+breakpoint])\n      .range([0, dimensions.height]);\n    //inverse scales for drag behavior\n    // const xScaleInverse = scaleLinear()\n    //   .domain([-dimensions.width, dimensions.width])\n    //   .range([-rangeX, rangeX]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n    const yScaleInverse = scaleLinear()\n      .domain([-0, dimensions.height])\n      .range((rangeY>breakpoint) ? [yMin, yMax] : [yMin-breakpoint, yMax+breakpoint]);\n    const yScaleInverseDrag = scaleLinear()\n      .domain([-dimensions.height, dimensions.height])\n      .range((rangeY>breakpoint) ? [-rangeY, rangeY] : [-breakpoint*5, breakpoint*5]);\n\n    //draw\n    //---draw bottom axis---//\n\n    xSegments().forEach(n => {\n      const segment = axisBottom(n.segment)\n      // .ticks(n.proportion<.33?5:null, \"f\");\n      .ticks(null, \"f\");\n\n      svg\n        .append(\"g\")\n        .attr(\"class\", \"remove\")\n        .style(\"transform\", `translateY(${dimensions.height*n.yPos}px)`)\n        .call(segment)\n        .raise()\n        .call(g => g.select(\".domain\") //removes solid black axis bar\n          .remove())\n        .call(g => g.selectAll(\".tick line\") //styles individual ticks\n          .attr(\"stroke-opacity\", 0.5))\n        .call(g => g.selectAll(\".tick text\")\n          .attr(\"y\", 10)\n          .attr(\"opacity\", (d, i) => { //TODO: remove instead of setting opacity to 0\n            if ((n.proportion<.25)&&(i%3)) { //less than 1/4, label every 3 ticks\n              return 0;\n            } else if ((n.proportion<.33)&&(i%2)) { //less than 1/3, label every other tick\n              return 0;\n            } else {\n              return 0.5\n            }\n          })\n        );\n    });\n\n    Object.entries(xScales).forEach(([key,thisScale]) => {\n      const xAxis = axisBottom(thisScale.scale).tickValues(thisScale.tickValues)\n      .tickFormat(format(''));\n\n      if (!thisScale.hasSegments || thisScale.tickValues) {\n        svg\n          .append(\"g\")\n          .attr(\"class\", \"remove\")\n          .style(\"transform\", `translateY(${dimensions.height*thisScale.yPos}px)`)\n          .call(xAxis)\n          .raise()\n          .call(g => g.select(\".domain\") //removes solid black axis bar\n            .remove())\n          .call(g => g.selectAll(\".tick line\") //styles individual ticks\n            .attr(\"stroke-opacity\", 0.5))\n          .call(g => g.selectAll(\".tick text\")\n            .attr(\"y\", 10) //TODO: dynamic tick text spacing for accessibility\n            .attr(\"opacity\", 0.5));\n      }\n      svg\n        .append(\"text\")\n        .text(thisScale.units)\n        .attr(\"class\", \"axisLabel smallTxt remove\")\n        .attr(\"x\", dimensions.width/2)\n        .attr(\"y\", dimensions.height*(thisScale.yPos+.07))\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"opacity\", 0.5);\n      }\n    );\n\n    //--draw vertical axis--//\n\n    const yAxis = axisLeft(yScale);\n\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"remove\")\n      // .style(\"transform\", `translateY(${dimensions.height*thisScale.yPos}px)`)\n      .call(yAxis)\n      .raise()\n      .call(g => g.select(\".domain\") //removes solid black axis bar\n        .remove())\n      .call(g => g.selectAll(\".tick line\") //styles individual ticks\n        .attr(\"stroke-opacity\", 0.5))\n      .call(g => g.selectAll(\".tick text\")\n        .attr(\"y\", 10) //TODO: dynamic tick text spacing for accessibility\n        .attr(\"opacity\", 0.5));\n\n\n  }, [scales, activeLayer, activeData, dimensions, logic, currentZoomState]);\n\n\n\n\n\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n    if (!dimensions) return;\n    //removes svgs added using append()\n    svg\n      .selectAll(\".remove\")\n      .remove();\n\n    //rounding for data inputted thru paintbox interface\n    function round(value, range) {\n      const precision = Math.log10(range)<1 ? -(Math.floor(Math.log10(range)-1)) : 0;\n      return Math.round(value*Math.pow(10, precision))/ Math.pow(10, precision)\n    }\n\n    //---draw zones---//\n    if (activeZones.length) {\n      svg\n      .selectAll(\".zones\")\n      .data(activeZones)\n      .join(\"rect\")\n      .attr(\"class\", \"zones\")\n      .attr(\"x\", ([k, v]) => xScales[v.scale].scale(v.start))\n      // .attr(\"x\", n => generateScales(scales[n.scale]).x(n.start))\n      // .attr(\"y\", n => n.yStart ? yScale(n.yStart) : yScale(minMax[2]))\n      .attr(\"y\", ([k, v]) => v.yStart ? yScale(v.yStart) : yMin-10) //TODO: if no yStart, minimum y value\n      .attr(\"width\", ([k, v]) => xScales[v.scale].scale(v.end) - xScales[v.scale].scale(v.start))\n      .attr(\"height\", ([k, v]) => {\n        if (v.yStart & v.yEnd) {\n          return (yScale(v.yEnd)-yScale(v.yStart))\n        } else if (v.yStart) {\n          return (yScale(yMax+10)-yScale(v.yStart))\n        } else {\n          return (yScale(yMax+10)) //TODO: if no yStart, minimum y value\n          // return (yScale(minMax[3])-yScale(minMax[2]))\n        }})\n      .attr(\"opacity\", ([k, v]) => v.opacity ? v.opacity : 0.5)\n      .attr(\"fill\", ([k, v]) => v.color ? v.color : \"#999\")\n      .attr(\"stroke\", \"black\") //TODO: stroke be different colors\n      .attr(\"stroke-width\", ([k, v]) => v.importance ? v.importance*2 : 0)\n      .on(\"click\", (e, target) => {\n        if (toggle===\"certainty\" || toggle===\"importance\") { //pulls up inflection menu\n          setInflectTarget(target);\n        } else { //displays zone properties when clicked\n          setInfo(null); //clear InfoBox\n          setInfo({position: [e.x, e.y], target: target, type: \"zone\"});  //TODO: set info to null when clicking same zone again\n        }\n        e.stopPropagation();\n      });\n    }\n\n\n    //--drag behavior--//\n    const dragged = drag()\n      // .on(\"start\", e => {\n      //   select(this).attr(\"stroke\", \"black\");\n      // })\n      .on(\"drag\", e => {\n        // console.log(e.subject[1]);\n        //TODO: extract precision function to round new pos\n        const dx = generateScales(xScales[e.subject[1].scale].scale).xDrag(e.dx);\n        // const dx = xScales.scaleInverse\n        const dy = yScaleInverseDrag(e.dy);\n        const newInstants = {...data}; //always make a copy when updating array\n\n        //find array element in data with matching ID and set new x y coordinates\n        newInstants[e.subject[0]].x += dx;\n        newInstants[e.subject[0]].y += dy;\n\n        setData(newInstants);\n      });\n\n    if (Object.entries(data).length) {\n      //---draw intervals---//\n      const intervaler = linkHorizontal()\n        .source(interval => interval.source[1])\n        .target(interval => interval.target[1])\n        // .x(n => generateScales(scales[n.scale]).x(logic ? logicScale(n.x) : n.x))\n        .x(d => xScales[d.scale].scale(d.x))\n        .y(d => yScale(d.y));\n\n      svg\n        .selectAll(\".interval\")\n        .data(intervals)\n        .join(\"path\")\n        .raise()\n        .attr(\"class\", \"interval pointer\")\n        .attr(\"d\", intervaler)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", n => n.color? n.color : \"black\")\n        .attr(\"stroke-width\", n => n.width ? n.width : radius/2)\n        .attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1)\n        .attr(\"stroke-dasharray\", n => n.dashed ? n.dashed : null)\n        .on(\"click\", (e, target) => {\n          if (toggle===\"connection\") {\n            const newOrder = [...syntacticOrder];\n            if (newOrder[2]===0) { //set 2nd selection\n              newOrder[1] = {x:generateScales(scales[activeScale]).xInverse(e.layerX), y:yScaleInverse(e.layerY), scale:activeScale}; //scale TODO\n              newOrder[2] = 1;\n            } else { //set 1st selection\n              newOrder[0] = {x:generateScales(scales[activeScale]).xInverse(e.layerX), y:yScaleInverse(e.layerY), scale:activeScale};\n              newOrder[2] = 0;\n            }\n            setSyntacticOrder(newOrder);\n          }\n          //else if (toggle===\"foreshadowing\") {\n          //   if (!target.target) { //if target is an endpoint, indeterminate end\n          //\n          //\n          //   } else { //otherwise, change mouse to no symbol\n          //\n          //   }\n          //   //option to adjust gradient eventually\n          // } else\n          else if (toggle===\"certainty\" || toggle===\"importance\") {\n            setInflectTarget(target);\n          } else {\n            setInfo(null); //clear InfoBox\n            setInfo({position: [e.x, e.y], target: target, type: \"interval\"}); //displays interval properties when clicked\n          }\n          e.stopPropagation();\n        });\n\n\n\n      //---draw instants---//\n      svg\n        .selectAll(\".instant\")\n        // .data(activeData.filter(d => !d.foreshadowing && !d.cancelled))\n        .data(activeData)\n        .join(\"circle\")\n        .raise()\n        .attr(\"class\", \"instant pointer\")\n        .attr(\"r\", ([k,v]) => v.radius? v.radius : radius) //TODO: custom radius accessibility\n        .attr(\"fill\", ([k,v]) => v.color ? v.color : \"black\") //if it has a color other than black, use that\n        .attr(\"opacity\", ([k,v]) => v.opacity ? v.opacity : 1)\n        // .attr(\"cx\", d => generateScales(scales[d.scale]).x(logic ? logicScale(d.x) : d.x))\n        .attr(\"cx\", ([k,v]) => xScales[v.scale].scale(v.x)) //scale x coordinate based on xScale defined in instant's scale property\n        .attr(\"cy\", ([k,v]) => yScale(v.y))\n        .call(dragged)\n        .on(\"click\", (e, target) => {\n          switch (toggle) {\n            case \"cancelled\":\n              const newInstants = [...data];\n              const instant = newInstants.find(n => n.id === target.id);\n              instant.cancelled = true;\n              setData(newInstants);\n              break;\n            case \"connection\":\n              const newOrder = [...syntacticOrder];\n              if (newOrder[2]===0) { //set 2nd selection\n                newOrder[1] = target;\n                newOrder[2] = 1;\n              } else { //set 1st selection\n                newOrder[0] = target;\n                newOrder[2] = 0;\n              }\n              setSyntacticOrder(newOrder);\n              break;\n            case \"foreshadowing\":\n              if (!target.target) { //if target is an endpoint, indeterminate end\n                const newInstants = [...data];\n                const instant = newInstants.find(n => n.id === target.id);\n                instant.foreshadowing = true;\n                setData(newInstants);\n              } else { //otherwise, change mouse to no symbol\n                console.log(\"forbidden\");\n              }\n              break;\n            case \"certainty\":\n              setInflectTarget(target);\n              break;\n            case \"importance\":\n              setInflectTarget(target);\n              break;\n            default:\n              setInfo(null); //clear InfoBox\n              setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n          }\n          // if (toggle===\"cancelled\") {\n          //   const newInstants = [...data];\n          //   const instant = newInstants.find(n => n.id === target.id);\n          //   instant.cancelled = true;\n          //   setData(newInstants);\n          // } else if (){\n          //\n          // } else if (toggle===\"connection\") {\n          //   const newOrder = [...syntacticOrder];\n          //   if (newOrder[2]===0) { //set 2nd selection\n          //     newOrder[1] = target;\n          //     newOrder[2] = 1;\n          //   } else { //set 1st selection\n          //     newOrder[0] = target;\n          //     newOrder[2] = 0;\n          //   }\n          //   setSyntacticOrder(newOrder);\n          // } else if (toggle===\"foreshadowing\") { //todo: adjust gradient\n          //   if (!target.target) { //if target is an endpoint, indeterminate end\n          //     const newInstants = [...data];\n          //     const instant = newInstants.find(n => n.id === target.id);\n          //     instant.foreshadowing = true;\n          //     setData(newInstants);\n          //   } else { //otherwise, change mouse to no symbol\n          //     console.log(\"forbidden\");\n          //   }\n          // } else if (toggle===\"certainty\" || toggle===\"importance\"){\n          //   setInflectTarget(target);\n          // } else {\n          //   setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n          // }\n          e.stopPropagation(); //stops deselect when bg is clicked\n        });\n\n      /*//---draw inflections---//\n\n      //--draw connetion inflection--//\n      //circle around instant\n      svg\n        .selectAll(\".connections\")\n        .data(activeData.filter(d => d.connections))\n        .join(\"circle\")\n        .raise()\n        .attr(\"class\", \"connections pointer\")\n        .attr(\"r\", n => n.radius? n.radius*1.5 : radius*2) //TODO: custom radius accessibility\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-dasharray\", \"3\")\n        // .attr(\"opacity\", d => d.opacity ? d.opacity : 1)\n        .attr(\"cx\", d => xScales[d.scale].scale(d.x)) //scale x coordinate based on xScale defined in instant's scale property\n        .attr(\"cy\", d => yScale(d.y));\n\n      //link connecting circles\n      const ctLinker = linkHorizontal()\n        .source(instant => data.find(x => x.id === instant.id))\n        .target(instant => typeof(instant.connections[0])===\"object\" ? instant.connections[0] : data.find(x => x.id === instant.connections[0]))\n        // .target(() => {\n        //   //layerX, layerY\n        //   const y = yScaleInverse(499);\n        //   const x = xScales.find(n => n.text === \"biggie\").scaleInverse(778)\n        //   return {x: x, y: y}\n        // })\n        // .target(instant => data.find(x => x.id === instant.connections[0]))\n        .x(d => d.scale ? xScales[d.scale].scale(d.x) : d.x)\n        .y(d => d.scale ? yScale(d.y) : d.y);\n      svg\n        .selectAll(\".connectionLinks\")\n        .data(activeData.filter(n => n.connections && !n.connections[1])) //link starts from 1st one\n        .join(\"path\")\n        .raise()\n        .attr(\"class\", \"connectionLinks pointer\")\n        .attr(\"d\", ctLinker)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"black\")\n        // .attr(\"stroke\", n => n.color? n.color : \"black\")\n        // .attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1)\n        .attr(\"stroke-dasharray\", \"3\")\n\n      //initialize custom symbols\n      const cancelledSymbol = {\n        draw: (context, size) => {\n          let s = Math.sqrt(size)/2;\n              context.moveTo(s,0);\n              context.lineTo(s*2,s);\n              context.lineTo(s,s*2);\n              context.lineTo(0,s);\n              context.lineTo(-s,s*2);\n              context.lineTo(-s*2,s);\n              context.lineTo(-s,0);\n              context.lineTo(-s*2,-s);\n              context.lineTo(-s,-s*2);\n              context.lineTo(0,-s);\n              context.lineTo(s,-s*2);\n              context.lineTo(s*2,-s);\n              context.closePath();\n        }\n      };\n      //foreshadowing symbol\n      const fsSymbol = {\n        draw: (context, size) => {\n          let s = size;\n              context.moveTo(0,0);\n              context.lineTo(s*2,s/2);\n              context.lineTo(s*2,-s/2);\n              context.closePath();\n        }\n      };\n      //foreshadowing gradient\n      var fsg = svg.append(\"defs\").append(\"linearGradient\")\n      .attr(\"id\", \"fsgradient\")//id of the gradient\n      .attr(\"x1\", \"0%\")\n      .attr(\"x2\", \"100%\") //since its a horizontal linear gradient\n      .attr(\"y1\", \"0%\")\n      .attr(\"y2\", \"0%\");\n\n      fsg.append(\"stop\")\n      .attr(\"offset\", \"0%\")\n      .style(\"stop-color\", \"black\")//start in black. TODO: different color foreshadowing\n      .style(\"stop-opacity\", 1);\n\n      fsg.append(\"stop\")\n      .attr(\"offset\", \"100%\")\n      .style(\"stop-color\", \"black\")//end in transparent\n      .style(\"stop-opacity\", 0);\n\n      //---draw symbols---//\n      //TODO: doesn't display if cancelled is true from the start\n      svg\n        .selectAll(\".cancelled\")\n        .data(activeData.filter(d => d.cancelled))\n        .join(\"path\")\n        .raise()\n        .attr(\"class\", \"cancelled pointer\")\n        .attr(\"d\", symbol(cancelledSymbol, radius*radius*5))\n        .attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n        .attr(\"transform\", d => `translate(${xScales[d.scale].scale(d.x)}, ${yScale(d.y)})`)\n        .on(\"click\", (e, target) => {\n          if (toggle===\"cancelled\") {\n            const newInstants = [...data];\n            const instant = newInstants.find(n => n.id === target.id);\n            delete instant.cancelled;\n            setData(newInstants);\n          } else {\n            setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n          }\n          e.stopPropagation();\n        });\n\n      //---draw foreshadowing---//\n      svg\n        .selectAll(\".foreshadowing\")\n        .data(activeData.filter(d => d.foreshadowing))\n        .join(\"path\")\n        .raise()\n        .attr(\"class\", \"foreshadowing pointer\")\n        .attr(\"d\", symbol(fsSymbol, radius*radius*5))\n        .style(\"fill\", \"url(#fsgradient)\")\n        .attr(\"transform\", d => `translate(${xScales[d.scale].scale(d.x)}, ${yScale(d.y)})`)\n        .on(\"click\", (e, target) => {\n          if (toggle===\"foreshadowing\") {\n            const newInstants = [...data];\n            const instant = newInstants.find(n => n.id === target.id);\n            delete instant.foreshadowing;\n            setData(newInstants);\n          } else {\n            setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n          }\n          e.stopPropagation();\n        });\n*/\n      //---draw labels---//\n      // svg\n      //   .selectAll(\".zoneLabel\")\n      //   .data(zones)\n      //   .join(\"text\")\n      //   .attr(\"class\", \"zoneLabel\")\n      //   .text(v => v.text)\n      //   .attr(\"x\", v => xScales[v.scale].scale(v.start))\n      //   .attr(\"y\", v => yScale(v.yStart?v.yStart:yMin+5))\n      //   .attr(\"text-anchor\", \"middle\");\n\n      svg\n        .selectAll(\".label\")\n        .data(activeData)\n        .join(\"text\")\n        .attr(\"class\", \"label\")\n        .text(([k,v]) => showLabel ? v.text : v.id)\n        .attr(\"x\", ([k,v]) => xScales[v.scale].scale(v.x))\n        .attr(\"y\", ([k,v]) => yScale(v.y - (rangeY>breakpoint ? rangeY*.05 : breakpoint/5))) //vertical offset. see scales\n        .attr(\"text-anchor\", \"middle\");\n        // .attr(\"font-size\", fontSize);\n\n      svg\n        .selectAll(\".intervalLabel\")\n        .data(intervals)\n        .join(\"text\")\n        .attr(\"class\", \"intervalLabel\")\n        .text(v => v.text)\n        .attr(\"x\", v => (xScales[v.source[1].scale].scale(v.source[1].x)+xScales[v.target[1].scale].scale(v.target[1].x))/2) //average scaled x values\n        .attr(\"y\", v => yScale(Math.max(v.source[1].y, v.target[1].y) + (rangeY>breakpoint ? rangeY*.06 : breakpoint/5))) //.6 below lowest y, otherwise 1/5 of breakpoint\n        .attr(\"text-anchor\", \"middle\");\n\n    }\n\n\n\n    //---zoom---//\n    const zoomBehavior = zoom()\n      .scaleExtent([1, 5]) //can zoom 2x smaller and 5x bigger\n      .translateExtent([[-50, 0], [dimensions.width+50, dimensions.height]]) //limits how far graph can pan\n      .on(\"zoom\", e => {\n        const zoomState = e.transform; //returns zoom transformations as an object\n        setCurrentZoomState(zoomState);\n      });\n\n    //regular clicking\n    svg.on(\"click\", (e) => {\n      if (toggle===\"addInstant\") {\n        /*\n        if range of zoom > 10, Math.round(x)\n        if range of zoom <= 10 (floor: 10^0, ceiling: 10^1), use tenths (/10 -> /10^1)\n        if range of zoom <= 1 (floor: 10^-1, ceiling: 10^0), use hudredths (/100 -> (10^2))\n        if range of zoom <= .1 (floor: 10^-2, ceiling: 10^-1), use thousandths (/1000 -> (10^-3), etc.\n        const decimal = scales[activeScale]\n        xScales[key].scale\n        const decimal = scales[activeScale]\n        */\n        //TODO: zoom range matches up with current zoom\n        const zoomRange = xScales[activeScale].scale.domain()[1] - xScales[activeScale].scale.domain()[0]; //max-min\n        // const precision = Math.log10(zoomRange)<1 ? -(Math.floor(Math.log10(zoomRange)-1)) : 0;\n        const x = xScales[activeScale].scaleInverse(e.layerX);\n        const y = yScaleInverse(e.layerY);\n        // console.log(Math.round(x*Math.pow(10, precision))/ Math.pow(10, precision));\n        setInflectTarget({x: round(x, zoomRange), y: Math.round(y)});\n        setToggle(\"NewInstantForm\");\n      }\n      setInfo(null);\n    });\n    svg.call(zoomBehavior);\n\n  }, [data, zones, scales, toggle, activeLayer, activeData, dimensions, logic, currentZoomState, setInfo, radius, showLabel, syntacticOrder]);\n\n  return (\n    <div ref={wrapperRef} className=\"svgWrapper\">\n      <svg id=\"graphic\" ref={svgRef}>\n      </svg>\n    </div>\n  );\n};\n\n\nexport default Graphic;\n"]},"metadata":{},"sourceType":"module"}