{"ast":null,"code":"/*\n  - delete an individual instant\n*/\nfunction deleteInstant(e, target, data, setData) {\n  const newData = { ...data\n  }; // const dataKeys = Object.entries(newData).map(([k,v]) => k);\n\n  const dataValues = Object.entries(newData).map(([k, v]) => v);\n  dataValues.forEach(v => {\n    if (!v.target || !v.target.includes(target[0])) {\n      return;\n    } else {\n      //if v.target includes key\n      if (v.target.length > 1) {\n        //if multiple, delete only key\n        v.target = v.target.filter(x => x !== target[0]);\n      } else {\n        //if key is the only target, set to null\n        v.target = null;\n      }\n    }\n  });\n  delete newData[target[0]];\n  setData(newData);\n}\n\n;\nexport default deleteInstant;","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/deleteInstant.js"],"names":["deleteInstant","e","target","data","setData","newData","dataValues","Object","entries","map","k","v","forEach","includes","length","filter","x"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,aAAT,CAAuBC,CAAvB,EAA0BC,MAA1B,EAAkCC,IAAlC,EAAwCC,OAAxC,EAAiD;AAE/C,QAAMC,OAAO,GAAG,EAAC,GAAGF;AAAJ,GAAhB,CAF+C,CAG/C;;AACA,QAAMG,UAAU,GAAGC,MAAM,CAACC,OAAP,CAAeH,OAAf,EAAwBI,GAAxB,CAA4B,CAAC,CAACC,CAAD,EAAGC,CAAH,CAAD,KAAWA,CAAvC,CAAnB;AAIAL,EAAAA,UAAU,CAACM,OAAX,CAAmBD,CAAC,IAAI;AACtB,QAAI,CAACA,CAAC,CAACT,MAAH,IAAa,CAACS,CAAC,CAACT,MAAF,CAASW,QAAT,CAAkBX,MAAM,CAAC,CAAD,CAAxB,CAAlB,EAAgD;AAC9C;AACD,KAFD,MAEO;AAAE;AACP,UAAIS,CAAC,CAACT,MAAF,CAASY,MAAT,GAAkB,CAAtB,EAAyB;AAAE;AACzBH,QAAAA,CAAC,CAACT,MAAF,GAAWS,CAAC,CAACT,MAAF,CAASa,MAAT,CAAiBC,CAAD,IAAOA,CAAC,KAAKd,MAAM,CAAC,CAAD,CAAnC,CAAX;AACD,OAFD,MAEO;AAAE;AACPS,QAAAA,CAAC,CAACT,MAAF,GAAW,IAAX;AACD;AACF;AACF,GAVD;AAYA,SAAOG,OAAO,CAACH,MAAM,CAAC,CAAD,CAAP,CAAd;AACAE,EAAAA,OAAO,CAACC,OAAD,CAAP;AACD;;AAAA;AAED,eAAeL,aAAf","sourcesContent":["/*\n  - delete an individual instant\n*/\n\nfunction deleteInstant(e, target, data, setData) {\n  \n  const newData = {...data};\n  // const dataKeys = Object.entries(newData).map(([k,v]) => k);\n  const dataValues = Object.entries(newData).map(([k,v]) => v);\n\n\n\n  dataValues.forEach(v => {\n    if (!v.target || !v.target.includes(target[0])) {\n      return;\n    } else { //if v.target includes key\n      if (v.target.length > 1) { //if multiple, delete only key\n        v.target = v.target.filter((x) => x !== target[0]);\n      } else { //if key is the only target, set to null\n        v.target = null;\n      }\n    }\n  });\n\n  delete newData[target[0]];\n  setData(newData);\n};\n\nexport default deleteInstant;\n"]},"metadata":{},"sourceType":"module"}