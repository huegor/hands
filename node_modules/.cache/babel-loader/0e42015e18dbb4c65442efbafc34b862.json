{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\"; //otherwise breaks in safari and edge\n\n/**\n* A hook that defines an html dom element for ResizeObserver to watch\n**/\n\nconst useResizeObserver = ref => {\n  _s();\n\n  const [dimensions, setDimensions] = useState(null); //only access reference (aka the svg) when it's rendered\n\n  useEffect(() => {\n    const observeTarget = ref.current; //create new resize observer w callback that takes resize target as args\n\n    const resizeObserver = new ResizeObserver(entries => {\n      //contentRect is the part ResizeObserver returns that has xy dimensions\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget); //cleanup function when unmount\n\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\n_s(useResizeObserver, \"swpmFLcor9a4TnJ7R73Pli9/9G8=\");\n\nexport default useResizeObserver;","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/chronovis/src/components/useResizeObserver.js"],"names":["useEffect","useState","ResizeObserver","useResizeObserver","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","entries","forEach","entry","contentRect","observe","unobserve"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,cAAP,MAA2B,0BAA3B,C,CAAuD;;AAEvD;AACA;AACA;;AAEA,MAAMC,iBAAiB,GAAGC,GAAG,IAAI;AAAA;;AAC/B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,IAAD,CAA5C,CAD+B,CAE/B;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,aAAa,GAAGH,GAAG,CAACI,OAA1B,CADc,CAEd;;AACA,UAAMC,cAAc,GAAI,IAAIP,cAAJ,CAAoBQ,OAAD,IAAa;AACtD;AACAA,MAAAA,OAAO,CAACC,OAAR,CAAgBC,KAAK,IAAI;AACvBN,QAAAA,aAAa,CAACM,KAAK,CAACC,WAAP,CAAb;AACD,OAFD;AAGD,KALuB,CAAxB;AAMAJ,IAAAA,cAAc,CAACK,OAAf,CAAuBP,aAAvB,EATc,CAUd;;AACA,WAAO,MAAM;AACXE,MAAAA,cAAc,CAACM,SAAf,CAAyBR,aAAzB;AACD,KAFD;AAGD,GAdQ,EAcN,CAACH,GAAD,CAdM,CAAT;AAeA,SAAOC,UAAP;AACD,CAnBD;;GAAMF,iB;;AAqBN,eAAeA,iBAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\"; //otherwise breaks in safari and edge\n\n/**\n* A hook that defines an html dom element for ResizeObserver to watch\n**/\n\nconst useResizeObserver = ref => {\n  const [dimensions, setDimensions] = useState(null);\n  //only access reference (aka the svg) when it's rendered\n  useEffect(() => {\n    const observeTarget = ref.current;\n    //create new resize observer w callback that takes resize target as args\n    const resizeObserver =  new ResizeObserver((entries) => {\n      //contentRect is the part ResizeObserver returns that has xy dimensions\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    //cleanup function when unmount\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n"]},"metadata":{},"sourceType":"module"}