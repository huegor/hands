{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './stylesheets/index.scss';\nimport Data from \"./data.json\";\nimport Graphic from \"./components/Graphic\";\nimport Image from \"./components/Image\";\nimport NewInstantForm from \"./components/NewInstantForm\";\nimport NewZoneForm from \"./components/NewZoneForm\";\nimport NewScaleForm from \"./components/NewScaleForm\";\nimport InfoBox from \"./components/InfoBox\";\nimport ExportDataForm from \"./components/ExportDataForm\"; // import ImportDataForm from \"./components/ImportDataForm\";\n\nimport ToolsBar from \"./components/ToolsBar\";\nimport Layers from \"./components/Layers\";\nimport Scrubber from \"./components/Scrubber\";\nimport Legend from \"./components/Legend\";\nimport Certainty from \"./components/Certainty\";\nimport Importance from \"./components/Importance\";\nimport Connection from \"./components/Connection\";\nimport generateIntervals from \"./components/generateIntervals\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //blank ChronoJSON template\n  const nullData = {\n    \"imgs\": [],\n    \"instants\": [[]],\n    \"zones\": [],\n    \"scales\": {}\n  };\n  const scaleOnly = {\n    \"imgs\": [],\n    \"instants\": [[]],\n    \"zones\": [],\n    \"scales\": {\n      \"biggie\": {\n        \"min\": 0,\n        \"max\": 0.75,\n        \"units\": \"Unicorns per 100K\",\n        \"yPos\": 1,\n        \"segments\": []\n      }\n    }\n  }; //user defined\n\n  const radius = 5; //for the entire ChronoJSON\n\n  const [src, setSrc] = useState(scaleOnly); //for ChronoJSON history\n\n  const [history, setHistory] = useState([]); //for toggling the active data as used by scrubber\n\n  const [activeData, setActiveData] = useState(0); //for toggling the active layer\n\n  const [activeLayer, setActiveLayer] = useState(); //initialize datapoints\n\n  const [data, setData] = useState(src.instants[activeData]); //links are initialized in Graphic.js\n  // const [links, setLinks] = useState(generateLinks(src.instants[activeData]))\n  //initialize zones\n\n  const [zones, setZones] = useState(src.zones); //initialize scales\n\n  const [scales, setScales] = useState(src.scales); //toggles datapoint IDs vs labels\n\n  const [showLabel, setShowLabel] = useState(true); //for toggling the active scale\n\n  const [activeScale, setActiveScale] = useState(Object.keys(scales)[0]); //UI window toggles\n\n  const [toggle, setToggle] = useState(); //UI info boxes for points, intervals, etc.\n\n  const [info, setInfo] = useState(); //Inflection info\n\n  const [inflectTarget, setInflectTarget] = useState(); //Syntactic inflections order\n\n  const [syntacticOrder, setSyntacticOrder] = useState([null, null, null]); //[target1, target2, #]. # dictates order, switches b/w 0 and 1\n  // console.log(info);\n\n  /*\n    TODO:\n    - for piecewise timeline, make function that generates different graphics\n  */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ToolsBar, {\n      toggle: toggle,\n      setToggle: setToggle,\n      data: data,\n      showLabel: showLabel,\n      setShowLabel: setShowLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), toggle === \"scrubber\" && /*#__PURE__*/_jsxDEV(Scrubber, {\n      activeData: activeData,\n      setActiveData: setActiveData,\n      src: src,\n      setData: setData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 31\n    }, this), toggle === \"NewInstantForm\" && /*#__PURE__*/_jsxDEV(NewInstantForm, {\n      data: data,\n      setData: setData,\n      target: inflectTarget,\n      setToggle: setToggle,\n      scales: scales,\n      activeScale: activeScale\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 37\n    }, this), toggle === \"addZone\" && /*#__PURE__*/_jsxDEV(NewZoneForm, {\n      zones: zones,\n      setZones: setZones,\n      setToggle: setToggle,\n      scales: scales,\n      activeScale: activeScale\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 30\n    }, this), toggle === \"addScale\" && /*#__PURE__*/_jsxDEV(NewScaleForm, {\n      scales: scales,\n      setScales: setScales,\n      setToggle: setToggle,\n      setActiveScale: setActiveScale\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 31\n    }, this), toggle === \"save\" && /*#__PURE__*/_jsxDEV(ExportDataForm, {\n      src: src,\n      data: data,\n      activeData: activeData,\n      setToggle: setToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 27\n    }, this), toggle === \"legend\" && /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 29\n    }, this), toggle === \"layers\" && /*#__PURE__*/_jsxDEV(Layers, {\n      activeLayer: activeLayer,\n      setActiveLayer: setActiveLayer,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 29\n    }, this), toggle === \"certainty\" && /*#__PURE__*/_jsxDEV(Certainty, {\n      target: inflectTarget,\n      setToggle: setToggle,\n      data: data,\n      setData: setData,\n      zones: zones,\n      setZones: setZones\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), toggle === \"importance\" && /*#__PURE__*/_jsxDEV(Importance, {\n      target: inflectTarget,\n      setToggle: setToggle,\n      data: data,\n      setData: setData,\n      zones: zones,\n      setZones: setZones,\n      radius: radius\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this), toggle === \"connection\" && /*#__PURE__*/_jsxDEV(Connection, {\n      target: syntacticOrder,\n      setToggle: setToggle,\n      data: data,\n      setData: setData,\n      zones: zones,\n      setZones: setZones\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      className: \"container fullHeight\",\n      children: [Object.keys(scales).length ? /*#__PURE__*/_jsxDEV(Graphic, {\n        data: data,\n        setData: setData,\n        zones: zones,\n        setZones: setZones,\n        radius: radius,\n        info: info,\n        setInfo: setInfo,\n        setInflectTarget: setInflectTarget,\n        showLabel: showLabel,\n        activeLayer: activeLayer,\n        toggle: toggle,\n        setToggle: setToggle,\n        scales: scales,\n        setScales: setScales,\n        syntacticOrder: syntacticOrder,\n        setSyntacticOrder: setSyntacticOrder,\n        activeScale: activeScale\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexCenter\",\n        children: [\"Upload data or \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setToggle(\"addScale\"),\n          children: \"Create a scale\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 56\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this), src.imgs.length > 0 && /*#__PURE__*/_jsxDEV(Image, {\n        urls: src.imgs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), info && /*#__PURE__*/_jsxDEV(InfoBox, {\n      info: info,\n      setInfo: setInfo,\n      data: data,\n      setData: setData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"O3nJ4JMl82QzKBxfePvdq8O6Tfg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js"],"names":["React","useState","Data","Graphic","Image","NewInstantForm","NewZoneForm","NewScaleForm","InfoBox","ExportDataForm","ToolsBar","Layers","Scrubber","Legend","Certainty","Importance","Connection","generateIntervals","App","nullData","scaleOnly","radius","src","setSrc","history","setHistory","activeData","setActiveData","activeLayer","setActiveLayer","data","setData","instants","zones","setZones","scales","setScales","showLabel","setShowLabel","activeScale","setActiveScale","Object","keys","toggle","setToggle","info","setInfo","inflectTarget","setInflectTarget","syntacticOrder","setSyntacticOrder","length","imgs"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './stylesheets/index.scss';\nimport Data from \"./data.json\";\nimport Graphic from \"./components/Graphic\";\nimport Image from \"./components/Image\";\nimport NewInstantForm from \"./components/NewInstantForm\";\nimport NewZoneForm from \"./components/NewZoneForm\";\nimport NewScaleForm from \"./components/NewScaleForm\";\nimport InfoBox from \"./components/InfoBox\";\nimport ExportDataForm from \"./components/ExportDataForm\";\n// import ImportDataForm from \"./components/ImportDataForm\";\nimport ToolsBar from \"./components/ToolsBar\";\nimport Layers from \"./components/Layers\";\nimport Scrubber from \"./components/Scrubber\";\nimport Legend from \"./components/Legend\";\nimport Certainty from \"./components/Certainty\";\nimport Importance from \"./components/Importance\";\nimport Connection from \"./components/Connection\";\nimport generateIntervals from \"./components/generateIntervals\";\n\n\nfunction App() {\n  //blank ChronoJSON template\n  const nullData = {\n    \"imgs\": [],\n    \"instants\":\n    [\n      []\n    ],\n    \"zones\":\n    [],\n    \"scales\":\n    {}\n  };\n\n  const scaleOnly = {\n    \"imgs\": [],\n    \"instants\":\n    [\n      []\n    ],\n    \"zones\":\n    [],\n    \"scales\":\n    {\n      \"biggie\": {\n        \"min\": 0,\n        \"max\": 0.75,\n        \"units\": \"Unicorns per 100K\",\n        \"yPos\": 1,\n        \"segments\": [\n        ]\n      }\n    }\n  };\n\n\n  //user defined\n  const radius = 5;\n\n\n  //for the entire ChronoJSON\n  const [src, setSrc] = useState(scaleOnly);\n\n  //for ChronoJSON history\n  const [history, setHistory] = useState([])\n\n  //for toggling the active data as used by scrubber\n  const [activeData, setActiveData] = useState(0);\n  //for toggling the active layer\n  const [activeLayer, setActiveLayer] = useState();\n\n  //initialize datapoints\n  const [data, setData] = useState(src.instants[activeData]);\n  //links are initialized in Graphic.js\n  // const [links, setLinks] = useState(generateLinks(src.instants[activeData]))\n  //initialize zones\n  const [zones, setZones] = useState(src.zones);\n  //initialize scales\n  const [scales, setScales] = useState(src.scales);\n  //toggles datapoint IDs vs labels\n  const [showLabel, setShowLabel] = useState(true);\n\n  //for toggling the active scale\n  const [activeScale, setActiveScale] = useState(Object.keys(scales)[0])\n\n  //UI window toggles\n  const [toggle, setToggle] = useState();\n  //UI info boxes for points, intervals, etc.\n  const [info, setInfo] = useState();\n  //Inflection info\n  const [inflectTarget, setInflectTarget] = useState();\n  //Syntactic inflections order\n  const [syntacticOrder, setSyntacticOrder] = useState([null, null, null]); //[target1, target2, #]. # dictates order, switches b/w 0 and 1\n\n  // console.log(info);\n  /*\n    TODO:\n    - for piecewise timeline, make function that generates different graphics\n  */\n\n  return (\n    <>\n      <ToolsBar toggle={toggle} setToggle={setToggle} data={data} showLabel={showLabel} setShowLabel={setShowLabel}/>\n      {toggle===\"scrubber\" && <Scrubber activeData={activeData} setActiveData={setActiveData} src={src} setData={setData}/>}\n      {toggle===\"NewInstantForm\" && <NewInstantForm data={data} setData={setData} target={inflectTarget} setToggle={setToggle} scales={scales} activeScale={activeScale}/>}\n      {toggle===\"addZone\" && <NewZoneForm zones={zones} setZones={setZones} setToggle={setToggle} scales={scales} activeScale={activeScale}/>}\n      {toggle===\"addScale\" && <NewScaleForm scales={scales} setScales={setScales} setToggle={setToggle} setActiveScale={setActiveScale}/>}\n      {toggle===\"save\" && <ExportDataForm src={src} data={data} activeData={activeData} setToggle={setToggle}/>}\n      {toggle===\"legend\" && <Legend/>}\n      {toggle===\"layers\" && <Layers activeLayer={activeLayer} setActiveLayer={setActiveLayer} data={data}/>}\n      {toggle===\"certainty\" &&\n        <Certainty\n          target={inflectTarget}\n          setToggle={setToggle}\n          data={data}\n          setData={setData}\n          zones={zones}\n          setZones={setZones}\n        />\n      }\n      {toggle===\"importance\" &&\n        <Importance\n          target={inflectTarget}\n          setToggle={setToggle}\n          data={data}\n          setData={setData}\n          zones={zones}\n          setZones={setZones}\n          radius={radius}\n        />\n      }\n      {toggle===\"connection\" &&\n        <Connection\n          target={syntacticOrder}\n          setToggle={setToggle}\n          data={data}\n          setData={setData}\n          zones={zones}\n          setZones={setZones}\n        />\n      }\n      <div id=\"main\" className=\"container fullHeight\">\n        {Object.keys(scales).length ?\n          <Graphic\n            data={data}\n            setData={setData}\n            zones={zones}\n            setZones={setZones}\n            radius={radius}\n            info={info}\n            setInfo={setInfo}\n            setInflectTarget={setInflectTarget}\n            showLabel={showLabel}\n            activeLayer={activeLayer}\n            toggle={toggle}\n            setToggle={setToggle}\n            scales={scales}\n            setScales={setScales}\n            syntacticOrder={syntacticOrder}\n            setSyntacticOrder={setSyntacticOrder}\n            activeScale={activeScale}\n          />\n          : <div className=\"flexCenter\">Upload data or <button onClick={() => setToggle(\"addScale\")}>Create a scale</button></div>\n        }\n        {src.imgs.length>0 && <Image urls={src.imgs}/>}\n      </div>\n      {info && <InfoBox info={info} setInfo={setInfo} data={data} setData={setData}/>}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}