{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic_copy.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, axisBottom, linkHorizontal, line, curveMonotoneX, drag, zoom } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport Image from \"./Image\";\nimport Data from \"../data.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Graphic({\n  src,\n  minMax,\n  radius,\n  fontSize\n}) {\n  _s();\n\n  const [data, setData] = useState(src);\n\n  function initLinks() {\n    const newLinks = [];\n\n    for (var i = 0; i <= data.length - 1; i++) {\n      // console.log(data[i]);\n      //if multiple nodes are targets:\n      //if this is the last node:\n      if (i === data.length - 1) {\n        return;\n      }\n\n      ; // console.log(data[i]);\n\n      newLinks.push({\n        source: data[i],\n        target: data[i + 1],\n        color: data[i].color\n      });\n      console.log(newLinks);\n    }\n\n    ;\n  } // initLinks();\n\n\n  const [links, setLinks] = useState(() => {\n    for (var i = 0; i <= data.length - 1; i++) {\n      // console.log(data[i]);\n      //if multiple nodes are targets:\n      //if this is the last node:\n      if (i === data.length - 1) {\n        return;\n      }\n\n      ; // console.log(data[i]);\n\n      return {\n        source: data[i],\n        target: data[i + 1],\n        color: data[i].lineColor\n      };\n    }\n  }); // const initLinks = () => {\n  //   //unless specified, create new array object that\n  //   //sets current array element to be source and\n  //   //next array element to be target\n  //   for (var i = 0; i <= data.length-1; i++) {\n  //     //if multiple nodes are targets:\n  //     //if this is the last node:\n  //     if (i === data.length-1) {\n  //       return;\n  //     }\n  //     else {\n  //       return (\n  //         {\"source\":data[i], \"target\":data[i+1]}\n  //       )\n  //     }\n  //   }\n  // };\n  // console.log(initLinks);\n  //reference object to pass to svg in React Dom\n\n  const svgRef = useRef(); //svg wrapped in div bc otherwise resize observer callback won't work\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState(); //all d3 shennanigans goes in this hook. called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n\n    if (!dimensions) return; //prevents crashing before min and max are calculated\n\n    if (!minMax) return; //prevents error before links is initialized\n    // if (links.length !== data.length-2) return;\n    // console.log(links);\n    //---scales---//\n    //scaleLinear takes domain (data values) & maps onto range (pixel values)\n\n    const xScale = scaleLinear().domain([minMax[0], minMax[1]]) //0 is minX, 1 is maxX (reference findMinMax)\n    .range([0, dimensions.width]);\n    const yScale = scaleLinear().domain([0, minMax[3]]) //todo\n    .range([0, dimensions.height]); //inverse scales for drag behavior\n\n    const xScaleInverse = scaleLinear().domain([-dimensions.width, dimensions.width]).range([-minMax[1], minMax[1]]);\n    const yScaleInverse = scaleLinear().domain([-dimensions.height, dimensions.height]).range([-minMax[3], minMax[3]]);\n\n    if (currentZoomState) {\n      const newXScale = currentZoomState.rescaleX(xScale); //zoom state comes w methods for transformations\n\n      xScale.domain(newXScale.domain());\n      xScaleInverse.range([-(newXScale.domain()[1] - newXScale.domain()[0]), newXScale.domain()[1] - newXScale.domain()[0]]);\n    }\n\n    ; //---draw x axis---//\n\n    const xAxis = axisBottom(xScale);\n    svg.select(\".x-axis\").style(\"transform\", `translateY(${dimensions.height}px)`).call(xAxis); //replace class \"x-axis\" w xAxis\n    //--drag behavior--//\n\n    const dragged = drag().on(\"drag\", e => {\n      const newData = [...data]; //always make a copy when updating array\n      //find array element in newData (id = index) and set new x y coordinates\n      //define id as array.length-1\n\n      newData[e.subject.id].x += xScaleInverse(e.dx);\n      newData[e.subject.id].y += yScaleInverse(e.dy); // console.log(newData[e.subject.id].x + \", \" + newData[e.subject.id].y);\n\n      setData(newData);\n    }); //---draw lines---//\n\n    const linker = linkHorizontal().source(link => link.source).target(link => link.target).x(node => xScale(node.x)).y(node => yScale(node.y));\n    svg.selectAll(\".link\").data([links]).join(\"path\").attr(\"class\", \"link\").attr(\"d\", linker).attr(\"fill\", \"none\").attr(\"stroke\", n => n.color ? n.color : \"black\"); // const myLine = line()\n    //   .x(d => xScale(d.x))\n    //   .y(d => yScale(d.y))\n    //   .curve(curveMonotoneX);\n    //\n    // svg\n    //   .selectAll(\".line\") //if no line class, it selects x axis too\n    //   .data([data]) //just draw 1 line for the whole array\n    //   .join(\"path\")\n    //   .attr(\"class\", \"line\")\n    //   .attr(\"d\", value => myLine(value))\n    //   .attr(\"fill\", \"none\")\n    //   .attr(\"stroke\", \"black\");\n    //---draw points---//\n\n    svg.selectAll(\"circle\").data(data).join(\"circle\").attr(\"r\", radius).attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n    .attr(\"cx\", d => xScale(d.x)).attr(\"cy\", d => yScale(d.y)).call(dragged); //---draw labels---//\n\n    svg.selectAll(\".label\").data(data).join(\"text\").attr(\"class\", \"label\").text(node => node.name).attr(\"x\", node => xScale(node.x)).attr(\"y\", node => yScale(node.y + 2)).attr(\"text-anchor\", \"middle\").attr(\"font-size\", fontSize); //---zoom---//\n\n    const zoomBehavior = zoom().scaleExtent([0.25, 5]) //can zoom 2x smaller and 5x bigger\n    .translateExtent([[-100, 0], [dimensions.width + 100, dimensions.height]]) //limits how far graph can pan\n    .on(\"zoom\", e => {\n      const zoomState = e.transform; //returns zoom transformations as an object\n\n      setCurrentZoomState(zoomState);\n    });\n    svg.call(zoomBehavior);\n  }, [data, links, dimensions, currentZoomState, minMax, radius, fontSize]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: wrapperRef,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        children: /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"x-axis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"images\",\n      children: Data ? /*#__PURE__*/_jsxDEV(Image, {\n        urls: Data.imgs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Graphic, \"wjC/mQHre92diy8TCgrGp/aS1mM=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = Graphic;\n;\nexport default Graphic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graphic\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic_copy.js"],"names":["React","useState","useEffect","useRef","select","scaleLinear","axisBottom","linkHorizontal","line","curveMonotoneX","drag","zoom","useResizeObserver","Image","Data","Graphic","src","minMax","radius","fontSize","data","setData","initLinks","newLinks","i","length","push","source","target","color","console","log","links","setLinks","lineColor","svgRef","wrapperRef","dimensions","currentZoomState","setCurrentZoomState","svg","current","xScale","domain","range","width","yScale","height","xScaleInverse","yScaleInverse","newXScale","rescaleX","xAxis","style","call","dragged","on","e","newData","subject","id","x","dx","y","dy","linker","link","node","selectAll","join","attr","n","d","text","name","zoomBehavior","scaleExtent","translateExtent","zoomState","transform","imgs"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, axisBottom, linkHorizontal, line, curveMonotoneX, drag, zoom } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport Image from \"./Image\";\nimport Data from \"../data.json\";\n\nfunction Graphic({src, minMax, radius, fontSize}) {\n  const [data, setData] = useState(src);\n  function initLinks() {\n    const newLinks = [];\n    for (var i = 0; i <= data.length-1; i++) {\n      // console.log(data[i]);\n      //if multiple nodes are targets:\n      //if this is the last node:\n      if (i === data.length-1){\n        return;\n      };\n      // console.log(data[i]);\n      newLinks.push({source:data[i], target:data[i+1], color:data[i].color});\n      console.log(newLinks);\n    };\n\n  }\n// initLinks();\n  const [links, setLinks] = useState(() => {\n    for (var i = 0; i <= data.length-1; i++) {\n      // console.log(data[i]);\n      //if multiple nodes are targets:\n      //if this is the last node:\n      if (i === data.length-1){\n        return;\n      };\n      // console.log(data[i]);\n      return({source:data[i], target:data[i+1], color:data[i].lineColor});\n    }\n  });\n\n  // const initLinks = () => {\n  //   //unless specified, create new array object that\n  //   //sets current array element to be source and\n  //   //next array element to be target\n  //   for (var i = 0; i <= data.length-1; i++) {\n  //     //if multiple nodes are targets:\n  //     //if this is the last node:\n  //     if (i === data.length-1) {\n  //       return;\n  //     }\n  //     else {\n  //       return (\n  //         {\"source\":data[i], \"target\":data[i+1]}\n  //       )\n  //     }\n  //   }\n  // };\n  // console.log(initLinks);\n\n  //reference object to pass to svg in React Dom\n  const svgRef = useRef();\n  //svg wrapped in div bc otherwise resize observer callback won't work\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState();\n\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n    if (!dimensions) return;\n    //prevents crashing before min and max are calculated\n    if (!minMax) return;\n    //prevents error before links is initialized\n    // if (links.length !== data.length-2) return;\n\n    // console.log(links);\n    //---scales---//\n    //scaleLinear takes domain (data values) & maps onto range (pixel values)\n    const xScale = scaleLinear()\n      .domain([minMax[0], minMax[1]]) //0 is minX, 1 is maxX (reference findMinMax)\n      .range([0, dimensions.width]);\n    const yScale = scaleLinear()\n      .domain([0, minMax[3]]) //todo\n      .range([0, dimensions.height]);\n    //inverse scales for drag behavior\n    const xScaleInverse = scaleLinear()\n      .domain([-dimensions.width, dimensions.width])\n      .range([-minMax[1], minMax[1]]);\n    const yScaleInverse = scaleLinear()\n      .domain([-dimensions.height, dimensions.height])\n      .range([-minMax[3], minMax[3]]);\n\n    if (currentZoomState) {\n      const newXScale = currentZoomState.rescaleX(xScale); //zoom state comes w methods for transformations\n      xScale.domain(newXScale.domain());\n      xScaleInverse.range([\n        -(newXScale.domain()[1]-newXScale.domain()[0]),\n        (newXScale.domain()[1]-newXScale.domain()[0])\n      ]);\n    };\n\n    //---draw x axis---//\n    const xAxis = axisBottom(xScale);\n\n    svg\n      .select(\".x-axis\")\n      .style(\"transform\", `translateY(${dimensions.height}px)`)\n      .call(xAxis); //replace class \"x-axis\" w xAxis\n\n    //--drag behavior--//\n    const dragged = drag()\n      .on(\"drag\", e => {\n        const newData = [...data]; //always make a copy when updating array\n        //find array element in newData (id = index) and set new x y coordinates\n        //define id as array.length-1\n        newData[e.subject.id].x += xScaleInverse(e.dx);\n        newData[e.subject.id].y += yScaleInverse(e.dy);\n        // console.log(newData[e.subject.id].x + \", \" + newData[e.subject.id].y);\n        setData(newData);\n      });\n\n    //---draw lines---//\n    const linker = linkHorizontal()\n      .source(link => link.source)\n      .target(link => link.target)\n      .x(node => xScale(node.x))\n      .y(node => yScale(node.y));\n\n    svg\n      .selectAll(\".link\")\n      .data([links])\n      .join(\"path\")\n      .attr(\"class\", \"link\")\n      .attr(\"d\", linker)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", n => n.color? n.color : \"black\");\n\n    // const myLine = line()\n    //   .x(d => xScale(d.x))\n    //   .y(d => yScale(d.y))\n    //   .curve(curveMonotoneX);\n    //\n    // svg\n    //   .selectAll(\".line\") //if no line class, it selects x axis too\n    //   .data([data]) //just draw 1 line for the whole array\n    //   .join(\"path\")\n    //   .attr(\"class\", \"line\")\n    //   .attr(\"d\", value => myLine(value))\n    //   .attr(\"fill\", \"none\")\n    //   .attr(\"stroke\", \"black\");\n\n\n    //---draw points---//\n    svg\n      .selectAll(\"circle\")\n      .data(data)\n      .join(\"circle\")\n      .attr(\"r\", radius)\n      .attr(\"fill\", d => d.color ? d.color : \"black\") //if it has a color other than black, use that\n      .attr(\"cx\", d => xScale(d.x))\n      .attr(\"cy\", d => yScale(d.y))\n      .call(dragged);\n\n    //---draw labels---//\n    svg\n    .selectAll(\".label\")\n    .data(data)\n    .join(\"text\")\n    .attr(\"class\", \"label\")\n    .text(node => node.name)\n    .attr(\"x\", node => xScale(node.x))\n    .attr(\"y\", node => yScale(node.y + 2))\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"font-size\", fontSize);\n\n    //---zoom---//\n    const zoomBehavior = zoom()\n      .scaleExtent([0.25, 5]) //can zoom 2x smaller and 5x bigger\n      .translateExtent([[-100, 0], [dimensions.width+100, dimensions.height]]) //limits how far graph can pan\n      .on(\"zoom\", e => {\n        const zoomState = e.transform; //returns zoom transformations as an object\n        setCurrentZoomState(zoomState);\n      });\n\n    svg.call(zoomBehavior);\n  }, [data, links, dimensions, currentZoomState, minMax, radius, fontSize]);\n\n  return (\n    <>\n    <div ref={wrapperRef}>\n      <svg ref={svgRef}>\n        <g className=\"x-axis\" />\n      </svg>\n    </div>\n    <div className=\"images\">\n      {Data ? <Image urls={Data.imgs}/> : null}\n    </div>\n    </>\n  );\n};\n\nexport default Graphic;\n"]},"metadata":{},"sourceType":"module"}