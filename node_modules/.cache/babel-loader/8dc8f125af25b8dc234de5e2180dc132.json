{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './stylesheets/index.scss';\nimport Data from \"./history.json\";\nimport Graphic from \"./components/Graphic\";\nimport Image from \"./components/Image\";\nimport NewPointForm from \"./components/NewPointForm\";\nimport InfoBox from \"./components/InfoBox\";\nimport ExportDataForm from \"./components/ExportDataForm\"; // import findMinMax from \"./components/findMinMax\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ToolsBar extends React.Component {\n  constructor(props) {\n    super(props); // Don't call this.setState() here!\n\n    this.state = {\n      toggleLabel: true\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    switch (e.target.id) {\n      case 'toggleLabel':\n        this.state.toggleLabel ? this.setState({\n          toggleLabel: false\n        }) : this.setState({\n          toggleLabel: true\n        });\n        break;\n      // case 'save': //save JSON as file to computer\n      //   // console.log(this.props.src);\n      //   const fileData = JSON.stringify(this.props.src);\n      //   const blob = new Blob([fileData], {type: \"text/plain\"});\n      //   const url = URL.createObjectURL(blob);\n      //   const link = document.createElement('a');\n      //   link.download = `data.json`;\n      //   link.href = url;\n      //   link.click();\n      // break\n\n      default:\n        this.props.setToggle(e.target.id);\n    }\n\n    e.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"ui relative\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"addPoint\",\n            onClick: this.handleClick,\n            children: \"Add Point\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"toggleLabel\",\n            onClick: this.handleClick,\n            children: this.state.toggleLabel ? \"Toggle IDs\" : \"Toggle Labels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"settings\",\n            onClick: this.handleClick,\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"import\",\n            onClick: this.handleClick,\n            children: \"Import\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"save\",\n            onClick: this.handleClick,\n            children: \"Save & Export\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction App() {\n  _s();\n\n  //user defined\n  const radius = 5; //for the entire ChronoJSON\n\n  const [src, setSrc] = useState({\n    \"imgs\": [],\n    \"nodes\": [[]],\n    \"intervals\": []\n  }); //for toggling the active dataset\n\n  const [activeData, setActiveData] = useState(0); //pertaining to datapoints only\n\n  const [data, setData] = useState(src.nodes[activeData]); //todo: comparative timelines, layering\n  //pertaining to intervals only\n\n  const [intervals, setIntervals] = useState(src.intervals); //UI window toggles\n\n  const [toggle, setToggle] = useState(); //UI info boxes for points, lines, etc.\n\n  const [info, setInfo] = useState();\n  /*\n    TODO:\n    - findMinMax() adjust less frequently. ie: if new data can be panned to, no need to adjust viewport\n    - for piecewise timeline, make function that generates different graphics\n    - create a master array of all snapshots of data (for scrubber)\n  */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ToolsBar, {\n      setToggle: setToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), toggle === \"addPoint\" ? /*#__PURE__*/_jsxDEV(NewPointForm, {\n      data: data,\n      setData: setData,\n      setToggle: setToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 30\n    }, this) : null, toggle === \"save\" ? /*#__PURE__*/_jsxDEV(ExportDataForm, {\n      src: src,\n      data: data,\n      activeData: activeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 26\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      className: \"container fullHeight\",\n      children: [src.nodes[activeData].length ? /*#__PURE__*/_jsxDEV(Graphic, {\n        data: data,\n        setData: setData,\n        intervals: intervals,\n        setIntervals: setIntervals,\n        radius: radius,\n        setInfo: setInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexCenter\",\n        children: [\"Upload data or \", /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Add new point\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 56\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), src.imgs.length ? /*#__PURE__*/_jsxDEV(Image, {\n        urls: src.imgs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 28\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), info ? /*#__PURE__*/_jsxDEV(InfoBox, {\n      data: info\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }, this) : null]\n  }, void 0, true);\n}\n\n_s(App, \"0ieZQNXFxNLHoMe/d4jDCkPVeU0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js"],"names":["React","useState","Data","Graphic","Image","NewPointForm","InfoBox","ExportDataForm","ToolsBar","Component","constructor","props","state","toggleLabel","handleClick","bind","e","target","id","setState","setToggle","preventDefault","render","App","radius","src","setSrc","activeData","setActiveData","data","setData","nodes","intervals","setIntervals","toggle","info","setInfo","length","imgs"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,0BAAP;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,cAAP,MAA2B,6BAA3B,C,CACA;;;;;AAIA,MAAMC,QAAN,SAAuBR,KAAK,CAACS,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE;AADF,KAAb;AAGA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDD,EAAAA,WAAW,CAACE,CAAD,EAAI;AACb,YAAQA,CAAC,CAACC,MAAF,CAASC,EAAjB;AACE,WAAK,aAAL;AACE,aAAKN,KAAL,CAAWC,WAAX,GACE,KAAKM,QAAL,CAAc;AAACN,UAAAA,WAAW,EAAE;AAAd,SAAd,CADF,GAEE,KAAKM,QAAL,CAAc;AAACN,UAAAA,WAAW,EAAE;AAAd,SAAd,CAFF;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACE,aAAKF,KAAL,CAAWS,SAAX,CAAqBJ,CAAC,CAACC,MAAF,CAASC,EAA9B;AAjBJ;;AAmBAF,IAAAA,CAAC,CAACK,cAAF;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,6BACE;AAAA,gCACE;AAAA,iCAAI;AAAQ,YAAA,EAAE,EAAC,UAAX;AAAsB,YAAA,OAAO,EAAE,KAAKR,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,iCAAI;AAAQ,YAAA,EAAE,EAAC,aAAX;AAAyB,YAAA,OAAO,EAAE,KAAKA,WAAvC;AAAA,sBAAqD,KAAKF,KAAL,CAAWC,WAAX,GAAyB,YAAzB,GAAwC;AAA7F;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,iCAAI;AAAQ,YAAA,EAAE,EAAC,UAAX;AAAsB,YAAA,OAAO,EAAE,KAAKC,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAA,iCAAI;AAAQ,YAAA,EAAE,EAAC,QAAX;AAAoB,YAAA,OAAO,EAAE,KAAKA,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE;AAAA,iCAAI;AAAQ,YAAA,EAAE,EAAC,MAAX;AAAkB,YAAA,OAAO,EAAE,KAAKA,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AA7CoC;;AAiDvC,SAASS,GAAT,GAAe;AAAA;;AAEb;AACA,QAAMC,MAAM,GAAG,CAAf,CAHa,CAKb;;AACA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBzB,QAAQ,CAAC;AAC7B,YAAQ,EADqB;AAE7B,aACA,CACE,EADF,CAH6B;AAM7B,iBACA;AAP6B,GAAD,CAA9B,CANa,CAgBb;;AACA,QAAM,CAAC0B,UAAD,EAAaC,aAAb,IAA8B3B,QAAQ,CAAC,CAAD,CAA5C,CAjBa,CAkBb;;AACA,QAAM,CAAC4B,IAAD,EAAOC,OAAP,IAAkB7B,QAAQ,CAACwB,GAAG,CAACM,KAAJ,CAAUJ,UAAV,CAAD,CAAhC,CAnBa,CAmB4C;AACzD;;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BhC,QAAQ,CAACwB,GAAG,CAACO,SAAL,CAA1C,CArBa,CAsBb;;AACA,QAAM,CAACE,MAAD,EAASd,SAAT,IAAsBnB,QAAQ,EAApC,CAvBa,CAwBb;;AACA,QAAM,CAACkC,IAAD,EAAOC,OAAP,IAAkBnC,QAAQ,EAAhC;AAEA;AACF;AACA;AACA;AACA;AACA;;AAEE,sBACE;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,SAAS,EAAEmB;AAArB;AAAA;AAAA;AAAA;AAAA,YADF,EAEGc,MAAM,KAAG,UAAT,gBAAsB,QAAC,YAAD;AAAc,MAAA,IAAI,EAAEL,IAApB;AAA0B,MAAA,OAAO,EAAEC,OAAnC;AAA4C,MAAA,SAAS,EAAEV;AAAvD;AAAA;AAAA;AAAA;AAAA,YAAtB,GAA4F,IAF/F,EAGGc,MAAM,KAAG,MAAT,gBAAkB,QAAC,cAAD;AAAgB,MAAA,GAAG,EAAET,GAArB;AAA0B,MAAA,IAAI,EAAEI,IAAhC;AAAsC,MAAA,UAAU,EAAEF;AAAlD;AAAA;AAAA;AAAA;AAAA,YAAlB,GAAoF,IAHvF,eAIE;AAAK,MAAA,EAAE,EAAC,MAAR;AAAe,MAAA,SAAS,EAAC,sBAAzB;AAAA,iBACGF,GAAG,CAACM,KAAJ,CAAUJ,UAAV,EAAsBU,MAAtB,gBACC,QAAC,OAAD;AACE,QAAA,IAAI,EAAER,IADR;AAEE,QAAA,OAAO,EAAEC,OAFX;AAGE,QAAA,SAAS,EAAEE,SAHb;AAIE,QAAA,YAAY,EAAEC,YAJhB;AAKE,QAAA,MAAM,EAAET,MALV;AAME,QAAA,OAAO,EAAEY;AANX;AAAA;AAAA;AAAA;AAAA,cADD,gBASG;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,mDAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,cAVN,EAYGX,GAAG,CAACa,IAAJ,CAASD,MAAT,gBAAkB,QAAC,KAAD;AAAO,QAAA,IAAI,EAAEZ,GAAG,CAACa;AAAjB;AAAA;AAAA;AAAA;AAAA,cAAlB,GAA6C,IAZhD;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,EAkBGH,IAAI,gBAAG,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEA;AAAf;AAAA;AAAA;AAAA;AAAA,YAAH,GAA4B,IAlBnC;AAAA,kBADF;AAsBD;;GAxDQZ,G;;KAAAA,G;AA0DT,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport './stylesheets/index.scss';\nimport Data from \"./history.json\";\nimport Graphic from \"./components/Graphic\";\nimport Image from \"./components/Image\";\nimport NewPointForm from \"./components/NewPointForm\";\nimport InfoBox from \"./components/InfoBox\";\nimport ExportDataForm from \"./components/ExportDataForm\";\n// import findMinMax from \"./components/findMinMax\";\n\n\n\nclass ToolsBar extends React.Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = {\n      toggleLabel: true\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    switch (e.target.id) {\n      case 'toggleLabel':\n        this.state.toggleLabel ?\n          this.setState({toggleLabel: false})\n        : this.setState({toggleLabel: true});\n      break\n      // case 'save': //save JSON as file to computer\n      //   // console.log(this.props.src);\n      //   const fileData = JSON.stringify(this.props.src);\n      //   const blob = new Blob([fileData], {type: \"text/plain\"});\n      //   const url = URL.createObjectURL(blob);\n      //   const link = document.createElement('a');\n      //   link.download = `data.json`;\n      //   link.href = url;\n      //   link.click();\n      // break\n      default:\n        this.props.setToggle(e.target.id);\n    }\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <nav className=\"ui relative\">\n        <ul>\n          <li><button id=\"addPoint\" onClick={this.handleClick}>Add Point</button></li>\n          <li><button id=\"toggleLabel\" onClick={this.handleClick}>{this.state.toggleLabel ? \"Toggle IDs\" : \"Toggle Labels\"}</button></li>\n          <li><button id=\"settings\" onClick={this.handleClick}>Settings</button></li>\n          <li><button id=\"import\" onClick={this.handleClick}>Import</button></li>\n          <li><button id=\"save\" onClick={this.handleClick}>Save & Export</button></li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\n\nfunction App() {\n\n  //user defined\n  const radius = 5;\n\n  //for the entire ChronoJSON\n  const [src, setSrc] = useState({\n    \"imgs\": [],\n    \"nodes\":\n    [\n      []\n    ],\n    \"intervals\":\n    []\n  });\n\n  //for toggling the active dataset\n  const [activeData, setActiveData] = useState(0);\n  //pertaining to datapoints only\n  const [data, setData] = useState(src.nodes[activeData]); //todo: comparative timelines, layering\n  //pertaining to intervals only\n  const [intervals, setIntervals] = useState(src.intervals);\n  //UI window toggles\n  const [toggle, setToggle] = useState();\n  //UI info boxes for points, lines, etc.\n  const [info, setInfo] = useState();\n\n  /*\n    TODO:\n    - findMinMax() adjust less frequently. ie: if new data can be panned to, no need to adjust viewport\n    - for piecewise timeline, make function that generates different graphics\n    - create a master array of all snapshots of data (for scrubber)\n  */\n\n  return (\n    <>\n      <ToolsBar setToggle={setToggle}/>\n      {toggle===\"addPoint\" ? <NewPointForm data={data} setData={setData} setToggle={setToggle}/> : null}\n      {toggle===\"save\" ? <ExportDataForm src={src} data={data} activeData={activeData}/> : null}\n      <div id=\"main\" className=\"container fullHeight\">\n        {src.nodes[activeData].length ?\n          <Graphic\n            data={data}\n            setData={setData}\n            intervals={intervals}\n            setIntervals={setIntervals}\n            radius={radius}\n            setInfo={setInfo}\n          />\n          : <div className=\"flexCenter\">Upload data or <button>Add new point</button></div>\n        }\n        {src.imgs.length ? <Image urls={src.imgs}/> : null}\n      </div>\n      {info ? <InfoBox data={info}/> : null}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}