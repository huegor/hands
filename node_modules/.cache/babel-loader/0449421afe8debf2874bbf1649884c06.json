{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, drag, axisBottom } from \"d3\"; // import Canvas from './components/Canvas'\n\nimport \"./App.css\"; //defines dom element for resize observer to watch\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useResizeObserver = ref => {\n  _s();\n\n  const [dimensions, setDimensions] = useState(null); //only access reference (aka the svg) when it's rendered\n\n  useEffect(() => {\n    const observeTarget = ref.current; //create new resize observer w callback that takes resize target as args\n\n    const resizeObserver = new ResizeObserver(entries => {\n      //contentRect is the part ResizeObserver returns that has xy dimensions\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget); //cleanup function when unmount\n\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, []);\n  return dimensions;\n};\n\n_s(useResizeObserver, \"swpmFLcor9a4TnJ7R73Pli9/9G8=\");\n\nfunction App() {\n  _s2();\n\n  // const [data, setData] = React.useState(null);\n  //\n  // //make a GET request to backend using Fetch API\n  // //store returned JSON in state variable \"data\"\n  // React.useEffect(() => {\n  //   fetch(\"/api\")\n  //     .then((res) => res.json())\n  //     .then((data) => setData(data.message));\n  // }, []);\n  //\n  // //draw circle\n  // const draw = (ctx, frameCount) => {\n  //     ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n  //     ctx.fillStyle = '#000000'\n  //     ctx.beginPath()\n  //     ctx.arc(50, 100, 20*Math.sin(frameCount*0.05)**2, 0, 2*Math.PI)\n  //     ctx.fill()\n  //   }\n  //\n  // //if data not there yet, show \"Loading...\"\n  // return (\n  //   <>\n  //     <p>{!data ? \"Loading...\" : data}</p>\n  //     <Canvas draw={draw}/>\n  //   </>\n  // );\n  const [data, setData] = useState([25, 30, 45, 60, 20]);\n  const radius = 4; //reference object to pass to svg in React Dom\n\n  const svgRef = useRef(); //svg wrapped in div bc otherwise resize observer callback won't work\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); // const { width, height } =\n  //   dimensions || wrapperRef.current.getBoundingClientRect();\n  //\n  // //lines and axes\n  // //mapping xValues to width of wrapper\n  // const xScale = scaleLinear()\n  //     .domain([0, max(data)])\n  //     .range([0, width]);\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n\n  useEffect(() => {\n    const svgContent = select(svgRef.current); //prevents crashing when useResizeObserver returns null before svg is rendered\n\n    if (!dimensions) return; //---scales---//\n    //domain (data values) maps onto range (pixel values)\n\n    const xScale = scaleLinear().domain([0, 120]).range([0, dimensions.width]);\n    const xAxis = axisBottom(xScale); //find dom element w class \"x-axis\" and replace it w xAxis\n\n    svgContent.select(\".x-axis\").call(xAxis);\n    svgContent.selectAll(\"circle\").data(data).join(\"circle\").attr(\"r\", radius).attr(\"cx\", d => xScale(d) * 2).attr(\"cy\", d => xScale(d) * 2);\n  }, [data, dimensions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"x-axis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"Ht7yK59776CKVr9EKxXyXvz7VN8=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js"],"names":["React","useState","useEffect","useRef","select","scaleLinear","drag","axisBottom","useResizeObserver","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","App","data","setData","radius","svgRef","wrapperRef","svgContent","xScale","domain","range","width","xAxis","call","selectAll","join","attr","d"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, drag, axisBottom } from \"d3\";\n// import Canvas from './components/Canvas'\nimport \"./App.css\";\n\n//defines dom element for resize observer to watch\nconst useResizeObserver = ref => {\n  const [dimensions, setDimensions] = useState(null);\n  //only access reference (aka the svg) when it's rendered\n  useEffect(() => {\n    const observeTarget = ref.current;\n    //create new resize observer w callback that takes resize target as args\n    const resizeObserver =  new ResizeObserver((entries) => {\n      //contentRect is the part ResizeObserver returns that has xy dimensions\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    //cleanup function when unmount\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, []);\n  return dimensions;\n}\n\nfunction App() {\n  // const [data, setData] = React.useState(null);\n  //\n  // //make a GET request to backend using Fetch API\n  // //store returned JSON in state variable \"data\"\n  // React.useEffect(() => {\n  //   fetch(\"/api\")\n  //     .then((res) => res.json())\n  //     .then((data) => setData(data.message));\n  // }, []);\n  //\n  // //draw circle\n  // const draw = (ctx, frameCount) => {\n  //     ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n  //     ctx.fillStyle = '#000000'\n  //     ctx.beginPath()\n  //     ctx.arc(50, 100, 20*Math.sin(frameCount*0.05)**2, 0, 2*Math.PI)\n  //     ctx.fill()\n  //   }\n  //\n  // //if data not there yet, show \"Loading...\"\n  // return (\n  //   <>\n  //     <p>{!data ? \"Loading...\" : data}</p>\n  //     <Canvas draw={draw}/>\n  //   </>\n  // );\n  const [data, setData] = useState([25, 30, 45, 60, 20]);\n\n  const radius = 4;\n  //reference object to pass to svg in React Dom\n  const svgRef = useRef();\n  //svg wrapped in div bc otherwise resize observer callback won't work\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  // const { width, height } =\n  //   dimensions || wrapperRef.current.getBoundingClientRect();\n  //\n  // //lines and axes\n  // //mapping xValues to width of wrapper\n  // const xScale = scaleLinear()\n  //     .domain([0, max(data)])\n  //     .range([0, width]);\n\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n  useEffect(()=> {\n    const svgContent = select(svgRef.current);\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n    if (!dimensions) return;\n\n    //---scales---//\n    //domain (data values) maps onto range (pixel values)\n    const xScale = scaleLinear()\n        .domain([0, 120])\n        .range([0, dimensions.width]);\n    const xAxis = axisBottom(xScale);\n    //find dom element w class \"x-axis\" and replace it w xAxis\n    svgContent.select(\".x-axis\").call(xAxis);\n\n    svgContent\n      .selectAll(\"circle\")\n      .data(data)\n      .join(\"circle\")\n      .attr(\"r\", radius)\n      .attr(\"cx\", d => xScale(d)*2)\n      .attr(\"cy\", d => xScale(d)*2);\n\n  }, [data, dimensions]);\n\n  return (\n    <div ref={wrapperRef}>\n      <svg ref={svgRef}>\n        <g className=\"x-axis\" />\n      </svg>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}