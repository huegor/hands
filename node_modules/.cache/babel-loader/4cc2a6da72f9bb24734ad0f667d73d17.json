{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, axisBottom, line, curveCardinal, drag } from \"d3\";\nimport ResizeObserver from \"resize-observer-polyfill\"; //otherwise breaks in safari and edge\n\nimport \"./App.css\";\nimport Data from \"./data.json\"; //defines dom element for resize observer to watch\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useResizeObserver = ref => {\n  _s();\n\n  const [dimensions, setDimensions] = useState(null); //only access reference (aka the svg) when it's rendered\n\n  useEffect(() => {\n    const observeTarget = ref.current; //create new resize observer w callback that takes resize target as args\n\n    const resizeObserver = new ResizeObserver(entries => {\n      //contentRect is the part ResizeObserver returns that has xy dimensions\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget); //cleanup function when unmount\n\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, []);\n  return dimensions;\n};\n\n_s(useResizeObserver, \"swpmFLcor9a4TnJ7R73Pli9/9G8=\");\n\nfunction App() {\n  _s2();\n\n  //data is initially set to imported json array Data\n  const [data, setData] = useState(Data);\n  const radius = 6; //reference object to pass to svg in React Dom\n\n  const svgRef = useRef(); //svg wrapped in div bc otherwise resize observer callback won't work\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); // const { width, height } =\n  //   dimensions || wrapperRef.current.getBoundingClientRect();\n  //\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n\n  useEffect(() => {\n    const svgContent = select(svgRef.current); //svgContent is current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n\n    if (!dimensions) return; //---scales---//\n    //scaleLinear takes domain (data values) & maps onto range (pixel values)\n\n    const xScale = scaleLinear().domain([0, 60]) //todo\n    .range([0, dimensions.width]);\n    const yScale = scaleLinear().domain([0, 60]) //todo\n    .range([0, dimensions.height]);\n    const xScaleInverse = scaleLinear().range([0, dimensions.height]).domain([0, 60]); //todo\n    //---draw x axis---//\n\n    const xAxis = axisBottom(xScale);\n    svgContent.select(\".x-axis\").style(\"transform\", `translateY(${dimensions.height}px)`).call(xAxis); //replace class \"x-axis\" w xAxis\n    //--draggable--//\n\n    const dragged = drag().on(\"drag\", e => {\n      console.log(e.x);\n      const newData = [...data]; //always make a copy when updating array\n      //find array element in newData (id = index) and set new x y coordinates\n\n      newData[e.subject.id].x = e.x;\n      newData[e.subject.id].y += e.dy;\n      setData(newData);\n    }); //---draw points---//\n\n    svgContent.selectAll(\"circle\").data(data).join(\"circle\").attr(\"r\", radius).call(dragged).attr(\"cx\", d => d.x).attr(\"cy\", d => yScale(d.y)); //---draw line---//\n\n    const myLine = line().x(d => d.x).y(d => yScale(d.y)).curve(curveCardinal);\n    svgContent.selectAll(\".line\") //otherwise it selects x axis\n    .data([data]) //just draw 1 line for the whole array\n    .join(\"path\").attr(\"class\", \"line\").attr(\"d\", value => myLine(value)).attr(\"fill\", \"none\").attr(\"stroke\", \"black\");\n  }, [data, dimensions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"x-axis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"aFisn1FWCbcoVE11vs+uw/rrFFg=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js"],"names":["React","useState","useEffect","useRef","select","scaleLinear","axisBottom","line","curveCardinal","drag","ResizeObserver","Data","useResizeObserver","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","entries","forEach","entry","contentRect","observe","unobserve","App","data","setData","radius","svgRef","wrapperRef","svgContent","xScale","domain","range","width","yScale","height","xScaleInverse","xAxis","style","call","dragged","on","e","console","log","x","newData","subject","id","y","dy","selectAll","join","attr","d","myLine","curve","value"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,UAA9B,EAA0CC,IAA1C,EAAgDC,aAAhD,EAA+DC,IAA/D,QAA2E,IAA3E;AACA,OAAOC,cAAP,MAA2B,0BAA3B,C,CAAuD;;AACvD,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAEA;;;;AACA,MAAMC,iBAAiB,GAAGC,GAAG,IAAI;AAAA;;AAC/B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,IAAD,CAA5C,CAD+B,CAE/B;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,aAAa,GAAGH,GAAG,CAACI,OAA1B,CADc,CAEd;;AACA,UAAMC,cAAc,GAAI,IAAIR,cAAJ,CAAoBS,OAAD,IAAa;AACtD;AACAA,MAAAA,OAAO,CAACC,OAAR,CAAgBC,KAAK,IAAI;AACvBN,QAAAA,aAAa,CAACM,KAAK,CAACC,WAAP,CAAb;AACD,OAFD;AAGD,KALuB,CAAxB;AAMAJ,IAAAA,cAAc,CAACK,OAAf,CAAuBP,aAAvB,EATc,CAUd;;AACA,WAAO,MAAM;AACXE,MAAAA,cAAc,CAACM,SAAf,CAAyBR,aAAzB;AACD,KAFD;AAGD,GAdQ,EAcN,EAdM,CAAT;AAeA,SAAOF,UAAP;AACD,CAnBD;;GAAMF,iB;;AAqBN,SAASa,GAAT,GAAe;AAAA;;AAEb;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB1B,QAAQ,CAACU,IAAD,CAAhC;AAEA,QAAMiB,MAAM,GAAG,CAAf,CALa,CAMb;;AACA,QAAMC,MAAM,GAAG1B,MAAM,EAArB,CAPa,CAQb;;AACA,QAAM2B,UAAU,GAAG3B,MAAM,EAAzB;AACA,QAAMW,UAAU,GAAGF,iBAAiB,CAACkB,UAAD,CAApC,CAVa,CAYb;AACA;AACA;AAEA;;AACA5B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM6B,UAAU,GAAG3B,MAAM,CAACyB,MAAM,CAACZ,OAAR,CAAzB,CADc,CAC6B;AAC3C;;AACA,QAAI,CAACH,UAAL,EAAiB,OAHH,CAKd;AACA;;AACA,UAAMkB,MAAM,GAAG3B,WAAW,GACvB4B,MADY,CACL,CAAC,CAAD,EAAI,EAAJ,CADK,EACI;AADJ,KAEZC,KAFY,CAEN,CAAC,CAAD,EAAIpB,UAAU,CAACqB,KAAf,CAFM,CAAf;AAGA,UAAMC,MAAM,GAAG/B,WAAW,GACvB4B,MADY,CACL,CAAC,CAAD,EAAG,EAAH,CADK,EACG;AADH,KAEZC,KAFY,CAEN,CAAC,CAAD,EAAIpB,UAAU,CAACuB,MAAf,CAFM,CAAf;AAGA,UAAMC,aAAa,GAAGjC,WAAW,GAC9B6B,KADmB,CACb,CAAC,CAAD,EAAIpB,UAAU,CAACuB,MAAf,CADa,EAEnBJ,MAFmB,CAEZ,CAAC,CAAD,EAAG,EAAH,CAFY,CAAtB,CAbc,CAeI;AAElB;;AACA,UAAMM,KAAK,GAAGjC,UAAU,CAAC0B,MAAD,CAAxB;AAEAD,IAAAA,UAAU,CACP3B,MADH,CACU,SADV,EAEGoC,KAFH,CAES,WAFT,EAEuB,cAAa1B,UAAU,CAACuB,MAAO,KAFtD,EAGGI,IAHH,CAGQF,KAHR,EApBc,CAuBE;AAEhB;;AACA,UAAMG,OAAO,GAAGjC,IAAI,GACjBkC,EADa,CACV,MADU,EACFC,CAAC,IAAI;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,CAAd;AACA,YAAMC,OAAO,GAAG,CAAC,GAAGtB,IAAJ,CAAhB,CAFe,CAEY;AAC3B;;AACAsB,MAAAA,OAAO,CAACJ,CAAC,CAACK,OAAF,CAAUC,EAAX,CAAP,CAAsBH,CAAtB,GAA0BH,CAAC,CAACG,CAA5B;AACAC,MAAAA,OAAO,CAACJ,CAAC,CAACK,OAAF,CAAUC,EAAX,CAAP,CAAsBC,CAAtB,IAA2BP,CAAC,CAACQ,EAA7B;AACAzB,MAAAA,OAAO,CAACqB,OAAD,CAAP;AACD,KARa,CAAhB,CA1Bc,CAoCd;;AACAjB,IAAAA,UAAU,CACPsB,SADH,CACa,QADb,EAEG3B,IAFH,CAEQA,IAFR,EAGG4B,IAHH,CAGQ,QAHR,EAIGC,IAJH,CAIQ,GAJR,EAIa3B,MAJb,EAKGa,IALH,CAKQC,OALR,EAMGa,IANH,CAMQ,IANR,EAMcC,CAAC,IAAIA,CAAC,CAACT,CANrB,EAOGQ,IAPH,CAOQ,IAPR,EAOcC,CAAC,IAAIpB,MAAM,CAACoB,CAAC,CAACL,CAAH,CAPzB,EArCc,CA8Cd;;AACA,UAAMM,MAAM,GAAGlD,IAAI,GAClBwC,CADc,CACZS,CAAC,IAAIA,CAAC,CAACT,CADK,EAEdI,CAFc,CAEZK,CAAC,IAAIpB,MAAM,CAACoB,CAAC,CAACL,CAAH,CAFC,EAGdO,KAHc,CAGRlD,aAHQ,CAAf;AAKAuB,IAAAA,UAAU,CACTsB,SADD,CACW,OADX,EACoB;AADpB,KAEC3B,IAFD,CAEM,CAACA,IAAD,CAFN,EAEc;AAFd,KAGC4B,IAHD,CAGM,MAHN,EAICC,IAJD,CAIM,OAJN,EAIe,MAJf,EAKCA,IALD,CAKM,GALN,EAKWI,KAAK,IAAIF,MAAM,CAACE,KAAD,CAL1B,EAMCJ,IAND,CAMM,MANN,EAMc,MANd,EAOCA,IAPD,CAOM,QAPN,EAOgB,OAPhB;AASD,GA7DQ,EA6DN,CAAC7B,IAAD,EAAOZ,UAAP,CA7DM,CAAT;AA+DA,sBACE;AAAK,IAAA,GAAG,EAAEgB,UAAV;AAAA,2BACE;AAAK,MAAA,GAAG,EAAED,MAAV;AAAA,6BACE;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;IAvFQJ,G;UAUYb,iB;;;KAVZa,G;AAyFT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, axisBottom, line, curveCardinal, drag } from \"d3\";\nimport ResizeObserver from \"resize-observer-polyfill\"; //otherwise breaks in safari and edge\nimport \"./App.css\";\nimport Data from \"./data.json\";\n\n//defines dom element for resize observer to watch\nconst useResizeObserver = ref => {\n  const [dimensions, setDimensions] = useState(null);\n  //only access reference (aka the svg) when it's rendered\n  useEffect(() => {\n    const observeTarget = ref.current;\n    //create new resize observer w callback that takes resize target as args\n    const resizeObserver =  new ResizeObserver((entries) => {\n      //contentRect is the part ResizeObserver returns that has xy dimensions\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    //cleanup function when unmount\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, []);\n  return dimensions;\n}\n\nfunction App() {\n\n  //data is initially set to imported json array Data\n  const [data, setData] = useState(Data);\n\n  const radius = 6;\n  //reference object to pass to svg in React Dom\n  const svgRef = useRef();\n  //svg wrapped in div bc otherwise resize observer callback won't work\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  // const { width, height } =\n  //   dimensions || wrapperRef.current.getBoundingClientRect();\n  //\n\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n  useEffect(() => {\n    const svgContent = select(svgRef.current); //svgContent is current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n    if (!dimensions) return;\n\n    //---scales---//\n    //scaleLinear takes domain (data values) & maps onto range (pixel values)\n    const xScale = scaleLinear()\n      .domain([0, 60]) //todo\n      .range([0, dimensions.width]);\n    const yScale = scaleLinear()\n      .domain([0,60]) //todo\n      .range([0, dimensions.height]);\n    const xScaleInverse = scaleLinear()\n      .range([0, dimensions.height])\n      .domain([0,60]);//todo\n\n    //---draw x axis---//\n    const xAxis = axisBottom(xScale);\n\n    svgContent\n      .select(\".x-axis\")\n      .style(\"transform\", `translateY(${dimensions.height}px)`)\n      .call(xAxis); //replace class \"x-axis\" w xAxis\n\n    //--draggable--//\n    const dragged = drag()\n      .on(\"drag\", e => {\n        console.log(e.x);\n        const newData = [...data]; //always make a copy when updating array\n        //find array element in newData (id = index) and set new x y coordinates\n        newData[e.subject.id].x = e.x;\n        newData[e.subject.id].y += e.dy;\n        setData(newData);\n      });\n\n    //---draw points---//\n    svgContent\n      .selectAll(\"circle\")\n      .data(data)\n      .join(\"circle\")\n      .attr(\"r\", radius)\n      .call(dragged)\n      .attr(\"cx\", d => d.x)\n      .attr(\"cy\", d => yScale(d.y));\n\n    //---draw line---//\n    const myLine = line()\n    .x(d => d.x)\n    .y(d => yScale(d.y))\n    .curve(curveCardinal);\n\n    svgContent\n    .selectAll(\".line\") //otherwise it selects x axis\n    .data([data]) //just draw 1 line for the whole array\n    .join(\"path\")\n    .attr(\"class\", \"line\")\n    .attr(\"d\", value => myLine(value))\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"black\");\n\n  }, [data, dimensions]);\n\n  return (\n    <div ref={wrapperRef}>\n      <svg ref={svgRef}>\n        <g className=\"x-axis\" />\n      </svg>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}