{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./App.css\";\nimport Data from \"./data.json\";\nimport Graphic from \"./components/Graphic\";\nimport NewPointForm from \"./components/NewPointForm\"; // class NewPointForm extends React.Component {\n//   //controlled component, meaning React is the \"single source of truth\"\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       label: '',\n//       xValue: '',\n//       yValue: '',\n//       color: '',\n//       endPoint: false,\n//       targets: '',\n//       lineColor: ''\n//     };\n//\n//     this.handleChange = this.handleChange.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n//\n//   handleChange(e) {\n//     //if it's a checkbox, evaluate if checked. otherwise, evaluate the value\n//     const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;;\n//     const name = e.target.name;\n//\n//     this.setState({\n//       [name]: value\n//     });\n//   }\n//\n//   handleSubmit(e) {\n//     const nodes = this.props.nodes;\n//\n//     const tempx = parseFloat(e.target.xValue.value);\n//     //if y pos specified, convert to float. otherwise, return null\n//     const tempy = e.target.yValue.value ? parseFloat(e.target.yValue.value) : null;\n//\n//     //error handling. btw, isNan(null) === false\n//     if (isNaN(tempx) && isNaN(tempy)) {\n//       alert(\"Make sure Time and y Position are numbers!\");\n//     } else if (isNaN(tempx)) {\n//       alert(\"Make sure Time is a number!\");\n//     } else if (isNaN(tempy)) {\n//       alert(\"Make sure y Position is a number!\");\n//     } else {\n//       //send to server\n//       const node = {\n//         \"id\": nodes.length, //todo\n//         \"name\": e.target.label.value,\n//         \"x\":tempx,\n//         \"y\": e.target.yValue.value ? tempy : nodes[nodes.length-1].y,\n//         ...(e.target.color.value && {\"color\": e.target.color.value}),\n//         ...(\n//             !this.state.endPoint ?\n//             //if not an endpoint AND has specified IDs, turn IDs into array\n//             e.target.targets.value ? {\"target\": e.target.targets.value.split(',').map(Number)} : null //otherwise, return null\n//             : {\"target\": null} //if endpoint, return target: null\n//           ),\n//         ...((!this.state.endPoint && e.target.lineColor.value) && {\"lineColor\": e.target.lineColor.value})\n//       };\n//       const newNodes = [...nodes, node];\n//       console.log(newNodes);\n//     }\n//     e.preventDefault();\n//   }\n//\n//   render() {\n//     return (\n//       <form className=\"ui\" onSubmit={this.handleSubmit}>\n//         <label>\n//           Label<span className=\"red\">* </span>\n//           <input type=\"text\"\n//             name=\"label\"\n//             placeholder=\"any unicode characters\"\n//             value={this.state.label}\n//             onChange={this.handleChange}\n//             required\n//           />\n//         </label><br/>\n//         <label>\n//           Time<span className=\"red\">* </span>\n//           <input\n//             type=\"text\"\n//             name=\"xValue\"\n//             placeholder=\"numbers only\"\n//             value={this.state.xValue}\n//             onChange={this.handleChange}\n//             required\n//           />\n//         </label><br/>\n//         <label>\n//           y Position\n//           <input\n//             type=\"text\"\n//             name=\"yValue\"\n//             placeholder=\"numbers only\"\n//             value={this.state.yValue}\n//             onChange={this.handleChange}\n//           />\n//         </label><br/>\n//         <label>\n//           Color\n//           <input\n//             type=\"text\"\n//             name=\"color\"\n//             placeholder=\"blue, #4DA6FF, etc.\"\n//             value={this.state.color}\n//             onChange={this.handleChange}\n//           />\n//         </label><br/>\n//         <label>\n//           End point?\n//           <input\n//             type=\"checkbox\"\n//             name=\"endPoint\"\n//             checked={this.state.endPoint}\n//             onChange={this.handleChange}\n//           />\n//         </label><br/>\n//         {!this.state.endPoint &&\n//           <>\n//             <label>\n//               Target(s)\n//               <input\n//                 type=\"text\"\n//                 name=\"targets\"\n//                 placeholder=\"point IDs ie: 4, 5\"\n//                 value={this.state.targets}\n//                 onChange={this.handleChange}\n//               />\n//             </label><br/>\n//             <label>\n//               Line Color\n//               <input\n//                 type=\"text\"\n//                 name=\"lineColor\"\n//                 placeholder=\"blue, #4DA6FF, etc.\"\n//                 value={this.state.lineColor}\n//                 onChange={this.handleChange}\n//               />\n//             </label><br/>\n//           </>\n//         }\n//         <br/>\n//         <input type=\"submit\" value=\"Submit\"/>\n//       </form>\n//     );\n//   }\n// }\n//iterates thru xy values in json data to find min and max values\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction findMinMax(data) {\n  var [minX, minY] = [Infinity, Infinity]; //assign values for multiple vars\n\n  var [maxX, maxY] = [-Infinity, -Infinity];\n  var tmpX, tmpY;\n\n  for (var i = data.length - 1; i >= 0; i--) {\n    tmpX = data[i].x;\n    tmpY = data[i].y;\n    if (tmpX < minX) minX = tmpX;\n    if (tmpX > maxX) maxX = tmpX;\n    if (tmpY < minY) minY = tmpY;\n    if (tmpY > maxY) maxY = tmpY;\n  }\n\n  return [minX, maxX, minY, maxY];\n}\n/*\n   process raw data in function that extract following arrays:\n   0: of all nodes excluding loose points\n   1: from 1, all links between nodes, {source, target, color}\n\n   Graphic component will be passed these for use in this way:\n   - [1] for drawing linkHorizontal\n   - Data.nodes for drawing cirlces and labels\n*/\n\n\nfunction generateLinks(data) {\n  // const nodes = []; //array of all nodes that are NOT detached\n  const links = []; //array of all node links\n  /// IMPORTANT: all ending nodes must be marked w target:null ///\n\n  data.forEach((item, i) => {\n    if (item.target !== null) {\n      //detached points are defined w target: null as opposed to being undefined\n      // nodes.push(item);\n      if (item.target) {\n        //for nodes w multiple targets, create link for each target\n        item.target.forEach(n => {\n          links.push({\n            source: item,\n            target: data[n],\n            color: item.lineColor\n          });\n        });\n      } else {\n        links.push({\n          source: item,\n          target: data[i + 1],\n          color: item.lineColor\n        });\n      }\n\n      ;\n    }\n  });\n  return links;\n}\n\n;\n\nfunction App() {\n  _s();\n\n  //user defined\n  const radius = 5;\n  const fontSize = 20; //initially set to imported ChronoJSON\n\n  var [src, setSrc] = useState(Data);\n  /*\n  TODO:\n  - make a copy of imported data\n  - put generateLinks() and findMinMax into a useEffect hook\n  */\n\n  const data = {\n    nodes: src.nodes,\n    links: generateLinks(src.nodes),\n    imgs: src.imgs\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Graphic, {\n      src: data,\n      minMax: findMinMax(src.nodes),\n      radius: radius,\n      fontSize: fontSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewPointForm, {\n      nodes: src.nodes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"H30rYC+5qCYZWNTKEH0Drzdz/po=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/App.js"],"names":["React","useState","Data","Graphic","NewPointForm","findMinMax","data","minX","minY","Infinity","maxX","maxY","tmpX","tmpY","i","length","x","y","generateLinks","links","forEach","item","target","n","push","source","color","lineColor","App","radius","fontSize","src","setSrc","nodes","imgs"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport \"./App.css\";\nimport Data from \"./data.json\";\nimport Graphic from \"./components/Graphic\";\nimport NewPointForm from \"./components/NewPointForm\";\n\n// class NewPointForm extends React.Component {\n//   //controlled component, meaning React is the \"single source of truth\"\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       label: '',\n//       xValue: '',\n//       yValue: '',\n//       color: '',\n//       endPoint: false,\n//       targets: '',\n//       lineColor: ''\n//     };\n//\n//     this.handleChange = this.handleChange.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n//\n//   handleChange(e) {\n//     //if it's a checkbox, evaluate if checked. otherwise, evaluate the value\n//     const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;;\n//     const name = e.target.name;\n//\n//     this.setState({\n//       [name]: value\n//     });\n//   }\n//\n//   handleSubmit(e) {\n//     const nodes = this.props.nodes;\n//\n//     const tempx = parseFloat(e.target.xValue.value);\n//     //if y pos specified, convert to float. otherwise, return null\n//     const tempy = e.target.yValue.value ? parseFloat(e.target.yValue.value) : null;\n//\n//     //error handling. btw, isNan(null) === false\n//     if (isNaN(tempx) && isNaN(tempy)) {\n//       alert(\"Make sure Time and y Position are numbers!\");\n//     } else if (isNaN(tempx)) {\n//       alert(\"Make sure Time is a number!\");\n//     } else if (isNaN(tempy)) {\n//       alert(\"Make sure y Position is a number!\");\n//     } else {\n//       //send to server\n//       const node = {\n//         \"id\": nodes.length, //todo\n//         \"name\": e.target.label.value,\n//         \"x\":tempx,\n//         \"y\": e.target.yValue.value ? tempy : nodes[nodes.length-1].y,\n//         ...(e.target.color.value && {\"color\": e.target.color.value}),\n//         ...(\n//             !this.state.endPoint ?\n//             //if not an endpoint AND has specified IDs, turn IDs into array\n//             e.target.targets.value ? {\"target\": e.target.targets.value.split(',').map(Number)} : null //otherwise, return null\n//             : {\"target\": null} //if endpoint, return target: null\n//           ),\n//         ...((!this.state.endPoint && e.target.lineColor.value) && {\"lineColor\": e.target.lineColor.value})\n//       };\n//       const newNodes = [...nodes, node];\n//       console.log(newNodes);\n//     }\n//     e.preventDefault();\n//   }\n//\n//   render() {\n//     return (\n//       <form className=\"ui\" onSubmit={this.handleSubmit}>\n//         <label>\n//           Label<span className=\"red\">* </span>\n//           <input type=\"text\"\n//             name=\"label\"\n//             placeholder=\"any unicode characters\"\n//             value={this.state.label}\n//             onChange={this.handleChange}\n//             required\n//           />\n//         </label><br/>\n//         <label>\n//           Time<span className=\"red\">* </span>\n//           <input\n//             type=\"text\"\n//             name=\"xValue\"\n//             placeholder=\"numbers only\"\n//             value={this.state.xValue}\n//             onChange={this.handleChange}\n//             required\n//           />\n//         </label><br/>\n//         <label>\n//           y Position\n//           <input\n//             type=\"text\"\n//             name=\"yValue\"\n//             placeholder=\"numbers only\"\n//             value={this.state.yValue}\n//             onChange={this.handleChange}\n//           />\n//         </label><br/>\n//         <label>\n//           Color\n//           <input\n//             type=\"text\"\n//             name=\"color\"\n//             placeholder=\"blue, #4DA6FF, etc.\"\n//             value={this.state.color}\n//             onChange={this.handleChange}\n//           />\n//         </label><br/>\n//         <label>\n//           End point?\n//           <input\n//             type=\"checkbox\"\n//             name=\"endPoint\"\n//             checked={this.state.endPoint}\n//             onChange={this.handleChange}\n//           />\n//         </label><br/>\n//         {!this.state.endPoint &&\n//           <>\n//             <label>\n//               Target(s)\n//               <input\n//                 type=\"text\"\n//                 name=\"targets\"\n//                 placeholder=\"point IDs ie: 4, 5\"\n//                 value={this.state.targets}\n//                 onChange={this.handleChange}\n//               />\n//             </label><br/>\n//             <label>\n//               Line Color\n//               <input\n//                 type=\"text\"\n//                 name=\"lineColor\"\n//                 placeholder=\"blue, #4DA6FF, etc.\"\n//                 value={this.state.lineColor}\n//                 onChange={this.handleChange}\n//               />\n//             </label><br/>\n//           </>\n//         }\n//         <br/>\n//         <input type=\"submit\" value=\"Submit\"/>\n//       </form>\n//     );\n//   }\n// }\n\n//iterates thru xy values in json data to find min and max values\nfunction findMinMax(data) {\n  var [minX, minY] = [Infinity, Infinity]; //assign values for multiple vars\n  var [maxX, maxY] = [-Infinity, -Infinity];\n  var tmpX, tmpY;\n\n  for (var i = data.length-1; i>=0; i--) {\n    tmpX = data[i].x;\n    tmpY = data[i].y;\n    if (tmpX < minX) minX = tmpX;\n    if (tmpX > maxX) maxX = tmpX;\n    if (tmpY < minY) minY = tmpY;\n    if (tmpY > maxY) maxY = tmpY;\n  }\n  return(\n    [minX, maxX, minY, maxY]\n  );\n}\n\n/*\n   process raw data in function that extract following arrays:\n   0: of all nodes excluding loose points\n   1: from 1, all links between nodes, {source, target, color}\n\n   Graphic component will be passed these for use in this way:\n   - [1] for drawing linkHorizontal\n   - Data.nodes for drawing cirlces and labels\n*/\nfunction generateLinks(data) {\n  // const nodes = []; //array of all nodes that are NOT detached\n  const links = []; //array of all node links\n\n  /// IMPORTANT: all ending nodes must be marked w target:null ///\n\n  data.forEach((item, i) => {\n    if (item.target !== null) { //detached points are defined w target: null as opposed to being undefined\n      // nodes.push(item);\n      if (item.target) { //for nodes w multiple targets, create link for each target\n        item.target.forEach((n) => {\n          links.push({source:item, target:data[n], color:item.lineColor});\n        });\n      } else {\n        links.push({source:item, target:data[i+1], color:item.lineColor})\n      };\n    }\n  });\n\n  return links;\n};\n\nfunction App() {\n\n  //user defined\n  const radius = 5;\n  const fontSize = 20;\n\n  //initially set to imported ChronoJSON\n  var [src, setSrc] = useState(Data);\n\n  /*\n  TODO:\n  - make a copy of imported data\n  - put generateLinks() and findMinMax into a useEffect hook\n  */\n  const data = {nodes: src.nodes, links:generateLinks(src.nodes), imgs:src.imgs};\n\n  return (\n    <>\n      <Graphic src={data} minMax = {findMinMax(src.nodes)} radius={radius} fontSize={fontSize}/>\n      <NewPointForm nodes={src.nodes}/>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}