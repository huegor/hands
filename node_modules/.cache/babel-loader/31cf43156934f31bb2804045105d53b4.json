{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/NewIntervalForm.js\";\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NewIntervalForm(props) {\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\n      - error handling: check if target[0] and target[1] exists\n      - find instant w/ id of target[0] and:\n        - If target[1] is:\n          - instant, target[1].id\n          - interval, {\"x\": target.x-source.x, \"y\": mouse pointer, \"scale\":\"smalls\"}\n          - zone, {\"x\": 1622, \"y\": 12, \"scale\":\"smalls\"}\n    */\n\n    if (!props.target[0] || !props.target[0]) {\n      console.log(\"error\");\n      return;\n    }\n\n    const newInstants = [...props.data];\n    const instant = newInstants.find(n => n.id === props.target[0].id);\n\n    if (props.target[1].x) {\n      //for interval and zone\n      const target = props.target[1];\n      instant.connections = [{\n        \"x\": target.x,\n        \"y\": target.y,\n        \"scale\": target.scale\n      }, 0];\n    } else {\n      //for instants\n      const instant2 = newInstants.find(n => n.id === props.target[1].id);\n      instant.connections = [instant2.id, 0];\n      instant2.connections = [instant.id, 1];\n    } //\n    // if (props.target.start) { //zone\n    //   const newzones = [...props.zones];\n    //   const zone = newzones.find(n => n.id === props.target.id);\n    //   zone.importance = parseFloat(input);\n    //   props.setZones(newZones);\n    //   return;\n    // }\n    //\n    //\n    // if (props.target.source) { //link\n    //   const instant = newInstants.find(n => n.id === props.target.source.id);\n    //   instant.intervalWidth = instant.intervalWidth ? instant.intervalWidth*(1+input/2) : props.radius/3*(1+input/2); //if intervalWidth defined, multiply. otherwise, use default\n    // } else { //instant\n    //   const instant = newInstants.find(n => n.id === props.target.id);\n    //   instant.radius = instant.radius ? instant.radius*(1+input/2) : props.radius*(1+input/2); //if radius defined, multiply. otherwise, use default radius\n    // }\n\n\n    props.setData(newInstants);\n  };\n\n  const handleClose = e => {\n    props.setToggle(null);\n    e.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"ui absolute center\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"right\",\n      onClick: handleClose,\n      children: \"x\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 65\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Start:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Time\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"redText\",\n          children: \"* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"xValue1\",\n          placeholder: \"numbers only\",\n          value: this.state.xValue,\n          onChange: this.handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"y Position\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"yValue1\",\n          placeholder: \"#s only (default 0)\",\n          value: this.state.yValue,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), props.target[0] ? `${props.target[0].name}(${props.target[0].id})` : \"None\", \" \", !props.target[2] && \"<\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 109\n      }, this), \"End:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Time\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"redText\",\n          children: \"* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"xValue2\",\n          placeholder: \"numbers only\",\n          value: this.state.xValue,\n          onChange: this.handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"y Position\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"yValue2\",\n          placeholder: \"#s only (default 0)\",\n          value: this.state.yValue,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), props.target[1] ? `${props.target[1].name}(${props.target[1].id})` : \"None\", \" \", props.target[2] === 1 && \"<\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_c = NewIntervalForm;\nexport default NewIntervalForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewIntervalForm\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/NewIntervalForm.js"],"names":["React","useState","NewIntervalForm","props","handleSubmit","e","preventDefault","target","console","log","newInstants","data","instant","find","n","id","x","connections","y","scale","instant2","setData","handleClose","setToggle","state","xValue","handleChange","yValue","name"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nfunction NewIntervalForm(props) {\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    /*\n      - error handling: check if target[0] and target[1] exists\n      - find instant w/ id of target[0] and:\n        - If target[1] is:\n          - instant, target[1].id\n          - interval, {\"x\": target.x-source.x, \"y\": mouse pointer, \"scale\":\"smalls\"}\n          - zone, {\"x\": 1622, \"y\": 12, \"scale\":\"smalls\"}\n    */\n\n    if (!props.target[0] || !props.target[0]) {\n      console.log(\"error\")\n      return;\n    }\n\n    const newInstants = [...props.data];\n    const instant = newInstants.find(n => n.id === props.target[0].id);\n    if (props.target[1].x) { //for interval and zone\n      const target = props.target[1]\n      instant.connections = [{\"x\": target.x, \"y\": target.y, \"scale\": target.scale}, 0]\n    } else { //for instants\n      const instant2 = newInstants.find(n => n.id === props.target[1].id);\n      instant.connections = [instant2.id, 0];\n      instant2.connections = [instant.id, 1];\n    }\n    //\n    // if (props.target.start) { //zone\n    //   const newzones = [...props.zones];\n    //   const zone = newzones.find(n => n.id === props.target.id);\n    //   zone.importance = parseFloat(input);\n    //   props.setZones(newZones);\n    //   return;\n    // }\n    //\n\n    //\n    // if (props.target.source) { //link\n    //   const instant = newInstants.find(n => n.id === props.target.source.id);\n    //   instant.intervalWidth = instant.intervalWidth ? instant.intervalWidth*(1+input/2) : props.radius/3*(1+input/2); //if intervalWidth defined, multiply. otherwise, use default\n    // } else { //instant\n    //   const instant = newInstants.find(n => n.id === props.target.id);\n    //   instant.radius = instant.radius ? instant.radius*(1+input/2) : props.radius*(1+input/2); //if radius defined, multiply. otherwise, use default radius\n    // }\n    props.setData(newInstants);\n\n\n  };\n\n  const handleClose = (e) => {\n    props.setToggle(null);\n    e.preventDefault();\n  }\n\n  return (\n    <form className=\"ui absolute center\" onSubmit={handleSubmit}>\n      <button className=\"right\" onClick={handleClose}>x</button><br/>\n      <p>\n        <b>Start:</b><br/>\n        <label>\n          Time<span className=\"redText\">* </span>\n          <input\n            type=\"number\"\n            name=\"xValue1\"\n            placeholder=\"numbers only\"\n            value={this.state.xValue}\n            onChange={this.handleChange}\n            required\n          />\n        </label><br/>\n        <label>\n          y Position\n          <input\n            type=\"number\"\n            name=\"yValue1\"\n            placeholder=\"#s only (default 0)\"\n            value={this.state.yValue}\n            onChange={this.handleChange}\n          />\n        </label><br/>\n        {props.target[0]?`${props.target[0].name}(${props.target[0].id})`: \"None\"} {!props.target[2] && \"<\"}<br/>\n        End:<br/>\n        <label>\n          Time<span className=\"redText\">* </span>\n          <input\n            type=\"number\"\n            name=\"xValue2\"\n            placeholder=\"numbers only\"\n            value={this.state.xValue}\n            onChange={this.handleChange}\n            required\n          />\n        </label><br/>\n        <label>\n          y Position\n          <input\n            type=\"number\"\n            name=\"yValue2\"\n            placeholder=\"#s only (default 0)\"\n            value={this.state.yValue}\n            onChange={this.handleChange}\n          />\n        </label><br/>\n        {props.target[1]?`${props.target[1].name}(${props.target[1].id})`: \"None\"} {props.target[2]===1 && \"<\"}\n      </p>\n      <input type=\"submit\" value=\"Submit\"/>\n    </form>\n  )\n}\n\nexport default NewIntervalForm;\n"]},"metadata":{},"sourceType":"module"}