{"ast":null,"code":"var _jsxFileName = \"/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, scaleOrdinal, axisBottom, axisLeft, linkHorizontal, format, drag, zoom, min, max, symbol, symbols } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport generateIntervals from \"./generateIntervals\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Graphic({\n  data,\n  setData,\n  updateSrc,\n  activeLayer,\n  zones,\n  setZones,\n  radius,\n  info,\n  setInfo,\n  setInflectTarget,\n  showLabel,\n  toggle,\n  setToggle,\n  scales,\n  setScales,\n  syntacticOrder,\n  setSyntacticOrder,\n  activeScale\n}) {\n  _s();\n\n  //all data is passed down from and synced to App.js\n  const activeData = Object.entries(data); //convert json to array for faster processing\n\n  const activeZones = Object.entries(zones); //TODO: layers\n  // const activeData = activeLayer ? Object.entries(data).filter(([k,v]) => v.layer === activeLayer) : arrayData;\n  //convert scale object to array for faster processing\n  //is logical operators active?\n\n  const logic = data.length ? isNaN(data[0].x) : null; //TODO: refine logical operators\n  //initialize reference object to pass to svg in React Dom\n\n  const svgRef = useRef(); //svg wrapped in div bc otherwise resize observer callback won't work\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState(); //hash map of y scales\n\n  const yScales = {}; //init scales\n\n  useEffect(() => {\n    if (!dimensions) return;\n    const yTicks = [];\n\n    for (let v of activeData) {\n      yTicks.push(activeData.y);\n    }\n\n    Object.entries(scales.y).forEach(([k, v]) => {\n      yScales[k] = {\n        scale: scaleLinear().domain([0, dimensions.height]).range([v.min, v.max]),\n        drag: scaleLinear().domain([-dimensions.height, dimensions.height]).range([-(v.max - v.min), v.max - v.min]),\n        ticks: [...new Set(yTicks)]\n      };\n    });\n  }, [dimensions, scales, currentZoomState]); //initialize intervals between instants\n\n  const intervals = generateIntervals(data); //TODO: write updateIntervals function\n  //initialize variables\n\n  /*\n  var xMin = min(Object.entries(data).map(([key, {x}]) => logic ? logicScale(x) : x));\n  var xMax = max(Object.entries(data).map(([key, {x}]) => logic ? logicScale(x) : x));\n  var yMin = min(Object.entries(data).map(([key, {y}]) => y));\n  var yMax = max(Object.entries(data).map(([key, {y}]) => y));\n  */\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n\n    if (!dimensions) return; //removes svgs added using append()\n\n    svg.selectAll(\".remove\").remove(); //rounding for data inputted thru paintbox interface\n\n    function round(value, range) {\n      const precision = Math.log10(range) < 1 ? -Math.floor(Math.log10(range) - 1) : 0;\n      return Math.round(value * Math.pow(10, precision)) / Math.pow(10, precision);\n    } //---scales---//\n    //if time matches logical operator keyword, translate into index values, then map\n\n\n    const logicScale = scaleOrdinal([\"before\", \"now\", \"after\"], [-1, 0, 1]).unknown(0);\n    const breakpoint = 5;\n    const xMin = min(activeData.map(([key, {\n      x\n    }]) => logic ? logicScale(x) : x));\n    const xMax = max(activeData.map(([key, {\n      x\n    }]) => logic ? logicScale(x) : x)); // const yMin = min(Object.entries(data).map(([key, {y}]) => y));\n    // const yMax = max(Object.entries(data).map(([key, {y}]) => y));\n\n    const yTicks = activeData.map(([, {\n      y\n    }]) => y);\n    const yMin = scales.y[activeScale[1]].min;\n    const yMax = scales.y[activeScale[1]].max;\n    const rangeX = xMax - xMin; //0 is minX, 1 is maxX (reference findMinMax)\n\n    const rangeY = yMax - yMin;\n    /*\n    - Allow users to specify scale. x&y min max and units label\n    - for each scale, generateScale()\n    */\n    // function generateScales(currentScale) { //TODO: turn into dedicated scaleDrag\n    //\n    //   const xInverse = scaleLinear()\n    //     .domain([0, dimensions.width])\n    //     .range([currentScale.min, currentScale.max]) //maxRangeX-minRangeX gives section of x values displayed onscreen\n    //   const xDrag = scaleLinear()\n    //     .domain([-dimensions.width, dimensions.width])\n    //     .range([-(currentScale.domain()[1]-currentScale.domain()[0]), (currentScale.domain()[1]-currentScale.domain()[0])]) //maxRangeX-minRangeX gives section of x values displayed onscreen\n    //   const yInverse = scaleLinear()\n    //     .domain([-dimensions.height, dimensions.height])\n    //     .range((rangeY>breakpoint) ? [-rangeY, rangeY] : [-breakpoint*5, breakpoint*5])\n    //\n    //\n    //   return {\n    //     xInverse, xDrag, yInverse\n    //   };\n    // }\n\n    const xInverse = currentScale => scaleLinear().domain([0, dimensions.width]).range([currentScale.min, currentScale.max]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n\n\n    const xDrag = currentScale => scaleLinear().domain([-dimensions.width, dimensions.width]).range([-(currentScale.domain()[1] - currentScale.domain()[0]), currentScale.domain()[1] - currentScale.domain()[0]]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n    // const yInverse = scaleLinear()\n    //   .domain([-dimensions.height, dimensions.height])\n    //   .range((rangeY>breakpoint) ? [-rangeY, rangeY] : [-breakpoint*5, breakpoint*5])\n    //scales values to screen pixels\n\n    /*\n    {\n      biggie: {\n        ...\n        scale: generateScale()\n      }\n      ...\n    }\n    */\n\n    /*\n    xScale =\n    {\n    }\n    */\n    //TODO: fromEntries & entries not compatible with some older browsers\n\n\n    const xScales = Object.fromEntries( //for every scale in scales data, generate an xScale\n    Object.entries(scales.x).map(([key, thisScale]) => [key, {\n      scale: scaleLinear() //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n      .domain([thisScale.min, thisScale.max]).range([0, dimensions.width]),\n      hasSegments: thisScale.segments.length ? true : false,\n      hideLabel: thisScale.hideLabel,\n      yPos: thisScale.yPos,\n      label: `${key} (${thisScale.units})`,\n      tickValues: thisScale.tickValues ? thisScale.tickValues : null,\n      scaleInverse: scaleLinear() //for NewInstantForm\n      .domain([0, dimensions.width]).range([thisScale.min, thisScale.max])\n    }]));\n\n    const xSegments = () => {\n      const segments = [];\n      Object.keys(scales.x).forEach((key, i) => {\n        const thisScale = scales.x[key]; // const segments = [];\n\n        if (!thisScale.segments.length) {\n          return;\n        }\n\n        thisScale.segments.map(n => {\n          const min = n.min ? n.min : thisScale.min; //if segment contains a min, set that as min. otherwise, set scale min as min.\n\n          const max = n.max ? n.max : thisScale.max; // console.log(xScales[i].scale(min));\n\n          segments.push({\n            scale: key,\n            yPos: thisScale.yPos,\n            proportion: (max - min) / (thisScale.max - thisScale.min),\n            segment: scaleLinear().domain([min, max]).range([xScales[key].scale(min), xScales[key].scale(max)])\n          });\n        });\n      });\n      return segments;\n    };\n    /*\n      xScales(generateScales(scaleLinear(scale)))\n      - take xScale and rescale according to transformations (newXScale)\n      - update each array entry's domain with that of newXScale\n    */\n    //if there is a zoom transform, override each xScales.scale with adjusted scale\n\n\n    if (currentZoomState) {\n      Object.entries(xScales).forEach(([key, thisScale]) => {\n        const newXScale = currentZoomState.rescaleX(thisScale.scale); //zoom state comes w methods for transformations\n\n        const newMin = newXScale.domain()[0];\n        const newMax = newXScale.domain()[1]; //applies zoom transformations to scale + scaleInverse\n\n        xScales[key].scale = newXScale;\n      });\n    }\n\n    ; // const xScale = scaleLinear()\n    //   .domain([xMin, xMax]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n    //   .range([0, dimensions.width]);\n\n    const yScale = scaleLinear() //if difference in y vaules greater than 5, resize to min and max\n    // .domain((rangeY>breakpoint) ? [yMin, yMax] : [yMin-breakpoint, yMax+breakpoint])\n    .domain([yMin, yMax]).range([dimensions.height, 0]); //inverse scales for drag behavior\n    // const xScaleInverse = scaleLinear()\n    //   .domain([-dimensions.width, dimensions.width])\n    //   .range([-rangeX, rangeX]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n\n    const yScaleInverse = scaleLinear().domain([0, dimensions.height]).range([yMin, yMax]); // .range((rangeY>breakpoint) ? [yMin, yMax] : [yMin-breakpoint, yMax+breakpoint]);\n\n    const yScaleInverseDrag = scaleLinear().domain([dimensions.height, -dimensions.height]).range([-rangeY, rangeY]); // .range((rangeY>breakpoint) ? [-rangeY, rangeY] : [-breakpoint*5, breakpoint*5]);\n    //---draw zones---//\n\n    if (activeZones.length) {\n      svg.selectAll(\".zones\").data(activeZones).join(\"rect\").attr(\"class\", \"zones\").attr(\"x\", ([, v]) => xScales[v.scale[0]].scale(v.start)) // .attr(\"x\", n => generateScales(scales[n.scale]).x(n.start))\n      // .attr(\"y\", n => n.yStart ? yScale(n.yStart) : yScale(minMax[2]))\n      .attr(\"y\", ([, v]) => v.yStart ? yScale(v.yStart) : yMin - 10) //TODO: if no yStart, minimum y value\n      .attr(\"width\", ([, v]) => xScales[v.scale[0]].scale(v.end) - xScales[v.scale[0]].scale(v.start)).attr(\"height\", ([, v]) => {\n        if (v.yStart & v.yEnd) {\n          return yScale(v.yStart) - yScale(v.yEnd);\n        } else if (v.yStart) {\n          return yScale(v.yStart) - yScale(yMax - 10);\n        } else {\n          return yScale(yMax - 10); //TODO: if no yStart, minimum y value\n          // return (yScale(minMax[3])-yScale(minMax[2]))\n        }\n      }).attr(\"opacity\", ([k, v]) => v.opacity ? v.opacity : 0.5).attr(\"fill\", ([k, v]) => v.color ? v.color : \"#999\").attr(\"stroke\", \"black\") //TODO: stroke be different colors\n      .attr(\"stroke-width\", ([k, v]) => v.importance ? v.importance * 2 : 0).on(\"click\", (e, target) => {\n        if (toggle === \"certainty\" || toggle === \"importance\") {\n          //pulls up inflection menu\n          setInflectTarget(target);\n        } else {\n          //displays zone properties when clicked\n          setInfo(null); //clear InfoBox\n\n          setInfo({\n            position: [e.x, e.y],\n            target: target,\n            type: \"zone\"\n          }); //TODO: set info to null when clicking same zone again\n        }\n\n        e.stopPropagation();\n      });\n    } //---draw bottom axis---//\n\n\n    xSegments().forEach(n => {\n      //TODO: push all the axis ticks() values into an array\n      // [...new Set(segments)]\n      //draw from there\n      const segment = axisBottom(n.segment) // .ticks(n.proportion<.33?5:null, \"f\");\n      .ticks(null, \"f\").tickSize(-dimensions.height); //TODO\n\n      svg.append(\"g\").attr(\"class\", \"remove\").style(\"transform\", `translateY(${dimensions.height * n.yPos}px)`).call(segment).raise().call(g => g.select(\".domain\") //removes solid black axis bar\n      .remove()).call(g => g.selectAll(\".tick line\") //styles individual ticks\n      .attr(\"stroke-opacity\", 0.25)).call(g => g.selectAll(\".tick text\").attr(\"y\", 10).attr(\"opacity\", (d, i) => {\n        //TODO: remove instead of setting opacity to 0\n        if (n.proportion < .25 && i % 3) {\n          //less than 1/4, label every 3 ticks\n          return 0;\n        } else if (n.proportion < .33 && i % 2) {\n          //less than 1/3, label every other tick\n          return 0;\n        } else {\n          return 0.5;\n        }\n      }));\n    });\n    Object.entries(xScales).forEach(([key, thisScale]) => {\n      const xAxis = axisBottom(thisScale.scale).tickValues(thisScale.scale.ticks().concat(scales.x[key].min, scales.x[key].max)) //pass in autogenerated tick values + min and max values\n      .tickFormat(format('')).tickSize(-dimensions.height); // console.log(thisScale.scale.ticks())\n\n      if (!thisScale.hasSegments) {\n        svg.append(\"g\").attr(\"class\", \"remove\").style(\"transform\", `translateY(${dimensions.height * thisScale.yPos}px)`).call(xAxis).raise().call(g => g.select(\".domain\") //removes solid black axis bar\n        .remove()).call(g => g.selectAll(\".tick line\") //styles individual ticks\n        .attr(\"stroke-opacity\", 0.25)).call(g => g.selectAll(\".tick text\").attr(\"y\", 10) //TODO: dynamic tick text spacing for accessibility\n        .attr(\"opacity\", 0.5));\n      }\n\n      if (!thisScale.hideUnits) {\n        svg.append(\"text\").text(thisScale.label).attr(\"class\", \"axisLabel smallTxt remove\").attr(\"x\", dimensions.width / 2).attr(\"y\", dimensions.height * (thisScale.yPos + .07)).attr(\"text-anchor\", \"middle\").attr(\"opacity\", 0.5);\n      }\n    }); //--draw vertical axis--//\n\n    const yAxis = axisLeft(yScale).tickValues([...new Set(yTicks), scales.y[activeScale[1]].min, scales.y[activeScale[1]].max]) //reg mode\n    .tickFormat(format(''));\n    svg.append(\"g\").attr(\"class\", \"remove\") // .style(\"transform\", `translateY(${dimensions.height*thisScale.yPos}px)`)\n    .call(yAxis).raise().call(g => g.select(\".domain\") //removes solid black axis bar\n    .remove()).call(g => g.selectAll(\".tick line\") //styles individual ticks\n    .attr(\"stroke-opacity\", 0.5)).call(g => g.selectAll(\".tick text\").attr(\"y\", 10) //TODO: dynamic tick text spacing for accessibility\n    .attr(\"opacity\", 0.5));\n\n    if (!scales.y[activeScale[1]].hideLabels) {\n      svg.append(\"text\").text(`${activeScale[1]} (${scales.y[activeScale[1]].units})`).attr(\"class\", \"axisLabel smallTxt remove\") // .attr(\"x\", dimensions.width/2)\n      // .attr(\"y\", dimensions.height/2)\n      .attr(\"text-anchor\", \"middle\").attr(\"transform\", `translate(-30,${dimensions.height / 2})rotate(-90)`).attr(\"opacity\", 0.5);\n    } //--drag behavior--//\n\n\n    const dragged = drag() // .on(\"start\", e => {\n    //   select(this).attr(\"stroke\", \"black\");\n    // })\n    .on(\"drag\", e => {\n      //TODO: extract precision function to round new pos\n      const dx = xDrag(xScales[e.subject[1].scale[0]].scale)(e.dx); // const dx = xScales.scaleInverse\n\n      const dy = yScaleInverseDrag(e.dy);\n      const newInstants = { ...data\n      }; //always make a copy when updating array\n      //find array element in data with matching ID and set new x y coordinates\n\n      newInstants[e.subject[0]].x += dx;\n      newInstants[e.subject[0]].y += dy;\n      setData(newInstants);\n    }); //TODO: unify onEnd and onClick\n    // .on(\"end\", e => {\n    //   updateSrc(data);\n    // });\n\n    if (Object.entries(data).length) {\n      //---draw intervals---//\n      const intervaler = linkHorizontal().source(interval => interval.source[1]).target(interval => interval.target[1]) // .x(n => generateScales(scales[n.scale]).x(logic ? logicScale(n.x) : n.x))\n      .x(d => xScales[d.scale[0]].scale(d.x)).y(d => yScale(d.y));\n      svg.selectAll(\".interval\").data(intervals).join(\"path\").raise().attr(\"class\", \"interval pointer\").attr(\"d\", intervaler).attr(\"fill\", \"none\").attr(\"stroke\", n => n.color ? n.color : \"black\").attr(\"stroke-width\", n => n.width ? n.width : radius).attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1).attr(\"stroke-dasharray\", n => n.dashed ? n.dashed : null).on(\"click\", (e, target) => {\n        if (toggle === \"connection\") {\n          const newOrder = [...syntacticOrder];\n\n          if (newOrder[2] === 0) {\n            //set 2nd selection\n            newOrder[1] = {\n              x: xInverse(scales.x[activeScale[0]])(e.layerX),\n              y: yScaleInverse(e.layerY),\n              scale: activeScale\n            }; //scale TODO\n\n            newOrder[2] = 1;\n          } else {\n            //set 1st selection\n            newOrder[0] = {\n              x: xInverse(scales.x[activeScale[0]])(e.layerX),\n              y: yScaleInverse(e.layerY),\n              scale: activeScale\n            };\n            newOrder[2] = 0;\n          }\n\n          setSyntacticOrder(newOrder);\n        } //else if (toggle===\"foreshadowing\") {\n        //   if (!target.target) { //if target is an endpoint, indeterminate end\n        //\n        //\n        //   } else { //otherwise, change mouse to no symbol\n        //\n        //   }\n        //   //option to adjust gradient eventually\n        // } else\n        else if (toggle === \"certainty\" || toggle === \"importance\") {\n            setInflectTarget(target);\n          } else {\n            setInfo(null); //clear InfoBox\n\n            setInfo({\n              position: [e.x, e.y],\n              target: target,\n              type: \"interval\"\n            }); //displays interval properties when clicked\n          }\n\n        e.stopPropagation();\n      }); //---draw instants---//\n\n      svg.selectAll(\".instant\") // .data(activeData.filter(d => !d.foreshadowing && !d.cancelled))\n      .data(activeData).join(\"circle\").raise().attr(\"class\", \"instant pointer\").attr(\"r\", ([, v]) => v.radius ? v.radius : radius) //TODO: custom radius accessibility\n      .attr(\"fill\", ([, v]) => v.color ? v.color : \"black\") //if it has a color other than black, use that\n      .attr(\"opacity\", ([, v]) => v.opacity ? v.opacity : 1) // .attr(\"cx\", d => generateScales(scales[d.scale]).x(logic ? logicScale(d.x) : d.x))\n      .attr(\"cx\", ([, v]) => xScales[v.scale[0]].scale(v.x)) //scale x coordinate based on xScale defined in instant's scale property\n      .attr(\"cy\", ([, v]) => yScale(v.y)).call(dragged).on(\"click\", (e, target) => {\n        switch (toggle) {\n          case \"cancelled\":\n            const newData = { ...data\n            };\n            newData[target[0]].cancelled = true; // console.log(newData[target[0]]);\n\n            updateSrc(newData);\n            break;\n\n          case \"connection\":\n            const newOrder = [...syntacticOrder];\n\n            if (newOrder[2] === 0) {\n              //set 2nd selection\n              newOrder[1] = target;\n              newOrder[2] = 1;\n            } else {\n              //set 1st selection\n              newOrder[0] = target;\n              newOrder[2] = 0;\n            }\n\n            setSyntacticOrder(newOrder);\n            break;\n\n          case \"foreshadowing\":\n            if (!target.target) {\n              //if target is an endpoint, indeterminate end\n              const newInstants = [...data];\n              const instant = newInstants.find(n => n.id === target.id);\n              instant.foreshadowing = true;\n              setData(newInstants);\n            } else {\n              //otherwise, change mouse to no symbol\n              console.log(\"forbidden\");\n            }\n\n            break;\n\n          case \"certainty\":\n            setInflectTarget(target);\n            break;\n\n          case \"importance\":\n            setInflectTarget(target);\n            break;\n\n          default:\n            setInfo(null); //clear InfoBox\n\n            setInfo({\n              position: [e.x, e.y],\n              target: target\n            });\n          //displays instant properties when clicked\n        } // if (toggle===\"cancelled\") {\n        //   const newInstants = [...data];\n        //   const instant = newInstants.find(n => n.id === target.id);\n        //   instant.cancelled = true;\n        //   setData(newInstants);\n        // } else if (){\n        //\n        // } else if (toggle===\"connection\") {\n        //   const newOrder = [...syntacticOrder];\n        //   if (newOrder[2]===0) { //set 2nd selection\n        //     newOrder[1] = target;\n        //     newOrder[2] = 1;\n        //   } else { //set 1st selection\n        //     newOrder[0] = target;\n        //     newOrder[2] = 0;\n        //   }\n        //   setSyntacticOrder(newOrder);\n        // } else if (toggle===\"foreshadowing\") { //todo: adjust gradient\n        //   if (!target.target) { //if target is an endpoint, indeterminate end\n        //     const newInstants = [...data];\n        //     const instant = newInstants.find(n => n.id === target.id);\n        //     instant.foreshadowing = true;\n        //     setData(newInstants);\n        //   } else { //otherwise, change mouse to no symbol\n        //     console.log(\"forbidden\");\n        //   }\n        // } else if (toggle===\"certainty\" || toggle===\"importance\"){\n        //   setInflectTarget(target);\n        // } else {\n        //   setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n        // }\n\n\n        e.stopPropagation(); //stops deselect when bg is clicked\n      });\n      /*//---draw inflections---//\n       //--draw connetion inflection--//\n      //circle around instant\n      svg\n        .selectAll(\".connections\")\n        .data(activeData.filter(d => d.connections))\n        .join(\"circle\")\n        .raise()\n        .attr(\"class\", \"connections pointer\")\n        .attr(\"r\", n => n.radius? n.radius*1.5 : radius*2) //TODO: custom radius accessibility\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-dasharray\", \"3\")\n        // .attr(\"opacity\", d => d.opacity ? d.opacity : 1)\n        .attr(\"cx\", d => xScales[d.scale].scale(d.x)) //scale x coordinate based on xScale defined in instant's scale property\n        .attr(\"cy\", d => yScale(d.y));\n       //link connecting circles\n      const ctLinker = linkHorizontal()\n        .source(instant => data.find(x => x.id === instant.id))\n        .target(instant => typeof(instant.connections[0])===\"object\" ? instant.connections[0] : data.find(x => x.id === instant.connections[0]))\n        // .target(() => {\n        //   //layerX, layerY\n        //   const y = yScaleInverse(499);\n        //   const x = xScales.find(n => n.text === \"biggie\").scaleInverse(778)\n        //   return {x: x, y: y}\n        // })\n        // .target(instant => data.find(x => x.id === instant.connections[0]))\n        .x(d => d.scale ? xScales[d.scale].scale(d.x) : d.x)\n        .y(d => d.scale ? yScale(d.y) : d.y);\n      svg\n        .selectAll(\".connectionLinks\")\n        .data(activeData.filter(n => n.connections && !n.connections[1])) //link starts from 1st one\n        .join(\"path\")\n        .raise()\n        .attr(\"class\", \"connectionLinks pointer\")\n        .attr(\"d\", ctLinker)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"black\")\n        // .attr(\"stroke\", n => n.color? n.color : \"black\")\n        // .attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1)\n        .attr(\"stroke-dasharray\", \"3\")\n      */\n      //initialize custom symbols\n\n      const cancelledSymbol = {\n        draw: (context, size) => {\n          let s = Math.sqrt(size) / 2;\n          context.moveTo(s, 0);\n          context.lineTo(s * 2, s);\n          context.lineTo(s, s * 2);\n          context.lineTo(0, s);\n          context.lineTo(-s, s * 2);\n          context.lineTo(-s * 2, s);\n          context.lineTo(-s, 0);\n          context.lineTo(-s * 2, -s);\n          context.lineTo(-s, -s * 2);\n          context.lineTo(0, -s);\n          context.lineTo(s, -s * 2);\n          context.lineTo(s * 2, -s);\n          context.closePath();\n        }\n      };\n      /*\n      //foreshadowing symbol\n      const fsSymbol = {\n        draw: (context, size) => {\n          let s = size;\n              context.moveTo(0,0);\n              context.lineTo(s*2,s/2);\n              context.lineTo(s*2,-s/2);\n              context.closePath();\n        }\n      };\n      //foreshadowing gradient\n      var fsg = svg.append(\"defs\").append(\"linearGradient\")\n      .attr(\"id\", \"fsgradient\")//id of the gradient\n      .attr(\"x1\", \"0%\")\n      .attr(\"x2\", \"100%\") //since its a horizontal linear gradient\n      .attr(\"y1\", \"0%\")\n      .attr(\"y2\", \"0%\");\n       fsg.append(\"stop\")\n      .attr(\"offset\", \"0%\")\n      .style(\"stop-color\", \"black\")//start in black. TODO: different color foreshadowing\n      .style(\"stop-opacity\", 1);\n       fsg.append(\"stop\")\n      .attr(\"offset\", \"100%\")\n      .style(\"stop-color\", \"black\")//end in transparent\n      .style(\"stop-opacity\", 0);\n      */\n      //---draw symbols---//\n      //TODO: doesn't display if cancelled is true from the start\n      // .attr(\"cx\", ([,v]) => xScales[v.scale[0]].scale(v.x)) //scale x coordinate based on xScale defined in instant's scale property\n      // .attr(\"cy\", ([,v]) => yScale(v.y))\n\n      svg.selectAll(\".cancelled\").data(activeData.filter(([, v]) => v.cancelled)).join(\"path\").raise().attr(\"class\", \"cancelled pointer\").attr(\"d\", symbol(cancelledSymbol, radius * radius * 5)).attr(\"fill\", ([, v]) => v.color ? v.color : \"black\") //if it has a color other than black, use that\n      .attr(\"transform\", ([, v]) => `translate(${xScales[v.scale[0]].scale(v.x)}, ${yScale(v.y)})`).on(\"click\", (e, target) => {\n        if (toggle === \"cancelled\") {\n          const newData = { ...data\n          };\n          newData[target[0]].cancelled = false;\n          updateSrc(newData);\n        } else {\n          setInfo({\n            position: [e.x, e.y],\n            target: target\n          }); //displays instant properties when clicked\n        }\n\n        e.stopPropagation();\n      });\n      /*\n            //---draw foreshadowing---//\n            svg\n              .selectAll(\".foreshadowing\")\n              .data(activeData.filter(d => d.foreshadowing))\n              .join(\"path\")\n              .raise()\n              .attr(\"class\", \"foreshadowing pointer\")\n              .attr(\"d\", symbol(fsSymbol, radius*radius*5))\n              .style(\"fill\", \"url(#fsgradient)\")\n              .attr(\"transform\", d => `translate(${xScales[d.scale].scale(d.x)}, ${yScale(d.y)})`)\n              .on(\"click\", (e, target) => {\n                if (toggle===\"foreshadowing\") {\n                  const newInstants = [...data];\n                  const instant = newInstants.find(n => n.id === target.id);\n                  delete instant.foreshadowing;\n                  setData(newInstants);\n                } else {\n                  setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n                }\n                e.stopPropagation();\n              });\n      */\n      //---draw labels---//\n      // svg\n      //   .selectAll(\".zoneLabel\")\n      //   .data(zones)\n      //   .join(\"text\")\n      //   .attr(\"class\", \"zoneLabel\")\n      //   .text(v => v.text)\n      //   .attr(\"x\", v => xScales[v.scale].scale(v.start))\n      //   .attr(\"y\", v => yScale(v.yStart?v.yStart:yMin+5))\n      //   .attr(\"text-anchor\", \"middle\");\n\n      svg.selectAll(\".label\").data(activeData).join(\"text\").attr(\"class\", \"label\").text(([k, v]) => showLabel ? v.text : v.id).attr(\"x\", ([k, v]) => xScales[v.scale[0]].scale(v.x)).attr(\"y\", ([k, v]) => yScale(v.y - 0.05 * rangeY)) //vertical offset. see scales\n      .attr(\"text-anchor\", \"middle\"); // .attr(\"font-size\", fontSize);\n\n      svg.selectAll(\".intervalLabel\").data(intervals).join(\"text\").attr(\"class\", \"intervalLabel\").text(v => v.text).attr(\"x\", v => (xScales[v.source[1].scale[0]].scale(v.source[1].x) + xScales[v.target[1].scale[0]].scale(v.target[1].x)) / 2) //average scaled x values\n      .attr(\"y\", v => yScale(Math.min(v.source[1].y, v.target[1].y) - 0.05 * rangeY)) //.6 below lowest y, otherwise 1/5 of breakpoint\n      .attr(\"text-anchor\", \"middle\");\n    } //---zoom---//\n\n\n    const zoomBehavior = zoom().scaleExtent([1, 5]) //can zoom 2x smaller and 5x bigger\n    .translateExtent([[-50, 0], [dimensions.width + 50, dimensions.height]]) //limits how far graph can pan\n    .on(\"zoom\", e => {\n      const zoomState = e.transform; //returns zoom transformations as an object\n\n      setCurrentZoomState(zoomState);\n    }); //regular clicking\n\n    svg.on(\"click\", e => {\n      if (toggle === \"addInstant\") {\n        /*\n        if range of zoom > 10, Math.round(x)\n        if range of zoom <= 10 (floor: 10^0, ceiling: 10^1), use tenths (/10 -> /10^1)\n        if range of zoom <= 1 (floor: 10^-1, ceiling: 10^0), use hudredths (/100 -> (10^2))\n        if range of zoom <= .1 (floor: 10^-2, ceiling: 10^-1), use thousandths (/1000 -> (10^-3), etc.\n        const decimal = scales[activeScale]\n        xScales[key].scale\n        const decimal = scales[activeScale]\n        */\n        //TODO: zoom range matches up with current zoom\n        const zoomRange = xScales[activeScale[0]].scale.domain()[1] - xScales[activeScale[0]].scale.domain()[0]; //max-min\n        // const precision = Math.log10(zoomRange)<1 ? -(Math.floor(Math.log10(zoomRange)-1)) : 0;\n\n        const x = xScales[activeScale[0]].scale.invert(e.layerX);\n        const y = yScale.invert(e.layerY); // console.log(Math.round(x*Math.pow(10, precision))/ Math.pow(10, precision));\n\n        setInflectTarget({\n          x: round(x, zoomRange),\n          y: Math.round(y)\n        });\n        setToggle(\"NewInstantForm\");\n      }\n\n      setInfo(null);\n    });\n    svg.call(zoomBehavior);\n  }, [data, setData, zones, scales, toggle, activeLayer, activeData, dimensions, logic, currentZoomState, setInfo, radius, showLabel, syntacticOrder]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    className: \"svgWrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: \"graphic\",\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 769,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 768,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Graphic, \"b4CAhwLk9FZLxktZNVY3UOkz6Nw=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = Graphic;\n;\nexport default Graphic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graphic\");","map":{"version":3,"sources":["/Users/skye/Desktop/Portfolio/2021/chronologies/client/src/components/Graphic.js"],"names":["React","useState","useEffect","useRef","select","scaleLinear","scaleOrdinal","axisBottom","axisLeft","linkHorizontal","format","drag","zoom","min","max","symbol","symbols","useResizeObserver","generateIntervals","Graphic","data","setData","updateSrc","activeLayer","zones","setZones","radius","info","setInfo","setInflectTarget","showLabel","toggle","setToggle","scales","setScales","syntacticOrder","setSyntacticOrder","activeScale","activeData","Object","entries","activeZones","logic","length","isNaN","x","svgRef","wrapperRef","dimensions","currentZoomState","setCurrentZoomState","yScales","yTicks","v","push","y","forEach","k","scale","domain","height","range","ticks","Set","intervals","svg","current","selectAll","remove","round","value","precision","Math","log10","floor","pow","logicScale","unknown","breakpoint","xMin","map","key","xMax","yMin","yMax","rangeX","rangeY","xInverse","currentScale","width","xDrag","xScales","fromEntries","thisScale","hasSegments","segments","hideLabel","yPos","label","units","tickValues","scaleInverse","xSegments","keys","i","n","proportion","segment","newXScale","rescaleX","newMin","newMax","yScale","yScaleInverse","yScaleInverseDrag","join","attr","start","yStart","end","yEnd","opacity","color","importance","on","e","target","position","type","stopPropagation","tickSize","append","style","call","raise","g","d","xAxis","concat","tickFormat","hideUnits","text","yAxis","hideLabels","dragged","dx","subject","dy","newInstants","intervaler","source","interval","dashed","newOrder","layerX","layerY","newData","cancelled","instant","find","id","foreshadowing","console","log","cancelledSymbol","draw","context","size","s","sqrt","moveTo","lineTo","closePath","filter","zoomBehavior","scaleExtent","translateExtent","zoomState","transform","zoomRange","invert"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, scaleLinear, scaleOrdinal, axisBottom, axisLeft, linkHorizontal, format, drag, zoom, min, max, symbol, symbols } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport generateIntervals from \"./generateIntervals\";\n\nfunction Graphic({\n  data, setData,\n  updateSrc,\n  activeLayer,\n  zones, setZones,\n  radius,\n  info, setInfo,\n  setInflectTarget,\n  showLabel,\n  toggle, setToggle,\n  scales, setScales,\n  syntacticOrder, setSyntacticOrder,\n  activeScale\n}) {\n\n  //all data is passed down from and synced to App.js\n  const activeData = Object.entries(data); //convert json to array for faster processing\n  const activeZones = Object.entries(zones);\n  //TODO: layers\n  // const activeData = activeLayer ? Object.entries(data).filter(([k,v]) => v.layer === activeLayer) : arrayData;\n\n  //convert scale object to array for faster processing\n\n\n  //is logical operators active?\n  const logic = data.length? isNaN(data[0].x): null; //TODO: refine logical operators\n\n  //initialize reference object to pass to svg in React Dom\n  const svgRef = useRef();\n  //svg wrapped in div bc otherwise resize observer callback won't work\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState();\n\n  //hash map of y scales\n  const yScales = {};\n\n  //init scales\n  useEffect(() => {\n    if (!dimensions) return;\n    const yTicks = [];\n\n    for (let v of activeData) {\n      yTicks.push(activeData.y);\n    }\n\n    Object.entries(scales.y).forEach(([k, v]) => {\n      yScales[k]= {\n        scale: scaleLinear()\n        .domain([0, dimensions.height])\n        .range([v.min, v.max]),\n        drag: scaleLinear()\n        .domain([-dimensions.height, dimensions.height])\n        .range([-(v.max-v.min), (v.max-v.min)]),\n        ticks: [...new Set(yTicks)]\n      }\n    });\n  }, [dimensions, scales, currentZoomState]);\n\n  //initialize intervals between instants\n  const intervals = generateIntervals(data); //TODO: write updateIntervals function\n\n  //initialize variables\n  /*\n  var xMin = min(Object.entries(data).map(([key, {x}]) => logic ? logicScale(x) : x));\n  var xMax = max(Object.entries(data).map(([key, {x}]) => logic ? logicScale(x) : x));\n  var yMin = min(Object.entries(data).map(([key, {y}]) => y));\n  var yMax = max(Object.entries(data).map(([key, {y}]) => y));\n  */\n\n  //all d3 shennanigans goes in this hook. called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current); //\"svg\" is the current version of svgRef data\n    //prevents crashing when useResizeObserver returns null before svg is rendered\n    if (!dimensions) return;\n    //removes svgs added using append()\n    svg\n      .selectAll(\".remove\")\n      .remove();\n\n    //rounding for data inputted thru paintbox interface\n    function round(value, range) {\n      const precision = Math.log10(range)<1 ? -(Math.floor(Math.log10(range)-1)) : 0;\n      return Math.round(value*Math.pow(10, precision))/ Math.pow(10, precision)\n    }\n\n\n    //---scales---//\n\n    //if time matches logical operator keyword, translate into index values, then map\n    const logicScale = scaleOrdinal([\"before\", \"now\", \"after\"], [-1, 0, 1]).unknown(0);\n\n    const breakpoint = 5;\n\n\n    const xMin = min(activeData.map(([key, {x}]) => logic ? logicScale(x) : x));\n    const xMax = max(activeData.map(([key, {x}]) => logic ? logicScale(x) : x));\n    // const yMin = min(Object.entries(data).map(([key, {y}]) => y));\n    // const yMax = max(Object.entries(data).map(([key, {y}]) => y));\n    const yTicks = activeData.map(([,{y}]) => y);\n    const yMin = scales.y[activeScale[1]].min;\n    const yMax = scales.y[activeScale[1]].max;\n    const rangeX = xMax-xMin; //0 is minX, 1 is maxX (reference findMinMax)\n    const rangeY = yMax-yMin;\n\n\n    /*\n    - Allow users to specify scale. x&y min max and units label\n    - for each scale, generateScale()\n    */\n\n    // function generateScales(currentScale) { //TODO: turn into dedicated scaleDrag\n    //\n    //   const xInverse = scaleLinear()\n    //     .domain([0, dimensions.width])\n    //     .range([currentScale.min, currentScale.max]) //maxRangeX-minRangeX gives section of x values displayed onscreen\n    //   const xDrag = scaleLinear()\n    //     .domain([-dimensions.width, dimensions.width])\n    //     .range([-(currentScale.domain()[1]-currentScale.domain()[0]), (currentScale.domain()[1]-currentScale.domain()[0])]) //maxRangeX-minRangeX gives section of x values displayed onscreen\n    //   const yInverse = scaleLinear()\n    //     .domain([-dimensions.height, dimensions.height])\n    //     .range((rangeY>breakpoint) ? [-rangeY, rangeY] : [-breakpoint*5, breakpoint*5])\n    //\n    //\n    //   return {\n    //     xInverse, xDrag, yInverse\n    //   };\n    // }\n    const xInverse = (currentScale) => scaleLinear()\n      .domain([0, dimensions.width])\n      .range([currentScale.min, currentScale.max]) //maxRangeX-minRangeX gives section of x values displayed onscreen\n    const xDrag = (currentScale) => scaleLinear()\n      .domain([-dimensions.width, dimensions.width])\n      .range([-(currentScale.domain()[1]-currentScale.domain()[0]), (currentScale.domain()[1]-currentScale.domain()[0])]) //maxRangeX-minRangeX gives section of x values displayed onscreen\n    // const yInverse = scaleLinear()\n    //   .domain([-dimensions.height, dimensions.height])\n    //   .range((rangeY>breakpoint) ? [-rangeY, rangeY] : [-breakpoint*5, breakpoint*5])\n\n\n    //scales values to screen pixels\n    /*\n    {\n      biggie: {\n        ...\n        scale: generateScale()\n      }\n      ...\n    }\n    */\n\n    /*\n    xScale =\n    {\n\n  }\n    */\n\n\n    //TODO: fromEntries & entries not compatible with some older browsers\n    const xScales = Object.fromEntries( //for every scale in scales data, generate an xScale\n      Object.entries(scales.x).map(([key, thisScale]) => [\n        key,\n        {\n          scale: scaleLinear() //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n            .domain([thisScale.min, thisScale.max])\n            .range([0, dimensions.width]),\n          hasSegments: thisScale.segments.length?true:false,\n          hideLabel: thisScale.hideLabel,\n          yPos: thisScale.yPos,\n          label: `${key} (${thisScale.units})`,\n          tickValues: thisScale.tickValues?thisScale.tickValues:null,\n          scaleInverse: scaleLinear() //for NewInstantForm\n            .domain([0, dimensions.width])\n            .range([thisScale.min, thisScale.max])\n        }\n      ])\n    );\n\n\n    const xSegments = () => {\n      const segments = [];\n      Object.keys(scales.x).forEach((key, i) => {\n        const thisScale = scales.x[key];\n        // const segments = [];\n        if (!thisScale.segments.length) {\n          return;\n        }\n        thisScale.segments.map(n => {\n          const min = n.min?n.min:thisScale.min; //if segment contains a min, set that as min. otherwise, set scale min as min.\n          const max = n.max?n.max:thisScale.max;\n          // console.log(xScales[i].scale(min));\n          segments.push({\n            scale: key,\n            yPos: thisScale.yPos,\n            proportion: (max-min)/(thisScale.max-thisScale.min),\n            segment: scaleLinear()\n            .domain([min, max])\n            .range([xScales[key].scale(min), xScales[key].scale(max)])\n          })\n        })\n      });\n      return segments;\n    }\n\n\n    /*\n      xScales(generateScales(scaleLinear(scale)))\n      - take xScale and rescale according to transformations (newXScale)\n      - update each array entry's domain with that of newXScale\n    */\n    //if there is a zoom transform, override each xScales.scale with adjusted scale\n    if (currentZoomState) {\n      Object.entries(xScales).forEach(([key,thisScale]) => {\n        const newXScale = currentZoomState.rescaleX(thisScale.scale); //zoom state comes w methods for transformations\n        const newMin = newXScale.domain()[0]\n        const newMax = newXScale.domain()[1];\n\n        //applies zoom transformations to scale + scaleInverse\n        xScales[key].scale = newXScale;\n      });\n\n\n    };\n    // const xScale = scaleLinear()\n    //   .domain([xMin, xMax]) //scaleLinear takes domain (data values) & maps onto range (screen pixel values)\n    //   .range([0, dimensions.width]);\n    const yScale = scaleLinear()\n      //if difference in y vaules greater than 5, resize to min and max\n      // .domain((rangeY>breakpoint) ? [yMin, yMax] : [yMin-breakpoint, yMax+breakpoint])\n      .domain([yMin, yMax])\n      .range([dimensions.height,0]);\n    //inverse scales for drag behavior\n    // const xScaleInverse = scaleLinear()\n    //   .domain([-dimensions.width, dimensions.width])\n    //   .range([-rangeX, rangeX]); //maxRangeX-minRangeX gives section of x values displayed onscreen\n    const yScaleInverse = scaleLinear()\n      .domain([0, dimensions.height])\n      .range([yMin, yMax])\n      // .range((rangeY>breakpoint) ? [yMin, yMax] : [yMin-breakpoint, yMax+breakpoint]);\n    const yScaleInverseDrag = scaleLinear()\n      .domain([dimensions.height, -dimensions.height])\n      .range([-rangeY, rangeY])\n      // .range((rangeY>breakpoint) ? [-rangeY, rangeY] : [-breakpoint*5, breakpoint*5]);\n\n\n\n\n\n\n    //---draw zones---//\n    if (activeZones.length) {\n      svg\n      .selectAll(\".zones\")\n      .data(activeZones)\n      .join(\"rect\")\n      .attr(\"class\", \"zones\")\n      .attr(\"x\", ([, v]) => xScales[v.scale[0]].scale(v.start))\n      // .attr(\"x\", n => generateScales(scales[n.scale]).x(n.start))\n      // .attr(\"y\", n => n.yStart ? yScale(n.yStart) : yScale(minMax[2]))\n      .attr(\"y\", ([, v]) => v.yStart ? yScale(v.yStart) : yMin-10) //TODO: if no yStart, minimum y value\n      .attr(\"width\", ([, v]) => xScales[v.scale[0]].scale(v.end) - xScales[v.scale[0]].scale(v.start))\n      .attr(\"height\", ([, v]) => {\n        if (v.yStart & v.yEnd) {\n          return (yScale(v.yStart)-yScale(v.yEnd))\n        } else if (v.yStart) {\n          return (yScale(v.yStart)-yScale(yMax-10))\n        } else {\n          return (yScale(yMax-10)) //TODO: if no yStart, minimum y value\n          // return (yScale(minMax[3])-yScale(minMax[2]))\n        }})\n      .attr(\"opacity\", ([k, v]) => v.opacity ? v.opacity : 0.5)\n      .attr(\"fill\", ([k, v]) => v.color ? v.color : \"#999\")\n      .attr(\"stroke\", \"black\") //TODO: stroke be different colors\n      .attr(\"stroke-width\", ([k, v]) => v.importance ? v.importance*2 : 0)\n      .on(\"click\", (e, target) => {\n        if (toggle===\"certainty\" || toggle===\"importance\") { //pulls up inflection menu\n          setInflectTarget(target);\n        } else { //displays zone properties when clicked\n          setInfo(null); //clear InfoBox\n          setInfo({position: [e.x, e.y], target: target, type: \"zone\"});  //TODO: set info to null when clicking same zone again\n        }\n        e.stopPropagation();\n      });\n    }\n\n    //---draw bottom axis---//\n\n    xSegments().forEach(n => {\n      //TODO: push all the axis ticks() values into an array\n      // [...new Set(segments)]\n      //draw from there\n      const segment = axisBottom(n.segment)\n      // .ticks(n.proportion<.33?5:null, \"f\");\n      .ticks(null, \"f\")\n      .tickSize(-dimensions.height); //TODO\n\n      svg\n        .append(\"g\")\n        .attr(\"class\", \"remove\")\n        .style(\"transform\", `translateY(${dimensions.height*n.yPos}px)`)\n        .call(segment)\n        .raise()\n        .call(g => g.select(\".domain\") //removes solid black axis bar\n          .remove())\n        .call(g => g.selectAll(\".tick line\") //styles individual ticks\n          .attr(\"stroke-opacity\", 0.25))\n        .call(g => g.selectAll(\".tick text\")\n          .attr(\"y\", 10)\n          .attr(\"opacity\", (d, i) => { //TODO: remove instead of setting opacity to 0\n            if ((n.proportion<.25)&&(i%3)) { //less than 1/4, label every 3 ticks\n              return 0;\n            } else if ((n.proportion<.33)&&(i%2)) { //less than 1/3, label every other tick\n              return 0;\n            } else {\n              return 0.5\n            }\n          })\n        );\n    });\n\n    Object.entries(xScales).forEach(([key,thisScale]) => {\n      const xAxis = axisBottom(thisScale.scale)\n      .tickValues(thisScale.scale.ticks().concat(scales.x[key].min, scales.x[key].max)) //pass in autogenerated tick values + min and max values\n      .tickFormat(format(''))\n      .tickSize(-dimensions.height);\n      // console.log(thisScale.scale.ticks())\n\n      if (!thisScale.hasSegments) {\n        svg\n          .append(\"g\")\n          .attr(\"class\", \"remove\")\n          .style(\"transform\", `translateY(${dimensions.height*thisScale.yPos}px)`)\n          .call(xAxis)\n          .raise()\n          .call(g => g.select(\".domain\") //removes solid black axis bar\n            .remove())\n          .call(g => g.selectAll(\".tick line\") //styles individual ticks\n            .attr(\"stroke-opacity\", 0.25))\n          .call(g => g.selectAll(\".tick text\")\n            .attr(\"y\", 10) //TODO: dynamic tick text spacing for accessibility\n            .attr(\"opacity\", 0.5));\n      }\n      if (!thisScale.hideUnits) {\n        svg\n          .append(\"text\")\n          .text(thisScale.label)\n          .attr(\"class\", \"axisLabel smallTxt remove\")\n          .attr(\"x\", dimensions.width/2)\n          .attr(\"y\", dimensions.height*(thisScale.yPos+.07))\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"opacity\", 0.5);\n        }\n      }\n\n    );\n\n    //--draw vertical axis--//\n\n    const yAxis = axisLeft(yScale)\n    .tickValues([...new Set(yTicks), scales.y[activeScale[1]].min, scales.y[activeScale[1]].max]) //reg mode\n    .tickFormat(format(''))\n\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"remove\")\n      // .style(\"transform\", `translateY(${dimensions.height*thisScale.yPos}px)`)\n      .call(yAxis)\n      .raise()\n      .call(g => g.select(\".domain\") //removes solid black axis bar\n        .remove())\n      .call(g => g.selectAll(\".tick line\") //styles individual ticks\n        .attr(\"stroke-opacity\", 0.5))\n      .call(g => g.selectAll(\".tick text\")\n        .attr(\"y\", 10) //TODO: dynamic tick text spacing for accessibility\n        .attr(\"opacity\", 0.5));\n\n    if (!scales.y[activeScale[1]].hideLabels) {\n      svg\n        .append(\"text\")\n        .text(`${activeScale[1]} (${scales.y[activeScale[1]].units})`)\n        .attr(\"class\", \"axisLabel smallTxt remove\")\n        // .attr(\"x\", dimensions.width/2)\n        // .attr(\"y\", dimensions.height/2)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"transform\", `translate(-30,${dimensions.height/2})rotate(-90)`)\n        .attr(\"opacity\", 0.5);\n    }\n\n    //--drag behavior--//\n    const dragged = drag()\n      // .on(\"start\", e => {\n      //   select(this).attr(\"stroke\", \"black\");\n      // })\n      .on(\"drag\", e => {\n        //TODO: extract precision function to round new pos\n        const dx = xDrag(xScales[e.subject[1].scale[0]].scale)(e.dx);\n        // const dx = xScales.scaleInverse\n        const dy = yScaleInverseDrag(e.dy);\n        const newInstants = {...data}; //always make a copy when updating array\n\n        //find array element in data with matching ID and set new x y coordinates\n        newInstants[e.subject[0]].x += dx;\n        newInstants[e.subject[0]].y += dy;\n\n        setData(newInstants);\n      }) //TODO: unify onEnd and onClick\n      // .on(\"end\", e => {\n      //   updateSrc(data);\n      // });\n\n    if (Object.entries(data).length) {\n      //---draw intervals---//\n      const intervaler = linkHorizontal()\n        .source(interval => interval.source[1])\n        .target(interval => interval.target[1])\n        // .x(n => generateScales(scales[n.scale]).x(logic ? logicScale(n.x) : n.x))\n        .x(d => xScales[d.scale[0]].scale(d.x))\n        .y(d => yScale(d.y));\n\n      svg\n        .selectAll(\".interval\")\n        .data(intervals)\n        .join(\"path\")\n        .raise()\n        .attr(\"class\", \"interval pointer\")\n        .attr(\"d\", intervaler)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", n => n.color? n.color : \"black\")\n        .attr(\"stroke-width\", n => n.width ? n.width : radius)\n        .attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1)\n        .attr(\"stroke-dasharray\", n => n.dashed ? n.dashed : null)\n        .on(\"click\", (e, target) => {\n          if (toggle===\"connection\") {\n            const newOrder = [...syntacticOrder];\n            if (newOrder[2]===0) { //set 2nd selection\n              newOrder[1] = {x:xInverse(scales.x[activeScale[0]])(e.layerX), y:yScaleInverse(e.layerY), scale:activeScale}; //scale TODO\n              newOrder[2] = 1;\n            } else { //set 1st selection\n              newOrder[0] = {x:xInverse(scales.x[activeScale[0]])(e.layerX), y:yScaleInverse(e.layerY), scale:activeScale};\n              newOrder[2] = 0;\n            }\n            setSyntacticOrder(newOrder);\n          }\n          //else if (toggle===\"foreshadowing\") {\n          //   if (!target.target) { //if target is an endpoint, indeterminate end\n          //\n          //\n          //   } else { //otherwise, change mouse to no symbol\n          //\n          //   }\n          //   //option to adjust gradient eventually\n          // } else\n          else if (toggle===\"certainty\" || toggle===\"importance\") {\n            setInflectTarget(target);\n          } else {\n            setInfo(null); //clear InfoBox\n            setInfo({position: [e.x, e.y], target: target, type: \"interval\"}); //displays interval properties when clicked\n          }\n          e.stopPropagation();\n        });\n\n\n\n      //---draw instants---//\n      svg\n        .selectAll(\".instant\")\n        // .data(activeData.filter(d => !d.foreshadowing && !d.cancelled))\n        .data(activeData)\n        .join(\"circle\")\n        .raise()\n        .attr(\"class\", \"instant pointer\")\n        .attr(\"r\", ([,v]) => v.radius? v.radius : radius) //TODO: custom radius accessibility\n        .attr(\"fill\", ([,v]) => v.color ? v.color : \"black\") //if it has a color other than black, use that\n        .attr(\"opacity\", ([,v]) => v.opacity ? v.opacity : 1)\n        // .attr(\"cx\", d => generateScales(scales[d.scale]).x(logic ? logicScale(d.x) : d.x))\n        .attr(\"cx\", ([,v]) => xScales[v.scale[0]].scale(v.x)) //scale x coordinate based on xScale defined in instant's scale property\n        .attr(\"cy\", ([,v]) => yScale(v.y))\n        .call(dragged)\n        .on(\"click\", (e, target) => {\n          switch (toggle) {\n            case \"cancelled\":\n              const newData = {...data};\n              newData[target[0]].cancelled = true;\n              // console.log(newData[target[0]]);\n              updateSrc(newData);\n              break;\n            case \"connection\":\n              const newOrder = [...syntacticOrder];\n              if (newOrder[2]===0) { //set 2nd selection\n                newOrder[1] = target;\n                newOrder[2] = 1;\n              } else { //set 1st selection\n                newOrder[0] = target;\n                newOrder[2] = 0;\n              }\n              setSyntacticOrder(newOrder);\n              break;\n            case \"foreshadowing\":\n              if (!target.target) { //if target is an endpoint, indeterminate end\n                const newInstants = [...data];\n                const instant = newInstants.find(n => n.id === target.id);\n                instant.foreshadowing = true;\n                setData(newInstants);\n              } else { //otherwise, change mouse to no symbol\n                console.log(\"forbidden\");\n              }\n              break;\n            case \"certainty\":\n              setInflectTarget(target);\n              break;\n            case \"importance\":\n              setInflectTarget(target);\n              break;\n            default:\n              setInfo(null); //clear InfoBox\n              setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n          }\n          // if (toggle===\"cancelled\") {\n          //   const newInstants = [...data];\n          //   const instant = newInstants.find(n => n.id === target.id);\n          //   instant.cancelled = true;\n          //   setData(newInstants);\n          // } else if (){\n          //\n          // } else if (toggle===\"connection\") {\n          //   const newOrder = [...syntacticOrder];\n          //   if (newOrder[2]===0) { //set 2nd selection\n          //     newOrder[1] = target;\n          //     newOrder[2] = 1;\n          //   } else { //set 1st selection\n          //     newOrder[0] = target;\n          //     newOrder[2] = 0;\n          //   }\n          //   setSyntacticOrder(newOrder);\n          // } else if (toggle===\"foreshadowing\") { //todo: adjust gradient\n          //   if (!target.target) { //if target is an endpoint, indeterminate end\n          //     const newInstants = [...data];\n          //     const instant = newInstants.find(n => n.id === target.id);\n          //     instant.foreshadowing = true;\n          //     setData(newInstants);\n          //   } else { //otherwise, change mouse to no symbol\n          //     console.log(\"forbidden\");\n          //   }\n          // } else if (toggle===\"certainty\" || toggle===\"importance\"){\n          //   setInflectTarget(target);\n          // } else {\n          //   setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n          // }\n          e.stopPropagation(); //stops deselect when bg is clicked\n        });\n\n      /*//---draw inflections---//\n\n      //--draw connetion inflection--//\n      //circle around instant\n      svg\n        .selectAll(\".connections\")\n        .data(activeData.filter(d => d.connections))\n        .join(\"circle\")\n        .raise()\n        .attr(\"class\", \"connections pointer\")\n        .attr(\"r\", n => n.radius? n.radius*1.5 : radius*2) //TODO: custom radius accessibility\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-dasharray\", \"3\")\n        // .attr(\"opacity\", d => d.opacity ? d.opacity : 1)\n        .attr(\"cx\", d => xScales[d.scale].scale(d.x)) //scale x coordinate based on xScale defined in instant's scale property\n        .attr(\"cy\", d => yScale(d.y));\n\n      //link connecting circles\n      const ctLinker = linkHorizontal()\n        .source(instant => data.find(x => x.id === instant.id))\n        .target(instant => typeof(instant.connections[0])===\"object\" ? instant.connections[0] : data.find(x => x.id === instant.connections[0]))\n        // .target(() => {\n        //   //layerX, layerY\n        //   const y = yScaleInverse(499);\n        //   const x = xScales.find(n => n.text === \"biggie\").scaleInverse(778)\n        //   return {x: x, y: y}\n        // })\n        // .target(instant => data.find(x => x.id === instant.connections[0]))\n        .x(d => d.scale ? xScales[d.scale].scale(d.x) : d.x)\n        .y(d => d.scale ? yScale(d.y) : d.y);\n      svg\n        .selectAll(\".connectionLinks\")\n        .data(activeData.filter(n => n.connections && !n.connections[1])) //link starts from 1st one\n        .join(\"path\")\n        .raise()\n        .attr(\"class\", \"connectionLinks pointer\")\n        .attr(\"d\", ctLinker)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"black\")\n        // .attr(\"stroke\", n => n.color? n.color : \"black\")\n        // .attr(\"stroke-opacity\", n => n.opacity ? n.opacity : 1)\n        .attr(\"stroke-dasharray\", \"3\")\n*/\n      //initialize custom symbols\n      const cancelledSymbol = {\n        draw: (context, size) => {\n          let s = Math.sqrt(size)/2;\n              context.moveTo(s,0);\n              context.lineTo(s*2,s);\n              context.lineTo(s,s*2);\n              context.lineTo(0,s);\n              context.lineTo(-s,s*2);\n              context.lineTo(-s*2,s);\n              context.lineTo(-s,0);\n              context.lineTo(-s*2,-s);\n              context.lineTo(-s,-s*2);\n              context.lineTo(0,-s);\n              context.lineTo(s,-s*2);\n              context.lineTo(s*2,-s);\n              context.closePath();\n        }\n      };\n      /*\n      //foreshadowing symbol\n      const fsSymbol = {\n        draw: (context, size) => {\n          let s = size;\n              context.moveTo(0,0);\n              context.lineTo(s*2,s/2);\n              context.lineTo(s*2,-s/2);\n              context.closePath();\n        }\n      };\n      //foreshadowing gradient\n      var fsg = svg.append(\"defs\").append(\"linearGradient\")\n      .attr(\"id\", \"fsgradient\")//id of the gradient\n      .attr(\"x1\", \"0%\")\n      .attr(\"x2\", \"100%\") //since its a horizontal linear gradient\n      .attr(\"y1\", \"0%\")\n      .attr(\"y2\", \"0%\");\n\n      fsg.append(\"stop\")\n      .attr(\"offset\", \"0%\")\n      .style(\"stop-color\", \"black\")//start in black. TODO: different color foreshadowing\n      .style(\"stop-opacity\", 1);\n\n      fsg.append(\"stop\")\n      .attr(\"offset\", \"100%\")\n      .style(\"stop-color\", \"black\")//end in transparent\n      .style(\"stop-opacity\", 0);\n*/\n      //---draw symbols---//\n      //TODO: doesn't display if cancelled is true from the start\n      // .attr(\"cx\", ([,v]) => xScales[v.scale[0]].scale(v.x)) //scale x coordinate based on xScale defined in instant's scale property\n      // .attr(\"cy\", ([,v]) => yScale(v.y))\n      svg\n        .selectAll(\".cancelled\")\n        .data(activeData.filter(([,v]) => v.cancelled))\n        .join(\"path\")\n        .raise()\n        .attr(\"class\", \"cancelled pointer\")\n        .attr(\"d\", symbol(cancelledSymbol, radius*radius*5))\n        .attr(\"fill\", ([,v]) => v.color ? v.color : \"black\") //if it has a color other than black, use that\n        .attr(\"transform\", ([,v]) => `translate(${xScales[v.scale[0]].scale(v.x)}, ${yScale(v.y)})`)\n        .on(\"click\", (e, target) => {\n          if (toggle===\"cancelled\") {\n            const newData = {...data};\n            newData[target[0]].cancelled = false;\n            updateSrc(newData);\n          } else {\n            setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n          }\n          e.stopPropagation();\n        });\n/*\n      //---draw foreshadowing---//\n      svg\n        .selectAll(\".foreshadowing\")\n        .data(activeData.filter(d => d.foreshadowing))\n        .join(\"path\")\n        .raise()\n        .attr(\"class\", \"foreshadowing pointer\")\n        .attr(\"d\", symbol(fsSymbol, radius*radius*5))\n        .style(\"fill\", \"url(#fsgradient)\")\n        .attr(\"transform\", d => `translate(${xScales[d.scale].scale(d.x)}, ${yScale(d.y)})`)\n        .on(\"click\", (e, target) => {\n          if (toggle===\"foreshadowing\") {\n            const newInstants = [...data];\n            const instant = newInstants.find(n => n.id === target.id);\n            delete instant.foreshadowing;\n            setData(newInstants);\n          } else {\n            setInfo({position: [e.x, e.y], target: target}); //displays instant properties when clicked\n          }\n          e.stopPropagation();\n        });\n*/\n      //---draw labels---//\n      // svg\n      //   .selectAll(\".zoneLabel\")\n      //   .data(zones)\n      //   .join(\"text\")\n      //   .attr(\"class\", \"zoneLabel\")\n      //   .text(v => v.text)\n      //   .attr(\"x\", v => xScales[v.scale].scale(v.start))\n      //   .attr(\"y\", v => yScale(v.yStart?v.yStart:yMin+5))\n      //   .attr(\"text-anchor\", \"middle\");\n\n      svg\n        .selectAll(\".label\")\n        .data(activeData)\n        .join(\"text\")\n        .attr(\"class\", \"label\")\n        .text(([k,v]) => showLabel ? v.text : v.id)\n        .attr(\"x\", ([k,v]) => xScales[v.scale[0]].scale(v.x))\n        .attr(\"y\", ([k,v]) => yScale(v.y-0.05*rangeY)) //vertical offset. see scales\n        .attr(\"text-anchor\", \"middle\");\n        // .attr(\"font-size\", fontSize);\n\n      svg\n        .selectAll(\".intervalLabel\")\n        .data(intervals)\n        .join(\"text\")\n        .attr(\"class\", \"intervalLabel\")\n        .text(v => v.text)\n        .attr(\"x\", v => (xScales[v.source[1].scale[0]].scale(v.source[1].x)+xScales[v.target[1].scale[0]].scale(v.target[1].x))/2) //average scaled x values\n        .attr(\"y\", v => yScale(Math.min(v.source[1].y, v.target[1].y)-0.05*rangeY)) //.6 below lowest y, otherwise 1/5 of breakpoint\n        .attr(\"text-anchor\", \"middle\");\n\n    }\n\n\n\n    //---zoom---//\n    const zoomBehavior = zoom()\n      .scaleExtent([1, 5]) //can zoom 2x smaller and 5x bigger\n      .translateExtent([[-50, 0], [dimensions.width+50, dimensions.height]]) //limits how far graph can pan\n      .on(\"zoom\", e => {\n        const zoomState = e.transform; //returns zoom transformations as an object\n        setCurrentZoomState(zoomState);\n      });\n\n    //regular clicking\n    svg.on(\"click\", (e) => {\n      if (toggle===\"addInstant\") {\n        /*\n        if range of zoom > 10, Math.round(x)\n        if range of zoom <= 10 (floor: 10^0, ceiling: 10^1), use tenths (/10 -> /10^1)\n        if range of zoom <= 1 (floor: 10^-1, ceiling: 10^0), use hudredths (/100 -> (10^2))\n        if range of zoom <= .1 (floor: 10^-2, ceiling: 10^-1), use thousandths (/1000 -> (10^-3), etc.\n        const decimal = scales[activeScale]\n        xScales[key].scale\n        const decimal = scales[activeScale]\n        */\n        //TODO: zoom range matches up with current zoom\n        const zoomRange = xScales[activeScale[0]].scale.domain()[1] - xScales[activeScale[0]].scale.domain()[0]; //max-min\n        // const precision = Math.log10(zoomRange)<1 ? -(Math.floor(Math.log10(zoomRange)-1)) : 0;\n        const x = xScales[activeScale[0]].scale.invert(e.layerX);\n        const y = yScale.invert(e.layerY);\n        // console.log(Math.round(x*Math.pow(10, precision))/ Math.pow(10, precision));\n        setInflectTarget({x: round(x, zoomRange), y: Math.round(y)});\n        setToggle(\"NewInstantForm\");\n      }\n      setInfo(null);\n    });\n    svg.call(zoomBehavior);\n\n  }, [data, setData, zones, scales, toggle, activeLayer, activeData, dimensions, logic, currentZoomState, setInfo, radius, showLabel, syntacticOrder]);\n\n  return (\n    <div ref={wrapperRef} className=\"svgWrapper\">\n      <svg id=\"graphic\" ref={svgRef}>\n      </svg>\n    </div>\n  );\n};\n\n\nexport default Graphic;\n"]},"metadata":{},"sourceType":"module"}